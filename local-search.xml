<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SwiftUI基础知识</title>
    <link href="/2022/05/16/SwiftUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/05/16/SwiftUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9ff5140908fd5ea0ce7b31aae9a4aa5f49785c189aadc731efedb5980ba343ab">30b1ea5aa7108d130862beaedfecbfe153ff63c4b10e9547f907ccac0b01bb55d6b7f739862c36629664dd5c15939caf70e200841492e562097026eb02fe6e7d9341d3d58822cce0fe461fcbc0790ff93dc629dcc9abe975f215112720b0ad151024909b0f96a9684f8e36f12cff81c2e6aa54ca6f9fef31e9edf3f6e8ccc79a843a6fd571f218476e277c1e387d7781e1d9096f771627f5717c86dc0f99ef0c410e28cec91aa3ed63238cddf5c108942c87cc9b72aa76f0611add1f761cde8b3c320be6fc8fe22b9544e5fdfd34e388de9e3e2f8a124a9c1a01517323a0d10f517df800145e3797c7f0674d5b02bb4aec49bdb7423a638c9b6252b3852eb109acfa1ff0efb8bc29229e23fcb198ee1169a54b1f1f6e2edfea62db2c1c7ab13fd324cd86cc503e0d14c80734b478e3aa681d3c922a96f3f5740f422dc05b8ba9ec379e83caf6892bf7ee2f422fc6ee0445f71ad1039573ae233825dd77ee8a48de677043d68933b06d176cf06a9a375bc16bc43bd013d329485b8f3752d5fa0ef20e04898d4843df6331d7751c75cafeb722a000798a4bbfa099b7be5c5e7275aec9d287023e843457759c27c87c4c200588d1f822a0d0bfc99ba8e68fb0ccc711b1883ebcad4b707191fd8d5a0d3517e6baec77c05315ece299911c92b7a337e5f1d517eb97a4e177163f60d8b7e53ae647f05d919c9e8bb8d9cc24514eedb1508cc2b26a5cfad792c481b64804615c3304920442e341a389e2508003fb608fdbaa8bf4486187580bdb619273c39c6d6fc481c2da9320e48c1b181cdde66a8f48614407bc33556990d316f4d002f08f3d6340a08b7d59eb1c100c6973ce748444eae06cab1f924d4ebe7ebf980dd96592777734b93e50682fcae6c3f4b0eecd0e6316fea73e2a99ce36c9af3948b8b9887fe1e5d10f4ff13fb6ccfce44c2660f57718fc69d8fe85b96dbfb39e8b00f297d63c2639767766cd9d0cc7ccf22de9f6ad3be74ad4adbb4552f66e8649a0f004678b3fa9efe7998862e599e727b834b5d6ae32deb140ef1d991a35c0c993dca00e6dae9ec596d8977b552e742b43e73284bb1df8c430ec70f0b244590c8e62ed7a5e9439daaff7de2bb0ea6b50ad241ee43a3fa72db224310e6864413c4b5f2f9a7a308e735dd5854743bcc7c407653fda316cf95c17e922f980a1e11e572b71d219e4336883624e787ce15ef935bfe19d82a4f4f3db5e34ff1c8585651d180cebd49225ed44f2a1c1a25ad9bf25fcdadc6918105b1d3cc498758b6ddfec4a68d56dd4f7517a3b8ed4713dd644fe1b596e0e6ad7c39bc881760eba771f9bc0c133107b1f37f043cc103538a1239d95858c546843d0756bd0aedbdf1e66cd69466744abe53727103814fe52619e4007181a3274855e61e8e79d473908ad9b7f57b1fc94d4d707f523563bec5f60f235979aea383ee1f3e5f80199c4e9544c72d9b9e01266c34b0749af37a10591388aa6390e915e7f26e0ddac7cde7114da3f4116a9d14ab0b8330973dba16b976ecd05e82dcf60aed9baff6a93f15b458256ee2a4cfad1d3bdcf6ca326babba8d4be9f318db01e26d91ebee813892cbd9a2e9902cbeef08c9bd56b4787d80604c548157f71188e201b3542431e47771a8f346b749cacb9b61dc7cc7de32749d5c8c8ae35f7c023f7eccfdaa7642d866fe4b16125cd9f049b7e49d2380e9011032e93f7f32dbdbda147d22c44ee6ddd16ed9690acbe715c86a7321bdd81e0f25ddec8059b5416541711e34e7698bb21dd64648b8708c3f5b65ab31dcedf79f88cdda9779084f62858f05242d9eadd1e285db4ed9d098e8f22d29748e106d84c2b4065f1f158fe61113ba2e91bc802ab433bbba3db7fefe6b290b215bb7bc50c354c845492c6b33966178f56165c3e4b4942a79412232a974c06129dbd5085bd9457023cdc8142cbced722d96da74efbcbe6c39b884fbb1d043b1c06cb15290309a9d81e32e5a80d814b7ba0bb69de6165576dece552c0cfe5cad81ed15f8e8aec1c8d7a54dfac54b7c81b25a9b84a2e6ff7b620a5d29589443f2e4408b6b9569566a394ffd47503da46c1c97993c9bd33f53ed37af30ede784e1f87981348a82f27154391999ab6deb40ca27565b753dfcebac26259157b8d692f8379b49345bfe12b84682028cb752205803eb6c613b2174363b5cd2eea135a53d3753ddcba94b36c9505d612710532954200ba9b8330eee0338232cbed8c13ef2391cbab25dc1bbb4db0db5755563b36707a2b26b7182591262a0c20bc96bd0e81d29c355bf20f6ae7a43f8803329203415c19d279e537dcb2638c86d88c354944387bd105fbd7e7c1082adffc5f44bb47556ce48287983f8149d14f445af0f7e9c8eaa89f15b377fa664250d43cccf4840f69ebd3f21103a416f2f3b27deac0a92d3ff4d9320ed5ef8deaa05a5ea9986769482d2cf77cb01c8442335d48cb0c90a9d6c8db0f1c20ed50b5fe8293acbdd617dcddf6f380cdda1a1c75c8f3e008891763287d9d7d78ec92e581151bf3ebf83194db9d96aa1cc10cd7f905cfb21315acd3602765c303b947398112912e3b8de7a0afc6396b12e47f3029b06e769916c6e771741ab926c49a213bd51398a059d8f9fe8751296a8d897ca7d92f06aa47087a9ddf6e2ae601a51e298bc9d52aaaa85632807922622625b975d256815126d99a81cfcb49a4388fd8535a6230d67283afdc8cec0440b91885d6a6c03636bdbd370a304e3294c7820d0ab9c71aa671df652cd3b9879c3bd234e4ae388d55f700f77eaa49ce6f6d983dfa3e18120c70b1223454c0b903cb200d9bce94e13c19b67b8fe5a31d3d054b72ec892d9db88c8620ee181f2237cb531463620517f37133a9048d724455d24878309ab2b0694e691a7bc5cd0fb210e640374eafcfe035b56c12fa9e31ac888cea21df6a70ada160916730d515ac6b280a25428f0f5edb8c44025d914245c6a54bf017a3ba177ba668543e5dc9f46776d88d4aa9b5fd86d46e44835523ea0191201f54029c067606a6b2944cc5bb89d5c1506b23b4020c531863c9a9e1f237ab267c349b3e4d279cff3cd63ac1fb0dd3acb5d045bd1dc3786386c1bf3b490b3b8eea5df954dbd84d4b2336849851244a5ee303e1a4e0cd3edc9c125a08dc3d4d77f457774fd0aea4da6d6af6c88acdc46632c2d907405a03f541f0757fb0a5754a69f77dcc376f6c60709e5fc9db5b1a74af5b36c31fac41cdf5deb7c2bbbb7396a55efc3532af15f5ae30dfed7a0fe95c7b3874bd2a59886880f9a34a8266815d0fcc59196f7873982619c72132c93771e6a9aca84c8a632821fedf64a8c5a8e9d3bf94904f1ff073769ac3440a2832e3c630aede36675cab7be7a25f939aaf61459bd9c71e1cb7e9b8c7750ed2852250761d1affcf55e848c903658d2bcdf6adf2297d383d92866cc580e6320a01d058bf1dd3c094ef9b418af3b3d6986eef8a7415f80522a05cf98f4cd3c77f344992cab8e0f5a063f458803ad1b58151447ff99f8a732ea6f70b54a1a5710fc29fa51bff3aef8cc4bf8039ad94b85ecf0e17c49eb765ea48c9aeab21810bc12d29013124c07321e50f15d1fa15b656ce1b18e684f512d9b80ff6305543edc1a9e9785c05e8063db189c682dea55808fbef915e1c2805d83ff18ad8767f0d13c8ea4fb18c497c01926077ad2fcb85979114f2e2289edd3aee9fb8d55cab27f9d0a614d9e0c02c4606e2afdf9c825593d80195d29afe690fd56cc60d0f9b7baa63b37b23e13d4763fc23ff9a6288a7bb9cdcd911dd973ff2a847c83028b733ad163b83127d98338cf87241a5ef967ce57cd1ed7fa246310e8854cec92c7f5adfddb9cf3786291c55e455fb8f2ea3240a04a999905b54a49c68983f2cd46a63b45ccab512eb0c8c08e1f73e8e9554fd13e5f924c618ec959189b78c163230837617ba04d66477d72dc6df223d2a5b3d4f8f554cee960ff92357b0d088ecdc4d94c78a9fca334e162810325c9c1ef9332a0a32515aa1f6ae74c0922976ef85f217296ea385d0f50f586206b9f748a6e80739b9c17ebbfe61376f6d97582c62b734e4ee3ec7ebebbf26691cb2985c38ee1c8d77f8933910bf3aa5c8b0448e5b785b230fdea042460a1e3c37d7d6c4928be97c5f475cb5ac8acacbfc7425a0e925b1d0215b33934815cd096095bf3e3a5bc1f610ff3db1b6715cc8d1cbac34af284ef3e716de26c67c8c16a924aed95c7573cb3a9ed5ea82195a4e9ebc1aede859f5df5f2bf133cbc04173040768a75e5627ee770f0bb959b19799a74d1415581a0175969bf2ff48064b70c0cc88874d3b370ba252a2305bed0359fe4f0550e0e794d5d6a4d638e428d68f69e47a37b6bce002539458f5603c77d749050842ccf2af945f8371205995df78b6cd22f24b2b09da6980c6eddd349d19c1efa5b8ace855ef957e9f91349f030dc8f5c7e8592e7e5b185344832072504d61650764c7c1ec32aff6729b85df73c7235acc35d1ba2392822c793ede266d1e9c431034a8326fccf662e8fa3d5e345aae0e097c6d6843b0e3c738f4ee0fdfdedfed3b077b5b4939deeb3df111260a08f0c8965f6b35cb1ddd1e8cc60dea68969b24889f8acdffb6122818e7cd97626b7ea1060c6f47935d4ea37be63f128410f66d452199f418767dac19e79eda55c9e2561ee01cce813239cbba0f8f7f86f40d36bb759efd770aa961bba3a651eb1195bfc8297a0d833453ec92227bdec7b38597b0c44a380406f6e73ec0f20c69ee3700c3127cccdddd9becdede89e867844ef3202f56905c496b6eb28e0628e03b5178540b399cb22cfd0c4b158b7fa38f14a74fa1d1766443dafd17f664224c9f0570e56c4e46200259f43b1e2be030a83da24305956bdc9e47e556ac1232432abf03228bf12d9ae5306a024ab19e52052c9056ad9f75260ae4aaef8e6a67e9b9c75bab2a80b3bd94f69ad847e1e15f98c59d7f5d03a2030e1c56a341558d16a8c7e5148fc8c31d8f3df3a2c57f110b4f6a923d668341f5585c351cca32fcf33ab0a5f6a017dbba550ef7b917bf53fe75605acad2d0e2aa7d0feeb52c5f80079d5dd156f04c0d85d714ebd39af19570a35c463d7c5e92caf285321b7019d830de58bf1db0ca9daa5ba933e5b680755bee47ef5671dfe062773069265d4057b1d452ee167d2a3b43f5e37c1c11af9e9e011eeba56d8586662053992f19654c6dd935adeaced482f2f59e77ca4e7ade045252fc316b17faba368d6c17e2849af2db26545a0b6312dc7ada9838dc5f5adedd672ac897ae2b5e5593eb31b595d0155dcda83967e452d5d80073907c3f8b9d5592e4304fa0111c37297856ec84498520d0b7c5eb0c22066944b9db390dac5dd07f514c820418dc7494f3b69b18924b12cc847632a64113304c2c65a95dbe7936047bb76ab811d1ce28e9e63f584ac466aec723a9de47acdf3745ec787ae955e1f86d9a510c19ec04e1e5f96a59cb9c006b5d5afa574b63b967383964634fb91e49fa8f8f52ab9e9d25b6b585f8e3dd6bc4f8b5b8b26024122224a5d0392518ad2315d9321b2e90aa42babc3bbccdc99aedbf02c02c69c32382021d10d2acb2ee9a76351aec7b6b6f6fef524e50f074c30a982aaff7167ec24fe8f182f519485f0ebf3316bc0feca57983d1648f259aa53d0dc522402e50419827e2c4a5d5a8023fc3778961849370719dc5e49e2247b6332f029dd46a6587f730ebec5d852298306476cd3e04fe68b5f839aa5ee8a409c658f0534fa1622c39f1fff711de922cef7283ad5f2e6cefe1f659fb97a8d1e773fcbef0a7e891836bb669aa9f42b735b5e83197e6d901e01d691d58b28849b611b1a0ef9f6ad5bfa2e3aa95a9b70f157b5af78cf6a113ad7b7be7d8879e3f9cdd575d69a14776df5d39579b90db4736244d4da0c24fbd948b7120d7dee2e9e5e681a13ac28ed7e83bdb18b6ba520c2fc12e58592a22c3bf7e39379e5d84ef9f7e594d63df416860a7f93678b6dac8b80a9367da3d3f74582d9f2a7a8f2b743e66ec95a7b544cb13e49d3f5cc3b56d43d232555f849decf8fd1b7fab7fa088c3a5cba04536e2b0507bce75bd928ce5d9b817b8fc5c2bf19a17f69f5f22f6be0ad02c9e5a0a273ae251cc5c41302d34ffc83e6d95e0f32457db925ca65c6666cbd27b77c4dcb46a7467b54176bbb303208074239c92bdd73fd1f52c765ff5560c5cf9c627f9d7f3ba0c3dc7355d6882e6f09e4c38d8f8f275f22a639aea9edbb909fd01c2d7f0f9733eb055b73a85917dfa6362e6449de4bd387c8aa86b8c670528b622c94dc98b42ef88297f08d3619de7205bcc2c63519369c6ee078e17f7917f5b1c94d99c8be3794118e5bba067444463f7c805714e75015a3f2f53e86972150bb0e505e651b8e6d888ba994424241e4938477abe9982850701e9dca5ac755a0d04cd9370564816a22c7702c4db5b42156a4662249686cb04b5cc76c836d1a5b00692a07aebd13d75a6956a34024db4b7464222b6d02101db61f7b2369ae7962f902d8b99cf3e75dffb91ab2de4954a073fef97dd79ca43c1acada3fafdd9c8ba8c833e3f8cc0b72123d936e0dc446a7813e7de3d8399d3153d77c4201fb6d25af62e02b1fd9a6bbb85b0dbf305e3f503e9acffe083e02d81346f0f814fbde81cce365368a138b279a0f2a99266009ca1d89a8c3c2aa9189cddbd877ac2bd7d8a57718abd54f7f3f7de3f64cd87d406683868769a4676555f796cff96624e4fe8824f4b8b0d14a084097f7c3d662ac77a1c509b2651d85fa6c53faa40e2cf08c2bfef5e36322cb21a1efe4b837ae3496cf1091ac88473550007a23a8cf0f3690be6e06dd2a31c388a8f93643a8dee5fe43079727b790b1be2e19d8b5f937d8a9024099604118538a33e11b12d7a257ccbea2ba2b2886d6cfcbd6c0793f494a41c7ec56ec72759e1ff5fd7ac868bc6b887282038ff7ac8907acffdac4ea289180e8ced48c27e3f7ed0102f00530f734d0590334e049781620c0ec40ef42192419897ca633e3635de6e1e35aa2e29eba1857fa5f21a42cd89c766d4ce169cbc092963b27b8077bd70a8bd7565d3ddc1bb8820c46f40956bc75a27fa624c9a02a8c3ce6c264ce2ceb857e07444aa29d7a300a81ec26052edb19cfd5a1a8339e64b775024cf70d2c85874a439f45deb19f3ee8c4fa026a5c0ccb25fdbf456981a9bf63e7e56f4dfce64a82d752dbfda1b403bcc864b6a08a84aa996855a773bb070cd39fe81a3a7d326773f1f5d2fa25d78abd9a5a2cafbf1ed3b1b4067675e1c0215f0849a3bf56813524d4f40ddef11c0b9843eee825f511862b8a17b8153b8e9917849944a2b84401fd87935e2887496ff8085c24a274f490fc200c06651f46e8e2c550dd39e317c6cd49b40991851d0a13b8ffb66127fa65da6b3828890b237e886d83ff61df2274ff19e75e932fc8802a20a9d78815f7798d8c736dd65d6914eb1a3633f376bc37e02ae3ea331f44c01445da7e766073f2c1796e64a13d4fcc7a14126cb420512aa2ec625219e0a68e8545dd9f083355533e079c3abb6d1a8d1d25df5c4800f5ceabc794985a906bfdf4171e49df50876fb1c4b2e0097a30bcbe0143e4936a924d84e57744e6354ac36092b38663f7b54e92d1c9dafa101205c81fa399c8e2a87f28c8c5a20b1add449dcfcb3d5329bebc6668741cfcb1d1b662720ac54e4fa32d075978b23e44baa65f2dc64628ad164bfa20725037bd84aedd0a183692a2dd31fcd8d41780752392f224039c0b1d21f6d980d836475e5a5418592af6a81cb560b8aca0de7eaf0b47fa52a40b06a8f468ec493f7e43df19f875f5894af406e8352dd6202bf37c3e3f62bfd2b6ebaf17c63bb989b433ba3ab698b45cb24bcac77cc1186df21545e40a432c5a29176a384821e5371a14371524b05925beea1c9d0661967be9c223691207fa356032a4e0f05c55e222398d262bb66e5fac2fdb473a30944e4edb6ad35d990ecb8ef82fae53cc3bc3340bdd8e357e805294ec879afaf13d7cfb886ba3698cdd6ce9c1736112b11a2bcffa1032688a40d6703de323aba1678193f50df07f54ae03154248029c8b10186c8339c6cdf5ff899680689f6953a68b3c3dbe9b7c918b05d98a42b08b7444fd7e9562933c851b848eb2b136723d5cdecd6984d6bcae96e7387e389199a4e028f4b7de685624741102395e565132a6d9ea6e5f16e438cd734825078bc41516339aed53e1d3cfd3b0ffd3d41798ba590ddd232734b7a44f2d4586975e38269d93f091a62f12b6006d1a0b792ecf5241d75bf47075dfec50c7aa4f154a1c1a4e012ca73ed80bceba913aa3a50961ab8229edac61beed5fdf4a8f4c776666d74cb83c84fa605af62508014a2a550f98a6ddd4a4c5bbceb858b74912e4221b584ce18f4c345996e61ad0597a896fbe721ff263c138d4a00a4d543d8b30a50c090b82f3ac7244acee4262ee7bab049c00dff038d6620fe78683888b6d8577caafe2d264126d24097883c61e71fe10941d1b09f1b8272998c0104e826cb6ddb6d86c241ea8cada9baae1228c86f8a2fb3e2f121446e736d2d5c94279c3b8bcf56e06d0cf381762ee3ab0a0777ea506b3137af3b829f71ecb61f13d910a28fefb49d3af3641542b91a1e4c94baa90936822fc1f73ab205ad1af67950abea0e7b19baf5c9db222da5e5adbcf11240265b89e7224ca0657927cbe47c79a82dc646f0c68c3c061b44b8aefda3f2d6127b8bc6d7fc1c64514f322682ce0b7ba9d9b466f77172e25c6a9c930c95f55ce030547c2f2a5e2ef3bb295c4a657457b3a8f4bb9160c8a8bdb561211afa5d19176b95783eaa718c9a29676cb6c83941619b965fa99e22975b957f86b2059fd10f3c7fac8f79530e025de8d8fcc0ade89655cd4f85984c8a1a98b052a4196024aebad37b8b5a37d1e3eb917f80a83bde711c756668ea9f114e633927a66d8ec8ff360f089a8a5c1a75c61e3080a0c5de63a87025280fe394c9e19a7e582c96ee832fa14089da5fabedcbb7dd9b74db68a2d51cc9753a75ad2565f6694bef35a5bbbae37f6e984b12f155b93ada1e626cb646e8f3dca1f2d81da884585a3bd5a732f7bff281a42cee78a14f28c5cdceec3d54bd20430a17bccba3b6f408dd8e18e3a6cacd079211773bc763c9f0471576f410ad60663b63218b3898a6e364c6cab358319db1f3101ff812bed084d1a7307e1922f421725d7251ad7c15b1e6deb69de93dc6bfa3efe859d652921bbca0a23bd96ea6d684acb6337505ad598f2506e26a9c339988c0bf79acf4788948c59f8b2aeb3eab6401cf31d23a03c6220877421c567f9c26f270b069d31c5574bb06fbbadb70fdfed27ff4a13590b9f2c4b842ff51a882b82289bd19af14d6656ce858a538d2fcd3127009be78d18b2112df0e86e3331422b4b447001163950b46d7a942b0ac1d0f8e341c9e6ac0b2bbea049b12ce24186e59aa14768de46de7d0747e8ca4a84703f03708a8434629d1f8df8f3518d100e38497107d0be97324443fd261dc7f38dc17fdb7c47d7da58879ca0f16dd68c43ceb07e233e32832b89ca30c95c33fa6b516eaaafba869ac1b8f0fbc6287dec44da271432c1ba898e095f5e6dcc0d8d844ac5928a5cb41fe0e4cc0cb7d46f965d62fb9667452c142e8726fe798c2f3fdebf9982096dbefcf8818d73ef5c92723e717c80925299c68bc1b9bca2932f0d8b58d0ced9c04bbd82853802d66c5a706a40bbc5d311e6604617b4c2e56c380b777b083daed027a37d575b94727a857b9d35a38b28799a649abe071af1b88fb3b634de3af63a8028313eda599146d31331684a430ec6b8a7a75a4520a0f1a103704bfe4278a075de26748c7fc1be13ffaf2903da43bc462e074f6ec4f478c86450dd2427b5e12d0a936710aa713e3dfae03f6f3bb9083a96c855d7090031370ab85776f490071791187c1d2fd467b75c8c9340c424bbae81283bf39c185f3af35b5626d06e59af1ead48905fb6d575197e786d8fe6daf410165278ee0c6439bda38f04a6939f9a3343caafcd3e5442db7d8c1957f8a1e46d852b05d5997f18a6265f2ff850dace8f746198958d6764ba668a209dcbb18014527745f70e74e539e5461873cf00682f5fae1317e381298c9ccea978288786579b13c003a03efa81b7ba6e4fb88143fe32da0564255d95250b9e33cbb70f11ee0cfb86e69332f21b9cce4d09c3f393c7d8318b65a7d6aded625c3fdf18d51be8fcfea7fc3bac01987c2a87c5a1e3bcdaccbee5b586ad5e1e0fefddbb2887f756a0f00f6b51a1629ff1fdedd138f8d2a73ccccf048865bc32ccef73208c1fa1d969f3f9aedc61aefa5130164b0d7c8dc416877a93760d866000aa437006dd89ce1bf094a4572f24d9ac7193f67188f88d2e7e70af23d4faa686f4b515ed5c854af78b39fb5a32368ee746601528808c53b84ebf601cf65acdda4910edbdaa83cde0f1dd5f6fba1fac60aba2a26970bf4226ba0ed46f33ef417a96f4f10f692a99d0b1b0d5280fb70e7a8d054ba27bb005de664f5ac3cecbf3234b24105b9b5e97d6f6898145e034a89414f3f4d08f4c3dbb20473e8463c81c31522b77dbf9d65d20a8f1421cc127ae006f60ff8f5104bc3782e817e6109a5c6db8347369490ef8a238cfa41b78928ffe59e01f0c696d092bef393784283835b37547256eb5acc88bb51bdede2171df93fba278fe519a2e2c64271bf3ece53fa23466585569551f3429c1eb9ca9ac78174e4f2aa9642bbae76b489bd964b10974fe6e92fe796c15410eb8f69123a146ab56da2596367a8cc770df7df8bb491d7afade5198307647ffa6dc32ce1cfa1f6e8490ebf4bd74f1ec962fb897b1f657b7eff8751c0216a2437123a4dee1f02a466b2c0eac087e64ac069f528d49ff31f02ca5048de94bb76b517971adaba130c7fa1edde204e7b8cac47b1607ffb2e4ba4167b20afec3a285a8c89e723e16f40998d9164ae981ba7cb4123d31116cc19f22616726b52adf66c39f3afbb347cd92acc7a0830994279fcd96588f5cfbe69ae7b4d1a4b31ba13a5391926f646d5f31624164809c8e988399a18e24bb59062a165d387c1557c96429e2a3449699f2752becbea5d5b5ea3cd79b136ab72f0f210cd13c6eb045326fe9ad10d63f9ce08a148bd08da71eb6f32fb5732f21957648a333db8785426a44367f90a2c5a33592487f3d9cca9c68dbc09b52c203026a30c50b54ee9538c0e20ef11a4d8c6440a7686f2b44c8e96554df894b573a5f23761a647ba76bbea0de27d3316d407dba9ce8528148742e56a04fd48e3cf1d7fbd99b79e4f61d3a78b1753642d406bf08e2f0f2f5e1abe0a4a74fadf365dd7eb0ff13a2707d68a08f0d7ad4b05d60e9bb76e2f8f0dd8703baad2716aae86fa0a5542139516fea51ef074179475262e1aa231a8686f0db8af4275635b0f94f1da7672422703537f789e6373192befdd9787d3bbe79366580bffe392d825b08086ffbf97e97a0d18ed2df7c7b3b2fc25da31d1977c8b6bb453fdcf87c66d8ffe5a0f01ae3c819e487ccf4827b7aa946e94ed13a8d2a9c93924fe77b0f53a1172842588bdde378f4e2530dbfe295a3cd7b4fb994d8325a27912c538efb64b2c5df4e925db251745665ff3164bee55b58cef3540c944f330f84e3be0e6ed6823e493070571efec5d904867e05c8a99b1a67b9e22d1b45b0943add916d8a085c4fede685efc325c6019594d4da2548e6caab3c4fc7322d0f61cf386d6ca25b102ad008876340b3d92d4413dd89f6e62a72cc4564dea4870ec9adbbea8ba6a86c4d759fac3861bae2af2988ec5dc391c6dc5af746fa7be18b3b3d1df19e961b71288522168b5b857d0a8d9b75c6bc9f2b668354dd691b7e35193eed5aab7c8d38deb1f554d66e029c164de75ed1589c713c78f0dbcb1d2492c7d382fcc0cd1b3138c9415c3c45703585940785bb7d1d5d5deb8f42e12bdf1a29ffc7a4038b693aa34a2b7ca4f40f5a6df09f462854d54442b2dab7786cff65b86b83e1119c92ab34d675557f2cf9dc8256c54a0c2a880eb0e5d4f882d774b9cb9c90b28df7d7fab75f74e62a0166dd8d429055b298e94c2b8c4e7ebe7486820c58a8f2197c19076e94d771f5bdfdfd8e7bbc1bda875e1c4d0d4a5d7a135d67a14cfd3c49271d227bf0ed24d8a333f873144dbb6ddf3a789638fd2e429b67f7b04d29ea763dcc7f61128c69736326e559696199ca2fb761eec1a88a4af7f610dc0e99842a0669a671865d8b78248627d160a87bb741ee6d137569f22031b4ccf045bf2ece8f3cf5452e5cffd52e2d0ef9426a17f866057e70e8f050be8992cff485fd618447114bfad10c706745fe89a5a82a60a84384f01f0169d0fab3783624339f994c4194f10c6aaa1d7527e4ea0f9c2cc2a244719f836ff70b259486f1a1aa48a9cd66e471d1f815c084e37156ded5bbcc5369faa75744e4bfeee73b287775fadca82211399e1a51731aa8042547e8ce7655d585b6e78c28a5ea1dbf624523e942b5589a13326aa5900bde54651815d3d80fc4c03bb36205437d0c10e0477beeb076f1a476d3f2c48f8c7b1913b9d1ad188d2cf85c7ac234e7730ad256b3c16abfe57001cf571760aa04dd0e6434a926d852e645250731bb7c15db7baf194ba7243bc8430f261fa6633330941bc31b7e218dcb09ea1ccad25bc3ded932fed9eeef43f9650c9e27a66e6235011fa232144a4db069ee411bc5a3e185d507d019f792aa0e6ead256d50263ce9a0279d23dac9f0a36aa561594cfe3ab53eb5016c4432af8f082800063a44fe3162be0b1b7f10e3fa610ce555975ec60d1707c595465a0054d4a0637d9931536862d3e2689ad9c1a9824003f7fd0e7ac5e42fa69589a1fca6d1b37048a8102d10c5c4e0df38e035a9b3ae334b5d2143baea960542d7898b647afb32f2f951d35e63caf57679ca360aad80d1b1610b15a604c95699ba07952d0f2f5900305670298075101ff1570ecf586c8c5513e2fe642b5bb43d898df4c224d77fb17359f048760c59fbeece3cdee487fa29736244a617b446b01db6fa9b694835d748f390aa0890cec49fe6662c1afcfa1abf5b8849c87720ee7f095d33ff34cc18d8b0303481bd74e7ecc8b477bf81450ed55f55d77e28c857fb46f239bad8ecda234546a06d369e3d957b662fa955655fbc04f8de1394825ccd30822866ab86591cecf4f8acdd94f708fac08755830af7434f2b43df27a1568e625efddf02ea1883bb433fea4af6ec1a7de3e177042e773c3f736cbc0e0b982345dc7f42a3a4f4ef203f6396d88435c31076bd0e9a5ec6b5e7998139506c97bc4fb332ef2fe811d1ebdbdd2ac6f35518eff2d9b374a8d6b3a389ce6ad79d36892f393f881ad5f96fe5457cd9b1469d5afb345bfeffc55070edb0507f257da2c31aeef71712b780913a9e1483b0595c7c989c0e60dccabc3803083860dd04f0fec26e2296e43910d95f3069f120d4a9c5d494340e524bfbf554937698e8a1ce388f881a34a9d1d0d34944d1851e183a55efd7463f4cd309a1756db4454e82292a3cd139ea2b69a93720e45899701630f11d139f80943208f4cd9cf8ee1e85077e485b5b237bdfe3e27ab84a8ee244f79bcd134dbd073502c0b1d21c1a78937f9f1227f1cba10e11c0d79761603659b05dc3ac7024a52b9bd9dc7450aa7fb3c99cc39425ad67844d942170ff0fb47fc5b3d41bc614970fe996ca9bc9be5d6c8015c770588c9f5128dc94f0db876ccf0442e956ea9a9bed56188c1bd90f7228159112249b8d83ff2fa3df578d90a3982835040909ae6c9ab3bcdea6903635de4c6877970fd9b0432baa358aaff72cb1386af9436ca2ad9b9a9660b5820e861d3bfaad8f5e14c6a199ce38be9e821ed35ee4e36714e0a11182648a29219211b4c159b96fa822f70ffa1560414ec118ee2a763959cf8d4f3a14af30389bc2587dc67f01c6076d7e4a9c4eea5c22d3314542f2a1be601a25cb617f6ef71991f65720469684fe1f5f90cf78e0f5639cfca0e79f66f26bb4b8bb4c55af3aa4206c663718ed300bf1dfd1bf2ae3575f83e341751a22bec33f8287b2fe66e8905d6c34a8a3184ae132b2bc05074eaa00475509cac5990f72514829a75a165259554632938062410ecbb396afba2594471872e722ba9ded3b6f094ca96bbf7bdfc56c82a8f6dad644fabe6783045595996523cacd1fb2f093b348b2cbf322ba6c0f749cc4c897d205493f5a7f84a1c618bd57d94629e54562c28a22a5f5a437b7b801555313a73e4d0b9965785768f718bbe3244b8d712347ed16e92b5c2c25fb9bd3106f000c9f17011cb6ef5de80ef31fa569961e5f6b657924ca6f355deb54906cb15c15c10035d46075cb5750dd8ee11349d29e46d8357d7d453c7bfccecf839bafb0aa0d3176261d3e608c2a690f8ab61052f58c9aa1d4d924ad43acd5cdc74283b68cf2677ad12102d3b94f88f871eadecf2b7315b425f6455bbab46e2d9b46570a451e9ae1320bd810e2594f9c1f2ee4b715e57aa1a4a19cf091f02484cbf341262af924c6ba5430a918d86094c02aed96ec80e541d3a87a424001db9e4f655793f86b0362350c08931bf3af94bdb7f254ffb058ac1f81bf2b2f1f0e19523b43c846303001eaf563bb9918973e26b9b5d7b89b1646cbc98d5ea181df965e62ad29fe06963adbe6008d4990268ea20b8815c5211a0deebefa6861ece593a544354b2ba2bacf58ae0a1379c70674eeb12d4db1951a9fae5099810c331ddfea68681e0bfa37d9afcfa8f2cb98df87ec1facc57aa369bfea90a1ae77240aa46dd985b646c990857cb5be300122bd2236afd370456b5585bca472c2835e296a9ffc7765e150a970a18c7863a67e129631c3a36ac9dcb8c3a069b27175e4ddef08ebb99dc17099137fa8acb10bfc63f27afd2906aa60f6209c7fa471a490efcd2f904f9955a6bee5ada8690e4fa412746116464d8f2a092d8be8fc946b239b66e7cf06edba5b0d62c69e4b75fbc0bd80948be5419e7783f1868d826710adcc37f14f13ea8db4ccbee736d8df3201f992a4b29f067e92ee866cd8cb3f6c5c274b24408ef4b27c7aef9e9358db4c07f45bc7b693bfd2493f6ed96b6f6dab77f06800ae46fa5c92fe047950b428fa7f8b0b834cd0b059ca3060107931b061365422d17e88e60c9b9161b0eec4201b0532bd8e4ab4601bbb7e9b54bcc7fbff8b19b861af17d2cf4b303a43803bafad477ded4ef1c66a64ebfd0e9c64e4fe5fa23da20c3d5bf26cb3ebacbeaa2fcaf6d762608a5aca787b00e8afb6e0da015671580c1ba5239da663c5fa35156961861f96d84e38de7a5c9e4b34f7bbe07b69e7fc0e951ac3312f6336554df21af043ffcd1bbbe1eb4866c312c6abb86032c0316bff3205abe7ba46403598a8ad4c962c67a5177f0a29b57e9a83bd29dfc003414c6357a4f41ecbbd105efab9c687e4a73a1bc161f14a56a2e09329d297ad904e24bc64b7738e2674d1666f9f30e6736c9cc6bfbfde8b7352c6dbd67053a94cbb5665cb7f5b787a8aa4ff2b36360143efc5f3d2df19ae4ae3eafe95b6137851223c77fa2b64e286cb342a682d8728a1fbda3403c5323b9f8d1b73a254529f516232782461ef54151a841121df207a7e1f10afabdb611881635047034e1b62e15c151bb2c6a27447a17c59f6269395397c79f477743d2cb7c1d43094b50fed65e8dbde8a0713a6477e897f0b54b21b66e0fbd3d694722e9bda09ee12831419d9a7b21d5f6684491732d20f1b140397f4dfcb778903c9f547dbe25e78f2f0069e2e876bc5e93065f8d2d9acbcd4fe534c118ebdd91fe550a2afbf13fb51b985b15e4c7b6ee0ad396a0502c420c7061d07f39c9fde484c9e36eb9d930564336afd839764ad5843f043d68f48ef3accd63dc823233aaaa8cc40a803e4e1a18f53c0a38ed847d808a204146a850e8deadd39255ff599ae68b3c7ed5550cd80a54739b6e168c9192ae8992674ea4ba670032d507e39220608b48f53b0fcf831305bf450e0a7e3c3f5e20a12fd8caeb36007c0f52a5c1ed29431489adbbb1ad60ca13a4d4887848e41455e7eb9acb4dd1fb5dc9ee9fab58d096aadb34bcfde4e762998dada3fcbbdb4cc7012ea616e49f4e0a9bb5a5147d0ea2501b03b2235085d75cb40e1bc9a960ee717ef960f961bfd4a965999eca79be5031dc87b3e26504fe935c7bef3aad9ebec5e06c6c4c923ed78dfb276ccda0ea9c7eefa734e2055f45818ae60e7964b117b8b52627efcef6492c70b887a8fca337f79ccfda470c2a150d26615c409f343734a9f52ed65265d2639e8bdca2537f23460ff05ca6aed15081eb27f830d00b394ad4e32648e8525c5b6b7905c76a793808e141829acb78939dff575c23f09ebe8463a8cc79e5de8e78d3d9fef232ecfa9c726c6bd85320ba672e9fe1be5c8df695e38b64393d9ea27c267d345fc34247f4b4827f129135689f00512720b967f1991a227e8ff6ae336ccc024491a49f4f518750f14cd462cd6fe3d90b25f5d5b2a34a782bea48e3cce78c71693f6c2267402be51facb3ba75e1d58cb09cd5c311cd4bd3adedd2523a9d6c064a961936c65b147e663a1dc4a1dd8c5b8afc2f3c7aaf346878aba955687ab6a8d2d688f8198297a8ff8022ec3918fda8d88130646d4aace669a0db854f6d4c8fec1243d0277ef194fa8dd7255734979f8346b80fe91bf3d6e3f22ffb16c6212d14d921b64d1386a72c023b28453ac43012bdbcadad005d323441b4fb2b4bc7db88e4cc81bebc66ae7dcc5d0f98839f54d2bfc056a05fe4f6888ac639760419f92d3fefd3dd5ab1c0c812a53a435446ff52480ec57b420ebd4b6247212dde860117d5426cfb706f1fa5ed8187cd80f529d308165d7c16158972559529210af15642ce445895fc4735239cf817d57c36b43e63a05b9471ce394921b833d0d2233792a816999259de24a0ead8325c1c6f3d1f52abc96c5174984c617be688f0b22d646c9d3a5afed98b9e85db3c35dcef47884e9fe044bf18c2ce7674f020a2ecfcd43cbbc99ea9d67557c6e9c534bc760cca7b6c07efcb3ef610d763e5598eea5b100bb40478b524e58bf1e47ea071e5fdf56c8eb56d46e34d21ca1e0f3dcd23d08205ae2ff0158313e5b25a6990089c2d553144a7cbefe649da8ef9c9a336331dcd776b4d05ae183b11f85bea38967df3b852c974f403d4232e36ab4ed738fa2ad507b173a753e389ae9d0229ec9c23a11a29e02a4c31e38d1ffc3e58e2b86002f8bec6bf8ef3b73b6e0cebf5870083a0a28ff163b948000e52865ad03875c6064187dd71e23acb37e7abe2fa440a71110ea87bf1a2244c8ae1fc652a1801d49c40af53d8d3f0668a865b3d2942bab90c5be6b8d30f22409e34b85f30834e3a347d07e7618f4d79fa7898cf315d2ea6267abb371718e3357d443d191febabc890aa11557241812f88502d36c9bdb94d4ace1f07ea358559b928456c2dc3f15a7c316336fd6ee5042bb03c453da170a9bd32d6d0c7f1db66b9aa72bef1c6b299ac120284316327012226d3f35985f79f15216f4a22f5ed237fb1891c9d018584c925a75e512a99aab2da09abc53b5eab21555227cdd1fd8582efa166ec481a9d90167c9dd7b7fc560e76d9f5bca6e106d91dc370ec19a1488a41018ca2560180e8f48f0435fd1022d6be3b88485c91f9fccf0744821ae26bc2ced6927100d327149f2b33710f37d3e5378316ca191d9548a8659ef6b38c2fa08842a5ab5beaac9284376ea927b940c2e40e3fabc3ea78eafbb608cad10e77bdf1b093c238921b9b922180cdf07b2619e800d0cd75a16be686f225a600732f83ff1c02bec6c702c0be0be40712d343525969e269370700c1450eb7c8722a03d5d928af600fb959ced5a5396549503e1c25ada57da8009ceebde813c4799b064d36aef1e828b949d8a20c1993bc2597bf88a3eea24b824f0369a9bd00a416c1a90ae71d6323b11a1ae944565ec969dc93a4e828920f5ab785f2f37be81981a5f847c35c4429c2e1e72dc26a3f415713017dcbab92227b3981420cd1eca54d824ec8e046eb611a1ba75a92a66eb51478dbd5e0a7a8868333dd98937bc0958252799a508e002fa16598c6cc1b9428842378ea78528ed93a0e70f324741d2233aaae60612571e5e30f4f0181d5d6a41e50c5b8d66b21b4d4f13d193980aed8b83e3acfeae05ab6413ea2c4c77c2046b3a9cdfd8b7df4fd814996f32ec6a08589735b21c56fe9a4175014e9af5d56f12eeb98708e6befc7500c80a618bc55dff29623cbf66033f280217f0334d1e1c14ae7e308eb18b1ad9921a7c27673c5dcd474d67507b7e7b1cfe0ff354e4866e25c2514974a2244452281d01068497768d44d009778ee19a42119897533cfabd2fa0af37ced4fb2ce3362749821ab73077ffe97da45a0295d7fb5c3d8d4a10e9537ce036264ccbd78da4fad29e3d897690c4867a8d4234bed2214c283dabe601515e4ba3517cfcc6c0b0452019cba8d00b86972ac5b9b57de300bd1e02a10e8f66e59161313cbef773f9a2a77879239ea0b4a94371eed457f20052ebc17a6ef9a2891304db0370378f57d7722ccd645786367f721573c779c46ee72af28ad5a5026237b74f36ea89f63122098d22e701d30eed95480ceee43cc4cc312a29f809202b3b3d06866b681ec08afae0a15a6b21a92373bb78f178ae2aeaf5ab4d92f2fff842e0add95ce945da05e6a7c3e0c161fe6f79f7c1ed4e8ba7ab421e5ef2bc99d3cccdd222994dfa1ec77f6678bd8717a2ac6ec5d51a4634c18a76c2b40990ac273a5881f18a42726a3eb8948aa1b72e88df18461fd0d172cabaa3f5eec94c30b46b6db035ca82c5082ccf8a6ff0240925605636a0444d20ce825d63a4fbbed3a76b0a6263b2a3ac52a804bfd0e85bdd25daed17e7fd4e42b9192a0bef495e68161b1a282b10c363f9e04f2d5aab79f59d42bcd7d31efefc8066c353c55338b4c796daf23b2f192065ddeb5a6eaf37490d895ac73bee85ac552cd17690f392d4b42d39dbf3ad88b4e7f06ef66299e036ecc817f5441fb00447ed823a695ccfff66960c23a8d4fa0927f3978ec540bf358413399e7d25402719929b85d3fc3bb735d11e8043a9a2787605965312a4a16fcd58a0bbe948d0eb72a645227426971c61bb78a05ecdc86b66f286bbb68c978ea3aaf05e757f021aa7b6b6ba5d64c96d4e890a6bc99922dd593ffebddf671f46e204b3197bc6fe42fcb66730238675d394e1b5a523c99d6fd214437c5fdb1262f389d97b17a9a6fb3e4bad11f9de11366535660fd85eb78531102378648f757e56a0c3b24b672ffac382bd51e70ed2745d08cdfdd07475e7b6a96685854b96aa0f6c048cf9c991949cd860db50fb86878ac55121f6f5079afb1e6065923b1bf7ea5d5946330be810395c43c6c5dd1853a9a85825800e4e6a7924ac63d7b0fe57cdbc1f69308553f003e94a195c94847121724fd3b682f40cf6a3dbf6d788a52dd774e8950fc49b940d16f78bca1361527d7050fe5436440e47303dfe3ff0f0e9de256ad8660b18975a2034410c68f859c12c2658e01afc3317de2969b41662cb3e37f6f056390d8f713376c8488ed8572bc2306c58ba9abfb94ba493196bee6dc5c62cc82c6ea51d75a4ab148c95fa8a69f86078d9d815a725a0bd1da9ff8599d3eef65f78e2757ebed362d341ff587d6fe6bbf07c89a24aa9088f88764453a8584e0e3e7b27c997386932cad0dc8b95cb6fd0da22577034ea90ae5c4e1b975400e73b804d395021a1d3799cfe03883da486b2fca48d6ab96686270841ca08f643be6684f8872da8fb23385d33055783115f32ad01d8a88dd1642523c6ad3306a49c7602a03b6db1ef68ec707136bcb0aba73ca14942af39f2b715bfea819142ad9dd71bdcf5e260df4b286c78e03ca91a455582c86bb29c528b78b97de8cfe55ac4055f0961d8ea33423b18f68b5de773ac4910e5149255a5bdf2d96ba31c5ea191f61377ae23d2474e8170286cb43dcb9ee4c7fe111a666722182f2439118c4c29eefcdbbc1a23c3ab1f75972bd46f8e01fd5c5a8f8c069370c0edb5791b98d2181affdc880b7a144598a86e11ceb996d57aeb0aa4fc3494a8b6fd41c9d02ddf959400056987af2696ef62004d07427deaf69f4f5e8bdb0de557f8c7f1d27f1fd1f50c58d2c196156cf25260eceac2b95fa5655d49ae50d19598a9e709cea37374fe91d81702f3b407b4dadb3591a3e7b86fb0a540dc832fd21353d1459b42414f82225cd84dd183c68a6e875fd610bdf75f491219ff945bdcdaf0495b2975b40fc47534728bc8cf327cdfcfccfde1b33ccd322ab7cdefa566e8635d8a932f0e56741fc206e967f315e1af181b9d69c1c28398e0b86af0a2f2937af630ae8240c836bd1da309e45dd8d3aa3855d6a9613fa7c2240f02c3d8d0e1bb09d65a6436fd82582ba1854a18f20f4e25fc0d44038a68e460b08c2d434fd7cfb18247ec9cee00773d26188474935e737cb7fd6bc28c09a1c9c1c791e6eac010cb068e6ef2ad18c8963e252a70139eefdd4d6e6b284d62cc324f0ee52a884bc8a22f18d49fc12a951e368f991c23bd719863f53d6e110511578677105313b0c414e806f64f00ed553c595f749ec33c7d62697899a03729d4f4f1c04211cdecb972b1ad45e5a5aa07c741d0550cb6297dfd7a472c9b1d24c83ee889c85d1370db7dddbe3559afeee5cd39579fcf962f0f4d36bc7240fd3da96070a60099a739b932f1f6db094eb7cec66296d7a7ace95ca2201b554094390d72fd6f6909dd85dfdc6846f496fb1c503f67c2fa294563be5c38a80053384b3585cb9a8e3094783f4bd55f77a020cc2748409a96815e9daa1184bf2a22cd1d19a5d960092c597a7ea6ba6534d3559445ac690f978c75d653de9cc6e2532c3f5d80a27f23cf0ce6c9fe7c8827c78c04e02171d65565ce05c3679d14be137db4f10d533c44b7b1b5ab1dbf6b7c299982b30736b850616d1783ecf17f86a20f6e2e8f06583b407f4feb652906200f1d105eb6d9ac6aa0d8eadf4d5c37452543e1ac0a56fe793350d77a82167d649fc6af2a65c11ea36d8d2f701c159ebdcbf9f2987c08d85e807e92fb55ac4adf8671c02d27cc7cb50ed3877791b4dbfaff160d121cd2d69085549092d7fb331c46e7c231e6b62b56c8542af523ec43ad9638afac504f16570af4fce890c9cfd9e494aaa379a8856d0f7d41de80ba66cd5ba40d05c242d026792db6c3a9079106bfa0326b6693af8814e1a210bc1e8e36c9b51f08ba1d0540f9c813622ddab49c88b960a19235c9b1499802e3a8345b28b2dffbd2de1d1fb7d069fce5a1ece23d2734b4b7f9d6df45a477a2fe8936e3558559faddd0e341f660a60371ef14d00bbaf4048ce1c7eec936d34dbb7d9ff45457a72ffc98b587beeb11807eb7edf2627cb3145f473c06e22007614ebb06edac45d79b1bf665aaf2cd7a3d05002445a32e608a43098262f7d16f5c53d7741b48594951d69f9caf67f1359c2c8d5a4522d5babd4f77a67b27b0f309e35259a3a6b37ef063296863326f763da177a025bfbe1e6424af040f07f6442f5954adde4514838e0c1a94377a801c7a39d8910954c150053d79b12a50e98b61eb4a7812a0fa27b40d5599ff4b10819ee4579ad5606274b37582b81ec5dabcaeaabce808ff9051e99e1994aa2b583020bd1bbac66aa98fdd706fcd2d1c0f8db21af2fd8e9a5205f679ea227252b75f067ccab63e8edabf6aabfc4be393d4930c160a26d4b349b0c3ee08e1db92276fb686ff6e11344ec28946a872c72a0bf52a209b52090edfada3007229c55ad8a39ccfcebb1481e5f0dfa696c069897d30352bd888bf3329fbb3e87ada6b2689679a6f4479f18422b7bc23ebe6c93312cc81c306bf01132f31ea98eff9dfb891b762618d626d0a860d2bd745c556021ded0821f8d0de4aa2b94124031013b1735935d724c06caaa8e180f257bf23c8b97022f9bb2c2825aac7251eba7f3abff925d5b8221604ee24ed4e32a2bc7da02b4016e950b811e424780d7dff95ca7fea27ee99f05b5153cee4a5afeaac4ccd7473f45d66fd822aa1dca7f37a4211a77bb775cd975cd0f8ea1fe7c215727345d6dcb4ddedc4e7e60a4718ab5971999354ce6b06f22bea750498c81b7a7217915b318562c9b420de1048be8a52528c9d074bd5b094db5e0e3fb55d8a7ac060cfa27661c04b3224d56bd6eb302dfefe6c4539fca268a617c8ceedba0a08f1a270919246b1cbc8b952c602fe5d7cfd92ebf017ebf84663920117454f3ba74ecbc47992fe0993cff3fdecd2ed9ba71677ee11ab090d7bfbcedd492200da3c623963bab63528b68a307b20b1403ee7d3ab64ac17585904f400872e3605afdd63c2f36e8fd4c3336eecef3c1f952b093fa08059136b58900c834d3083c29c2fd1857a61d40bf874b5dff23966aeca06c36f70459022b10381842e925875a64c1a98f0958fd29960edb315d80954c26e532b57572480a9e428101523766ac1ce9f85a9d9b536d4e37a7855abb1d9adf534ffa4a4a584ff79b92f11b38ba667ffa0a1cb928137fcb5e53a8ac25854fd3045aa776b81c463b2aff4330fccbb73d19036abcbe19d1e7c13f9256ad7fd7977652589e7faf8fa3a09e2c4586fd834875b7b16890bac64b17937bf8c2c32f5293f3f2476683521e5535bb453d88f9ea62ee69473f2111327e6e323d41123505af1e5b1c31de1a08b7d8406b9e82c8169188d028c62183b77bb09f5c4c140a78f0d641107537ba85a49c065e271f46a03f62a6a0d10ed42f643d4a1a7c97a923e73f5195f8511980d0d713ee782b8b47acbd58c9c8cabffc7db7b627850b5e1ca0aec063aace5ad2277d653ad2279b01f8ef083f13ddeb4f36925f5903695645727978965046ed0ed0fb1ab734b086cd79b6aa1dde1269db2cc378a76588be2d233af5e87f4fbae468e37ef55f7dc7e80dbda1298c6f6c9651d05c20ea22471d7e91d6b3f322dd9e4371e6043454d48534ccbb2462b15a58079ea917f6fc09c6ccc6a97b7bdbdf1dff8296df39a3df34ac3de1ddede141b5914b1abf2f5cce458f6b0e73ac9cb87e818b1fdd5004070db4beb2fddc7ce11eb35c800726449f8c7a832e6b6a2d58adb2773c4453ab5851aff1e83d6e9469d70948628d9d8508692326fc35cb40e22d74b4de787970ba77c28f6ffe06d8bb429a70f391c93400149b7a02f8490dbf0865543a465917f9e0bdff4ba895cebff05f8e94a5507184a26083717fbb5a39ee108222933daf2b24f39399f5d6877225fb77ad693da2f5ac050a1b216b3c872e45b23fab1eadd6d6cf88609522459e9488101c2c23a9e03aa3a41c233fa2443309bd6eea4e7aa2f0735476906f0e25c4cbe6ad417c191eb982d65674b1304d0f96ac0a992efb5127588f3a8f718e50156edeef85a23ae411b4aa912cd0286bacc3f892abf0ef9282a43aec28be361bc393f87a6f2a89ad55667aa74b08e4c2442941c927c02d3e367529a5e970cda348ac49775ea3e9632fa689246fd88f53dfd4272747e1028085275aaca77ae2b79b71c758763bf37e1e1022fbf6812541bff93fee6e2d1625741721c424c01e4e1ebcf049ebd7144c285711703c0dacd6b9e50d0ff0bfe2377cdbad5937065ba9bba20b3760c2789db3f14505dcfec934416d2fa8b782bac3f807063e5271588fafdc0b37656d00921d85e92ddc611f575e5f3b39eeec1bd1fd3ebdcc1bd1702fcbe0086c2665171dd738a991942a2c192e9a1ea72a2c9222c8e071867f5443b217ed19fe53120ef02cc66a5262d3acf04ebcb1eb291f18588acdceb8b8b6df7b6147465151d0f82395877cdc78b26da3b6036d09344e84d3f20ab38e9fe309f7467148af7e23d524624c3b262e801bbd3141e39e48f790dae268b9982e87b2fcd2abc808815311a576ce1d3397b1e6b6522dfef84ecb2c750630de4ff35afe7f43511dc2563dfda03927ac0f26878323cc411086a52c9cecddf26276ff9cc81e89835ab2a5f09adc28b2cc5d80bb428fa175dfaac08f16f97cb5d788dea15cf7e79b17908469ceef88a3d7588e3ece6ad9c87cd9694bb0597f220fd998f2642c329854ebef4a364ac7f75a52ddc4f2895302a577c173557e05bf0bb099ae1295c2e98daf699d0498bea11ec29fab3ab2e98dcc2089143476b0e1fd3f86f856b10d4d499d01644998789398601856141e8dc8afefbce99792cca3dff86d9926b62ee771e3015f3804ddf9c3aec77713900d467c63a3dace998f79ea0293a554539f1939a0992ac8381847433f5b9fe0cd72ce8db9134bfbc60df83d918b5f18b419118c93ecd75a10f7ab4917d4e6067690f0363cfbfd5424e78ccb63f742993d9fadbef1cbfed5484939350a5e887d7f41e60a37e8f2548df1c37cc0852f863b29e687a019caa13791d26c3524be43df5121c017c041025c13fe1b5d889bfdb3951c4d0fb2cd4706f9ab694e4419e8a89560f448eaa120687806861a15c2a8ad52c3d06e238a10e985f5909b27cdfe50cba0173e66cb117a421099d7c7eb40a911cc31f85e09c092e16aadfb8c9d985110ef70802ee2ff11aab229f307253063514b0d2f93c77f9f462908dea36715754efaa3048c8819bf3dae8cea44d84ce562c99798708ab0646112871888b01f815ed54bc8edb141f129cbb78e3707360352de300a2df32b01541af44f24dfb060fdfdc59589b6f1483e56f4dcbe6fde857e6d6183138fa7f553191eb2cdf4ff4b7f0281261a1ca59ab812f003f53897e61edef5c90f0198309d0b7a4d5e239868a37fa03eebde8716e9b142e87a12040007e5ee06d1ded6ef8cedb69a7b4c763764e1f8e320d7fb7d24b37741bc7255f89de7f7fbc3ef98c2945ca880b661097152ce72515b02aa5f3febebfcfa896f212adec58114f60fe9796586f6dd3bf69b8dec0d87891429aaa25f5604ec7670a410d0c1908ea9c372d15c56eb626e7c650ad0e2b21b521b7d490fe994547c559c2bd2bbe96c6df78459c87544b233796bf1c82541b20d69cfdeb2066899e4eff6089e3581f4c9d3db4c5bedfb38f90fa0f63fc20ec142141bcd48cad43d06589759744847df4e3316aef9c59b775d05b7d50ac8abfa9d1eafb380e436bf0372b587a6973d08bad4e2195e6ab544ee1bcbf3787abdc7e63fba55b69a321b80d28d08c29bef59b1ed695b019beb3e7df71ce321d8c767dbd414a9a536a71e0aac42ecce43c6db112efe544ea13d1fdf18cb0d3e9e1b5dbb579407e7fee672e51e44acb0a5bda7ff2d3169f41c79c2f108254416478bef87e1e1d3d52c935c7abd5f5e49bf2b774e2248523c43e43f4ff00257d4e5f95ecee744757f1aeb785cbbda3008d5a9c573c3bcb5b4a25b83957df83e712ec09ae46ce9cca36f67b3bd91e05c146b9126ec6d27d4c7973898ea1acf852d2d26ca0602d9b686f124d744e53effc84e4cf910c8c858bb281ac3d0367235899cddfd945ff437434d7c14fd5fa6e2e323eefb210c2686f79f3572b30c8ee12b0cb0a14f33845bcd6d31cb1507b67c900cd2c83c76bc0c7de9dd238948dfa89e4548bfa731e7f7f5aaa50e294d327669ff5eb0fd1ba1417c969b95a7ff104fcf72da8ca88aa6cee3d5ce93bef0fbbb87310af26d90e2d99e6c46e769b57114d8e1c3cc64fdf1463767e5d474d63f98c1e821a023ca356c653cd6d3ce16cc0d3e9e3be8ee7aceb1994ade61c1b8ea537176c6ad774a3a59cc75d4737e941229a08d5e277de7e08d480005a7302681f959def75f03a3e2b6a3b3e3b425f8c474230b519761bf300437a6f7ee9d86aed9febf5ed5c9c1c2c415785cb1e1a8b17290d640de0b40671d8ddfed0518d7ce9c7a132919bb8907b31bfb9b5a54123488ea24f441b2aa8559278fd86d293c44c201ad913b7b24fe1843eff75c54e95fe311797dbeadb5d85289c5ad0244d8f87882a214a0561f49f21165418518ac685a4e671ba4f971f225ce15a5c1b304be77079c6ea0afe004fa1c6e3bca2548fe942a3dfbca6a2e31a330b0afc8d869202936f11da85c314362b21c47118ba62b0152bb116a27d650bb33acdaa5432acbdce7c0265fd0214af63cab563c18c81137b9cde09167227d3b7da7006e476fa9c8fe9fbd3960f22cfd092c0b4383a07d0f2db9a29b0d05e031274a091d3c99542569b7088ca76636b6cb98f0e57cc4dd7028b20f8a8672777e79dad9bcf9e4c3cbfd7633239809f3466ced961f4256f43d3e97971c14cb24c5db9f510ee3986f00acaf847420768221a120f0fc63084178b762123cb7e7a1b659112b07a202151154c2e6cc325df45b6c6b447c2bc2474ebfebb75580ea66852e3d96eee9b655e4c20eb89bbb4280ae50a37a2d01ff1d4556618bb6393cfd2592a8df7c38c57be62a333f696500b96333534beb7d075d990f8ac6ca3c541e22bd4a20217b9244dbe90edb57de25fdf474928fb5c75ecb46a01f8b715905a478bcbc90e5e36be5ac948288121df415028d5b25d919cdb7e7f3368371dd34014c25fe93c59a853c69e9538ff75ec13f9dce92d9148d06da5bec7c43d85fc8e8621f6e00dd25f32bd45641d1b0b0358f3ba1386f02cc5ce53776490513a084a65471d466becb62124b56cc49a1e75871e1f0506d1a8fc6dc8c7fcffe85fb87735ac834e9df9b3e374cc318631176f92149e0e7a25369a55024be4829859c15a497b8657510109dfb26cf7dfd460e3cc521db816ad1313db7280be1ca90032618daa1d15961a0dac8c101060ad415b9f51680f314bc56336568df2036ed84b292cb09c3b5b7607ebcc49fbc64e914f084755ea50254930ff0290db61a44a961b36f2bae09a66df1829ea7b87f4d50366842cac2ddfedd433d5022cc5158a389a6730acc7205962a0b81db86df6fd66c6c27c2eccb108160353b2e6f5451b2838853b77f2a50dceaab704fd5a4f5bd78d494dbb2ce3cfe7e4a0f14104ad2f30f126a6e0222d6e41936430b47f61855d73ba3b9851fa1da05a8094ccb88d86a137f5c0eba9a0598d845449740954cd4844e8bef665c129d76da4ba59a743a59d6006293e693b8671965490a21fa1c7ea1ade46699dda472b92fa73e6132534b2c07067e66f896908712340983b134cdded3a3678b7e1d90a64846c369eea039f5f4b3d10484d742da7f103ca71ec335edb64d9dba81292eaf936a04517b3d09479748ec5d8c8be021f52134282004af1ef003aae003ad1659576bd99dfafa515530451b7d21f18c72ad283d3403fdac27bcc4934011b89ec759d644dbb6b516adbaf891c18a480b450ce7403341199e40a9f7e845e27fa019ca4a8c9341aeae65899f4ac380708353df686067323c050d58ce1b48785f301118f058539d47d42219f2ab62b58de5c02119eddbdaec08f0591d1c8e8b5c341d7d2736ac0c047101c56bb35f1b425813079d06af01e8522b30ac23a1a2c0a6a2f878a0748746672336aa5017b79ebf2b99b27d57187850237c07878db6b88fb69298c7a479f010b72d843a6452f4f443b48dd593423b5729725b5299ece375423815d20527c03a53bae40867bf2f88d601a6c5ac1743509e37ba52486f0b487b7c22861714837ca61aefea93be9431507ccbbc89e767c5909e752d27fed69fa3e2434d165c1a0756a725e0f92c202b54bf3fabd0851ebc7087b93bc809e900b870a532ae36cfba326a4599a951f4914518907f3cd5547983d8103eb2d6fc10fa1df7e6da7ba787fee136f6866e1f8c8122596019972e67e5555c409e14c27002da015e5effa728f854df9db2f32fb2314352004cb9418ee212386d8bd1d2748cdbcad2bf9d69189c9ba4b923271194916913d683d552b60f769e586d31313bd4ecc8111ec18be91488ca653395dd49eb4cf522797c08fe7c4659fad1d02c806811fd472fc6911f248b84304e6eb8f559dac7fa02f323d110066800eb6549a1b37a9eae677b3febfd34eb4df7a488d9a5f48522d3ce2efc8e219072b6ee83469c89848a7365beb3c23ae48e05031c7f176f5e77478c7b93c8b3b5d5dd2d5bef7f60d558d211f2b53e9414ac5a0d7e6739f0e9fcc0d7e3b8b664b481817cac9f47ae5397ce2eeb393441a1bfadff89036ae96ea963ab66e1025ae8fba4ec4a54bfa02fbfbd42400aef9f640801ef1e2eef2a580f908bf99f89840f9b233b3d18fc59b8558e5ce138e01cd46b25179a6c43e4369ce295a6f71a924a1e717647bffa62dd6527ca706692fef1dd2553bde4eb3f0c17bdc3279e7df46720ec393f8c01f0a607e56d8758fa896f1a88c816fa18cfdb5f523bdfbce52aa6a6a38e93d0ee17e899a989c8998c8c6ff39026d43de119f4fa0583207e8732375163747d55cc42c92f9be50fa598b02eb00f8bb5b948aa6b125f3d8533323a2dd4d2ec34daf5d0b61250630b09a6fe0a82146fad9142255046edf6f0a59b4240e78f3223bc68d0c439e8f252c8e8735c1ef20b5d79f853940cae1f3f35cbbb744e814c2d21c0535939f78587149f02b98e2f8c518cde7154ad35f6e827d24974a02db80823934e81331569380eccd61f7001d144793a6b693da4f573b015d5f2302f9daef969b7a6ccc1d8efe5bba7f5e35a5cead99d82bd854731031379841c521372c9a4f5db0827661c75ef9a07e3554a3868f8a547a839064224eb46e1b83d9808ab7cb804827b23ca265fab596800cb4bd89bf142624c8039e22c704e10ba850128a68f40a89045b2d4109832fcd3140519653d7562653722d16621d58023880746cd25e1955061707ae638e36f8583c71d09cf05ae0daaa975eac2b44b62ccd1ad9a7d8d789416656d9fbdac98a01afc3e2fd11179732ac7b00f1083fdbfd27e5f51ac2dca037e8db3adad82e275c5d257ed6602e719b2eb545a20e3238262a1c5f9261cc1193a2b94b5240d4340d1dc72a083366adf38eb45781fb64642c9a715aa02a040fa6e9261f6b01f703eb8b37f3f503e517bd6ec31e934e54408df8bb3cbe34b2cb874939480d95a52ad66839155636663b87b7c386dd717b9f7fbfd3d7ffe9a93a964dbe5718b904fba1f393fa23ef9d6246defd076c3c2972736c8fa74d67b0d01cbb76cbc468437fe54fb3bc5d28c391dd5f136cf1741a6c0ced5d058bd556f98a15bb075e9829ccaf0bd64454be249c4cbb5cfc527b70f16c4bf6149ccb739d4fc6729e99399c10e13284e7fdb5eeadee456f6e8fd96f0043a3ade9ce24abd05910237e8f2c018ed97027be483363b258257426a84bfc618f5c95f618f6c7571d73875f884c6d93aa2132aa1d254ed863761e0c73413381c71ff68744ae5ea05a10de43de23966793ad59235561292a09da9954d361e069c3a1224f3832a7be0859ccafd7435a7d04f870681d93af0c1890ac6a4218a5deeb888ee7082f05c847a04a0a4a20105be76a1611a5082b0531c9dac5ad303cd95c9ae15ada41f4dff7acba23849fee34d06ff61b67c6d8810ced6acc7b096b9fba33b89341dc9f84c09599f23db73201ab46e0dd6414e834d7f983e13e1df30cca4c010e162f94502947d9a4b63de8edf0b648a05143f802f636cc571182832e0cd549be29787a2701fa426462797ed0678d9162aeabb0a0e2aa1cfbe824830ad2d8d135e751d7243982ea03ae837b45b8b81132ba3e760fc8becd2ab2aa2348622c3fe619bf5191470072b933b3494ec66c4fca053349b4eac422ec4a5e38e44eeda5ffdb4a875ce8add4deb4120dc0f6ff4050dbf5abeabcc4e2b3a9c0100f576e87ec04374041e67ad32a1b3fe34a7849e7bf04ff4c98bad321c9635a612d2bcd48bd05013f24f6cf5b3e6d8685166ef54db580365918dcf4145430fc0714e620764ff0f655eaaa099e9a865afcb28ec8a3be6144b3151f2dae5c995a4c5db9042efa9ee932593430ca55119c28871d1d2a8c766fdb69efab7c2b94b3a8fa62ebdc5c4434dfff649327bf533cea061ab42d1dbe71c8c5a969b9b9f63bc1c4635609f07e433ad303095dd6f02a6560b90136d4053505f15735b2f642e2b43ef79cec7a0b881bc621c92725e2cec8684c4e93e953aef82883684f91b146f377e3767eb289b8829c7184a5940342db9673645d719cbf34acb4f87ad0440d23796636c1e442b690a3be4d0f686f00b392b51dd964c006eb3af10df50aa21a53e2abc340a401c4956ae5d63c51191f2a630eee4a3697720c4045fb6a671a5d064108a037fb65cb39aacf916aa26d6291137c74be0b51c1b8faa9e7f7efe386044d8abc7e25ffe922cc691c8ccff3b598ba47a80a6493b93e46543dc95cc3eb0bab39658a16f3b90c58ccde9fc29c99f66ce8e5cf77e4e8e34bed3404b2bd69c793e8bfbc1b8dc68262dd477327eef94ed380a7e733d4f5ee75070f8ade1231b6b4be570bef10cdd3852b6a76b0a3c511be39e4f7443de3b4dfcae267c6380ee60b151d3a0f0c30edf60896a91cbf3b1b575a4ad4559db83ea3450bafb43c76d3cc96bc002c40432a26e737fe2d5522004947d39036c55dd740794c348da6199b096db4b18f40eb8b8a57f10d8c392b715b36b6bb58f2818ac36c6285ee0df05fb26826fe763dc030f49d1a5b40061e896fb32cbdfa780075f2bc210dd70d1106ff44e464da16a1e4136d20e4a0fb0bbf48138ccbb0c67977beeca3ec3bad296deaf3ce6b6d1f94f93918bc21765d3a0e31a37caaecdb1000680e292a41ad20d3bdd921a6adb73aa956c66ead94ccc351246a69a5310539887ddcf161e57ad7f0ad4fcbb7fd2967bd78a52e77ab16c7d188655e54feffbe4312f6137cfd6c5843a598ba6f38a4815eac601451b7873b7228b4ba84a8e1f18c4d317fc1a02c3b949273248a16deef75b45e56b5c63596a63930049e5c0f3587bd5c6b14280fb741702dbf88de8a03228d160356db8d4babaf240096def4be37774b80bd6e3f32e9b638ada5bffb63bb1648e75292edd23a7ef3f497858aa86a2c5cde17b5a685d542b89b9079c6815f3ddd071269cbfbddbb7a711e0d2d24559d72f7953a59c67d83175a31ba57b3e2e9b1ecebc95997c17808685543efce9c254711562b2e1c97d5207c98740dd9f4ccc65ce16caa9eece85ce52bf3bbb0ee302e28cc8f296648a4c167ec5993a60eac365a50773f4b6c0ee7c82735962ac4d92ded088a44edde096afa57d52c15228d2bc0c1c09dae177e88e374f07b8aef032ae01c79b99a1547747b1369a1a1b1d928309a81bf5d89ebe7e24518bf11e06410e970f8ae9ff846c92ca37fd40aee51ea4e3b9956b6da350bf5da8f6350b67371c9382f2c698a4047db7b37c14514f2e49865289f8fdb88c0277d92288bc930eef406a00ffb469af4ba3c976a86221bd7b10c32ab1aac2e646449fb03cf415b1f7e000bb4c7a1744f415ec93ed460a7f04df84e4a287af16e43d1197f1950c15eb734940aa09749ea254b6135e12abf7637f55bfc461753f042fe991142d7a275d4e9f041a61d14b981933de405aacabf0b16bec7398fc061bc91f05c8f44d8a3e3f3807f15e710ba42d60164d45c363e026c6f67ab1fdecab3427508c897c22fa1c439e68d51e7a1d433815d6679c96fa92c5cb19b1a08cb3a9b46771183ec6165442f7c8b0b5dad96272bb877f3f1dd8d7c2b10e97b1caebd31fc3bb426cb9a531ff720f49966a05585c56462538e8a205f4603f12abb531f57f30c2f3c5c8df07edb95c7687a482e426b22cfd0e6c3f8dd013d397c1b720d3d4bc8c5a4b50dd3db8e409799ce6a52fc75e00258ca90965a0eaa459a4eacbe5a1daaffd0ddf4ed9213c5720758e580e3b855bf12c0492d5626d736b674cd6e3cc3dc368b71413bc2d2f95e7542953749c94ca13d8728629e778fec26188a64f6e7e6bcc46774e0ac77334fec6177cbd6a3425c0e16327273fb87d5c672fa0667ae88fcd2bf459b81ab5ae2dceab6711b873d4f7c44274489ac97ce531afe2ef317787312b6396515869139144d312c941e29082aa1307df05cf3035f5fa3db92379c7835049e920fa17ee35eb85a31ea7c2cf7dccaf0f1dfac2dbd2edb1682bfc4e16b641cf1b68c0e7fbdf380b42f3bda4fa635839eeb37ed43fbf6ddd08b1a215ec02cba5a602dc36d449e7cf598b51f0b3cd17fb94034de831fc59eaa5e8c027326cd3c458101025a3cf25d4dd86ec80ecaa6608ff46c0b7fbb6e27f7e6f93e972b0f008de562af1997db9e612c7bbe894c36c69eab61805461c17fa36c9b863fd0a22385aeb67fe4741c7a2d09a98de8e18e6b3c38373ad88dc4cc3561257785b119760f16fdd6d95b81ff975ebafe4c8aa31b4cd5d79ae887e2722bb3e4f5fce771794cbe4c5004ece77808df49cabbd783805d77008f159d950233b92923c5029d3cc89d723bc4ec1a32cabe4c25dbdddbf5f419748b0addd0a2779326450e114678597a113592a326d7acb179c935d3acd94e0d7f841275c51c5f65480cfb12891911b18923a8f130d79920816b18b2da468f13babed97021ac89aa17ed27ad34dd9b9129fc0abde0e4992d98549ccd9f100ca4c31fe14edc7f3c0a58e040050d6d0542233bc4c43deca41de8508637b43edc7a9873cb016035a7485af4300a65edefc1706e53dab3a19fe2546ee4b7941dce19e3611263462a0520cd4de1069b590e3218364b7249541749171c492f7201797b039ae0fa9bfbc64721c5e01c3f842dc130104376fcebaf3b823c4798ad772edde28c2652efb391afcb45b2d18b73c75533d0c4561ecd1699cdffa34247625ed03fba288d921c7d5916932284bafa1783a975506353d233c21e87d07fdc5402a398c49fb7d7fe8321ee47f7b460ebe11189ee7ea92f7291d46fb62b0573c49038d75e4d0e51ca873ba2a58d31c4fcff3185c18a022e54a09b2b7c4c155b5832f1bc66a2f1056ce3d26b921974532965b9734b6d3ccadaa1b0affb6731ff4dbe6c6245c4d8d6974a1df125278d33b945cf09f2e45fa908b2e67ce8a3cb11b3163b22c3a2991d72b86d79f95421f26d665daf0bb36eb6623604f0e0dc876ec94d4a501315a3ed86cb8320524620ace6ae9c37adfe7470df11921adfb64f073e0ca16703a16e4a25f280b26a839604ae48c4691b21b04ab8bd635461f4d9d791995aff54ce307b5ca8133113b94faf01cc5e41eeedab32850c9abe09903f84b35113110ff1ef9c37b274ff2f0eecf772d01906e2b02249d77d4e0227cec538a67a9c2d942363cd208952145a5a1512faf57a09c39696509aea5b4e98f5a1b18926d1cc35cb323039f242594f2c02949745b890200224a92b18a0c3ea40496808d10efb266ff70e9d6966ebc1e023ea2f920a1089c3c956c07234fcfafc6344504da69b35d8b9b2a4da01f301669424e6f76a346d24402cb42cba9c8843aa551912999be67889d409a7038084b83de417385c9767b8a6ea6c40a07088e6cfcebae3745a58138697db0dedcbb1eade092e2410f4c94d4f8008ad62359833d91ed7325432a45a1b88f944f7c874c674f6719ce08a0cbc1a09df425e36f21ee86f9dc0c6bd6feed77f62d4bdea015d328390f59b8a7c0366c4781b702bbd09501bb51a4dc6ebfaa3a1c5a628eccac884241fd1dcbf7261dd49ebe989d18d8257a271984dbe9f4c0cbc5f06964f87224fcfa5d1e2014b49675cb59c77fc5a63f084cce7509a492ff868885a1c76998c4bef47fdac3a185697936c4bde311e53377fdd74ecdc9159a8b441c2d7fe551cd57fb5a62a38b5cf230b68e49f2dae6e68f080db811d6fc019d7174d99bd7a22f5f6be23da944877a13cdd93c38327e3d15a213e17672d454156e8e9c6aad7ffcbf2080b793efd4b515d5ba6f2100671425e2ec17050d0ba4840642c5bf4ec4d46a7fd22e7dff872f43f2629e26772f4ebaac795c38b61bce1dcb97cddcb399f4880124d37293accde251d33e907743121a1e76d9aa1534afc10b835e6a408f898f388844bba84fa2125278a79456466e594ab19e9fffdc01c47f1d72ca4e240098a618642090d6e27aa79bf1d5bf86bd808caccc61bcd957d51fb90f56dff07baef71e05ff8bfbea06ee1c5e57177c790c4e39ddfb7b323b69a25720f87bfc75033326c655f2e1cb83b38197d805238c960959ab5e441d33e65ef2ad090891cf5f687722015162360b199bf4e317141283e1a76269eb754b888fd6691a51b088d54d1aaed815a3fd18e321959a5f9f440e88cc50e7978c234928f89c1fbfaa0ba14d750c1502147e8fa9aacfa2d54c5d10b3d30cf6f28ed029a105e7276054783e604ffd5974b12d07af77ae9cae85f934a37a32c2d8e743ddaaed99a75c63d8b74e529df7dd6092cb3f46d000565ddd532a90cc6395294d0c0f54cad474970e0c224e9a9ff8e707eb623fc23495e6913b2daa84a6dbc961f35552f03cad43fa9bdaba96c8602bcf0df7366a10f3056e53624727d0521ae9b73e5b5d5d3e2144d7e557e875e5abd8653a4f0bbf33f8abdc09350534bd22c97d3afad9b0ca7d9f4c80cd40089374a29a021f5a9d4e757d74850d6293d61869ffbaa63380226c25478862513689faa91f0ae13cde33b73ae80256375a33e17e4940ccaa5238f6b80887f657168604956a8c69ead8953f572335ced2afff70e46daeb23316c94a39759080894a1189a8c10e9c983606fe94b6ca52c9d76ed3ad0e41d75cc0be1fa65c5620822883f030ef5ba3a3116c1340fcc060da6fab8f1cebb20755e35bf4e403edff7287c4110f0b0593ad28680d3f67c6ac1f2cb8965e9f497ad445626a55b18162913fe69726177fe8dc3a421b0c2aa76c2ebb0e6b813c8fe08b5754ecc0b72dc02a50c70036b61a982a381f01bd40c467ad80ad0d92abd67c8557115c682ca09738d24fbc61c1f5bce3a41feeb2734066f8bb296b75118acc7a460390d7d45808bfdba03305ed833929bdebebbde960e99e82bd7b78c82c38bc7eb5a8bfa2c47f6a29d950cdc5405273acb33c97518b2ca133273e096acec027099213ce10f60206e1bcdc9928ba74c399ee2f1d6752621c208477a420e59514d5a0b18e855da628a2703f31fa8918f8c870f009e131d2d6bc58e0a12244cd2a9abe02b541c6c7641e74565a8f8fdb5e2e4e775e16e7f390b02bfd12870ad7d6b8938b9c6a52908c227ab6ab168ab67529ec97c35565edd26e68def64eb4e4445135c4080f1bd56fadf290a9eb6f9c563cd8275152b52381ff69c1f3b8b090d0cf6a5d8e80dcda708847d7c44d9af932da3d5b4d513e0d911dc7e624e5ec9630cd7aebaf13c74e0d29e9850afa889d6663b1223d0001c5f77d328b80ce64df795f1741294d479069ef059cae5a5442c48a5fb94c9a3803bf128920be6f9548c8def282ee357cddd26e2c96a7a9b6cfe4c48058d5acca01adc8850ba2da3df14098ab97d32d833c465b7399d6222977ffa20f0c8657e2befdbd295fe61750c39ea24a90db18e681264e0d7f1176291f9dc611a4ffc1e8fc51fbc1c3bde074a2a92240834ac1da65d3ea408b1224ced8726a040975f815eab8cc791d49613afdcb9cf22d60ad6bd8cd2cdafc3865e9db0df684aca6e194dd3d7f4a7470106a61ca6f16236d9883b06f7eb854a2b3e7d62f2906c5dba1e8068140e2c8b8a18d45edc979ad375154a38422f051cf7c08dddcf5928bfa25809f93e787fd050c50b57dcc65e746abedf9003db8d388d42629e987bc92aa80ca2f781026e4c7a2385f8d9eaea05d19ef61bbc2450f8568424d556e30d3869296c36d26f6311ab8c822674025bee1207fd374307e1a53a124e06e6c64d7fe935d430acd60b511aafa6931a502b06b7b531c85d36885f4b4bae4f9b22b5d04cedcbe6110d62ab00d546d89ec0db811b086d7250c679d0b6214c53c93af8ca45b5128ebe273eefeaf078e9855834abb2bd51187e710baf5a2954833190e152015f1bcc4907669944bf7a0334de7b7887515ba9a537d5821929c3a84b2039dd92b1f824fb8ffd16a6621115505807f31d2e37bbebafe046d4c1ddc9b041269d4773f49e82b5d65f700d392ff98fac2f86c2b655040a2654ace3aeb372dce47270d3bec3bfb1faa52d16ba176d2df26e68b385de92838430b0e8136108ac48e204b48429cfe5b9ac63b671dbceb5bc7a62ede8ac848bd6b41f637a66e9f5bc7e5dc88277222a98892b2b1ce5eea6ca8637648e0e9ce6b8493d76261966048d749333e8851add3fec4e8ab7a7b022b0b2deb6c75859799a573e3ea0ccda549f6105071892990245199d54e053395833dcf2433c6c4f94eccd251e85f2da71a8b717d17fcc3a007b0e0c53c822997714e72b15af0dc5e25f7453e3f8425239817fd3c30ecc8c59661221b49994276ed22476e549673f8da95ff22322d97951d520edb281618e57a7b15a08fe5db938a376d88cfda328cbedd1d48ea1719293e3090a1314d1f08576120b9b91bc1e2980f92ed6fd1196f5e0cb6f6b1b3c8d2a37527ac1729c7a54d03b0934f53d94abecfa51f21f063934f3cec02b71de86132a71b67e28052ac647884b148fe20e09d71436aa8e9278a719144156aa2209007b264ec7112d0b4b9f56492a24fee30f78497cc307ee0e214a26dd44f7e2319ebab683da4e1e2ba238f1b4b3b2e08debff4a4ec73dc95a7e5bbac3df20eddaf51db4e5f24f3925ac27e023351dcbcc4f23cdfe5362e32a2703a2205c2b08c8dccc56b43f6311b712a60e7eb8541592a9b514f76bfde23a6d391ef293f5b8a4f5abf8321a7197e875827ec99c3e572d91e51da5fe1a25216577f5396f5487d11162a1bee492f66ea9baf8502ede944101fe979266554133e916362f73591bcc0b655914f9afc89354880212d15ef2530ed1d4e3ca86a48fe20b3d46f350602f2af8945f1dd6418f031b76b654ebf509e5ab8bb9344f68403db50d3ac6b22ea4148f167d6e370fd4e4d29101ac23bbc7ebca2f207bd09afe0503eea18e13d7c338e948a0e8c37a795dbb0632db29481703294f84281dac54e3616c4424e6fa8f4d4dd9bd8604b5d07df1b985da2edc4911ed8fdc198de8551ccf3bb81bad17019d7f7f22dbe37b558a87d8d1762b5d8e4e566ff86685d2971090423a8309772b998511c414dd3962e54898c2bb0e3d26e56b85b551dcff0a334793c8c8e02a19820c08af944a4bb3a6403a4aae262db19331a527421a3573e42edb278f9d6917fef4247f36d762b96b9c28275e4e02427a970b9b40d680d47bdf3edbc3267db36f4d9fbd2acd7ede3d855c3b162c731cbdf125bf87bad9dc938b6fa6ca03ebbb578120eebbb92d484aeaa89dcf8bbdc56f52a9832de10dfa0829d9ddda54dcd4b5225ff3657ba3db41b27804368af5d93f9b63d65a3eb5644b878db7c11a2c47259020cedfdad4bbed1a20e0c5a3013ef498af5450b0cfa5a8da0625d39402db0846f6989250bf08afb6143cf4121abfeac3a44f312ae8f719bad4e970d88cb9e40ca9a38f1a413acb33610fc2568e0ec83aa568f2c155430e0a4aa42952759ba38e181b8f99c7f2f8de24d46656a9c1c01f198ae5d1da61177d82cf6356f0a73c15d89fc74d649a45735df963cf57ddfd6838c05cca422b909f632d6d1b8fe373f0622493803d94301135842cb30043332c06fa6356d137874324643c4990c77856e1db757180bf3a849833d8347e4a14a3307ba769255672264371b0f4dce11ef7848195086f76a613c25290defd42eb36fbd5ed2d4c18157f8dd78b7ef975c14598436896aba5d3e638d1beca6c6a76f4141fcf17c6fc2cee21a511e36fd875c39052a3a7ed112b9a72660fa4a6b771f0b7224ff451af2ac1095f237f61e2484a780e96653a6acf9c2d3c031a68a574cc60a2996605599dfb73f3de026b8f12924ffad6ef66fe3bc0936dea6569eb094762ef8d42637a65ae9418a2feea9ebb995b158200223bbc5fc619736bbe258023bed43693260ebbe75b07b6b374b6a51e40e0a080a2ac7b7758789de389fd19791d696a1f29bbfecd8f2a18faad81633027a032d25a1e457113b8f8b95eb091cbbc76a43f322c87128abe4c8356ebe95a0733d172e9723539aaca055642e4973209324c5468bc114bbb752bab406faa4d910bc5ff6b5dc5598000fcc4a34da094b9de5a4565bebc7f766289b75e100f418cdc020605818883139bb41a36f086e8e4cfb822121d86480aa54830ef7e2e572666ce53bbdc4b56246c52d5813a0dbe902eafa120164fef16bdfdf9cae512e879eac8c710a7c86cb259e6f20fec256a83fb637db9ab774a30f315e342f9a8d982ac80c57fcbca756e54785d62d98bc1eebdbd0ddd3eb0562fa1c125c566c60978634feaad838679a5bbc9e4591c47f879433c4b9d3786d1b635d44cd6818af624cd39d2354b8437fa685ff024f0ac7a8b04e42de325ba002a2abaa6e252ca8e5469fc8d6ccb463cbafa6f245cf4a47539224d339a5c300d69ba6bc850aba54a9889f8ca7d9c7304d736eee1f7bf72af3a4b9701a32b375a1e9976cd4d65daabb9c49ffff6c85c86f404aa5c0cc887349558bb45523bbd7c984612a764a965b75dfef352c8f3f62103264865e5688dd8cee72d5d43e543a6c2ea271e4110ab2d600cbe1a6990e9207d571a92d12dd5f64e8ad97f8436c589f39c8527b52f5d389f59e3530a8f91cbb920f68500ab7234f7f3a67324c7a315202b836b08db4eea5e9a7acfbc5e062c016bf6d4a928aabefba37d17d4cd658b7a0bdd2d6e0617870032431bc8fbfd6ffc0c7150de5c4e1b954ad867aa5ac67414d726f877604bd8bfd396085deb8502addfaddc99c75ae8944542b0d2b7998b24a8ace019f10425f4ca53be0d3ff56955bff73067dbf169479128d6108e435c563ce45a6e79e245171bce82508ad127708a7e9f2b26d246184ed85f349ea4c177e0df4afa36e44918f389626106a72d4a66f1640dd5d9477dae9c55b3e071e2ea6d9d34696a4b824090a1219a2301f0111079450c3959482535df8b2bc3504af3c850b7e01a0d18cce26c20e6d86b6dce94efc3e61aef9fea761f0f4f4fe0d0f76cdfd46618e39130123cb3071ef90ea3299c1c0119c7732ebece73f1d15bc0d6b45de3a6c52a71e320fc6e7f846999f5669cd2b79368cdfabe5ccd350d47d365fc2387aa7bb2c6570db98d66c0ac1288b68e4c4833794b6f4cb780bd17c9335b724302d951866fff4a05a418d00bd1eb4a9b684155ced55435f241c072e3bf6850703948f801d6f719e52d2a32b54038219a977c8ae7235619dfa747747887b522fa47354c27b7b110149b24f38fb3431d77511f26764ac48c8f528cbcbefd015d2ab0a82cb8858c89b9851024266ecfcc671f5816dd00eecc7a48d7ccd9eaed9278d51482c1f9091250855065790bf067e47559891b7331647e098b1836b7a1d49c3a4a1ef676bd1fe891739717867951744e94663e5bfcc869be19f7993c5703913171a9ae34de13f96ef26a0a043a56308bd7b233c1b1cee6aea6a50678b197deb14da32df1eeac952f0c78bdfd36523fd386ff6d63813078d61460851fad01b47dbba50c790428768e9ecb83a032158167eaf97d4553503eba6de2459b9b16805a3c258e22c62a199a5d5c8c95927e3bfae4923df8bb582f0afe0f3695673c03fffd066c0d23f696e0de888bfef457ab2050b639bba2080a4c8326d4bf1ff84665da1c7c2783a6d1db3c674a4c2e86341651e72c5ab2c793c9afbeb355e35992d7b0902be91cd653b60dd8979109de7497a4b2dbdcf5e8e6dfac03504a901300962862d9b0693a1989c9a2b79341f65cf32456b4ab154d967e19fff5ce10d35f5efd7fc0750e0e0a24e27b62ca05047384589f21855495743df9987bc4ab17ff18550867aee36c93bd3e034225a56e5a7ee33575bed4d0ace8a2fb7a00a09d0c4fc47b4c377b7856657459d6621c4e9c3d51acf46bd1cd7e9f76ec921e6a49b49ed842ebc0ecc8c877be8de08e7968a9b6bf0edcfd7bf72239f55b87efa0c3e5aabe1686dd44d3884e5eb6e11c5500836c240d63a8003775cb970e05142a4b41b2ef16ac2bd39554168de7026697ba2d8650c83d1882c4ce99b7b73a2e5faeeeb97f09e23f0e3681817d2083390ee2c4e6388da7ed519598eeebce56958f6017f6dd33bb3025b0ab44114c8dc973f26c59165a6bde3897800cebac927af540c6d74c124db5f05961dd6953b4738c7b2b1145dab0dc271e9945025ad7fdf62d2747b3fe2f433d838f7eb0542b7126461769937c18c28ddc0e488ccba832042af3cf0a045118bb1aa7b5d7628d6b520edfd56e2925f0160985c89a2ac8dddce4a2c482c2980668128a8064bc8cfc83da87e3d7081d75ef054004ebc37d25f58db44910e482b4083c101bbaa52a42ddd3ecddf6bdde0d753f618c5672dc0a791afd460a300f307fb1750cbd8f0bcd691a7d859893cc49883329e233a7b26dc5279811b89c411ff67fade6e9549218e77babc43f9a0c74c62b9a44388af3cdba3311df522e3ec39a3ac199b159cfdb668a0f5727cd63a820cc1806791b6c0d5442b16c888d2c15d52ecc82f5c13c777fa3cc68e97442f109b4167ebd8d5f51a30a64cfee9de234c2bf2e3b2a32b4d1a771bc6ace1eefe752aee68d7b291a752eb1e862b5c40951a9acb363cff6431fb29113b553f357c044777c3aa737f7850f8aa2084f501217febb478b1b236e1fc98c69ad7429da58ddd6e6c7b0d45ad4b8ec0a65bf8756d8fca08050bbeed7f19e24728569f6016cf8f1c310d8823ec029342ebc1403bc5267621664396c8ca6d263f630f0a86ce496b4f9a259c0ba80661bee98e3cf55e4cd6976797b08d1fba4e9edbbe703bdc341fb6ebdd3f236ab1ce66668f6b7a74b284142b43f1c2d4e9d9392949216bbc80f70ff4a2199bac09b2afeef72d9c363474609f064a5d6336580bd3e45c65969a9f5bf708262f91a256b0f9778b13a4538e8e10ea427e3d477d68c414da4cf6f96eedf9779a25b60d5089089ee225c85029136b9d4c07e2cef36d2abd87bc369f6b3851e8380df34f7acdbf2d43059de035d3c3c8e1fffc68d177d9d211d7910957a35be1b905e251452aa334328f7fc7d0b9293bbfa0b94c1726f308df067dd3604a820660a2706cd87419e0260161bfb36bf8347aff37f0dd7f8a130d8145e86ee7e3f498c83bcf9d53e77a11ec2e46d4a6932a1d527bcf0f9189f4b63e2cd53352e22b94e630e1ae89e459b0eb88a7f27b9394a0186d5b9e0055a6b9f8848296ed006b7ff1d612dde8ce7030b57a28a45feb48159e4200bbd4c2091f8c65ca022f951125cb35aa674f10f8ec1ee4b6d96fbaa744b885be98a6686a5e02386d2f2164d9e0be861b2d2c0ac00871256b8e29898a33cedceb51c0fabd2985dabfa75d8483e05e40338f2835738f3fdcf36711f66880a822af22654b30d6b3e7535bc60c48c46310f3c01f677a36d5d7e7abd96d92ad0813e0e566c02b5282ab79d0714987d3d0a74360a4048b3690f04cb5d1a7e17f2aea9e15610cb76d3b0aee1b34e5efc975b88149be81dec861fa2a6e085d70423d8b6a4aa6ac4de118fd5b6b8c570211cdf7f0d228f3476e96abf7be5cb84ba8f4f7eb66f2c2e8a44fad48a4cca0b2402ed590a91e64d5fea51f5031ebe24cede134916c73a818899d18a5cf795c9c2de43c23078834f2debe98df246059609f8efb6f053b37984f70f692e03538f5818828a5565e189b0a68093db726a2b31fbae78051449456de80c930bb82b4c3d44a7f4ba1f412b4db7b6af4f8ba7b5e3685f1258a35155fac553c57a82dce19e4c9d872d060afe2bb7d0abc714da209aab9ed07b727829add94b1125aa34024081ae4cbe25eef4d76faa157eb7c4f44bbc0c5180850399cfdf8350bb9d7a0a62108b05164a1987868ec367fb2308ccb1fdc7756188d656488c24c1eb16e02577ae9d27c177d5be1d94be6e5942630dce269adc882d06368b40a358bd198b8cef757a6cdfb2e4e38a681c7b2c413f605cb43e83a75bcc2a4381a4657d8de3e769e3531c73006a3c532441f2beede7178f4143ea4c29c9a90fd26fbe5d1a0f61393992f737be9cce8d1277fb614bc42bf41cb174ddcf0218b673c2c005a74a0448af18bdf61cd919b9d2d9878eec940d95db30a78a9c393b89dea685f151e7d5e0ec035ac1dd2539cfc65850d07ba33cc175e1d5991d27ca31dc91ef1770d5506f9c0cf3957efabe5c25a3d05c19279d057cd32d95c8d894750e79542335c8131639f22b3a5f05fac369208e0704051ea32c763f20548d9bbdd3cf5689561e6f8c371e5716dac9de61fb1d527bb2ae177ee6ed94b78ebc9eb17167b11f2d942287820c97963f7168be8a8c2d3dc613744e0daa9762c1ec96e6da4dd8329f84ec6e8696a685406a1e500b2556f35c21f0e8722eeca05791600a0d418afa8604348a4b87098ca7442e1faf69da160a7f58715c21bd7f4c7644f0ea77ca198ed8412d743b6d11ba7e15b913e41fa5b65c36cd4da339eb96748f23cc6c1a2fa7a195d1d79f79f388091665ce29feaba58d3e0d3743ca34f926020b1b7d7c30846eae3a1cff108f807234e2457d95446d7cef7983ab4415b4fc3518039957f50e41358d333e1249598e0d7c837edee4e35e1e8ceaf916dab82f3f34feb63cadab31a56519da3d5500877fcdb351b93fad12eeb88e22d496f6f63a354b9b415987a994c7384616f6042ce219a17a36db1da24818c7c2f66aaa5ff9a290bf16c0b9e79f5be1132a54c1b6bafc2e4bbdf63b3386cf0a910a479904ff882ef2d89edf4f9cfebe886a3d77685cebab1219d59cc9c8071dfbc80624b64049336229172327439852a6e84859c03efcd7af851ed6fc2f74a96e87737eaac8a41b3b48f72a16eb5a9c818fc3bc6e2fe8b2bdc48404c4fe6511a7be74639733c2e61af9cb38a261707ed2ae52435a0f9a98eba1366a22c05accd33962a4d46f6a2e05e38ae001376a32623a3565a429ce7b429ec1f4544f52db744ab2d18a0240fc6fdfb88e457bf742d88f59933e8451fecc3d4ec0cba412d892997903d3e3ce955fbf29a503428c6db385cd3bf15cdfdb3b1a690751ac2c4f8fcaaf32dc681dc263bfc31b22730ba60c3be246a0274c54fc1b3d8d4a3e54618d5e88bcb1ef2d38b1627d9c2ee199c4a0ee9162af8523f3ed5ea4215ee5fc22681faafbaf60f56644aad4e9772f59780aeda987a757594d8421f0c1b736af99770b55b6d973d85240b8c1853d739a4dc63918787c89557e34dfdc16cb1d20dc905721426855d80a114e872b281083d19802f39020a44cfa63dd737ce7a42ea6c73e2174c85a0405ff5247859abc7df46cc25ee8e839db1cf2fda8500ccadd830005f4214703f6ee1871440be315a1837664a0ba2f365233b35e76abc1886949bd7798825b91209914165e8fb07ed348560ac81ff767d010ba4f7701e75e8575b764adc38313a51ebddf056a095cfa9d815f378fe172b89fb4c8cdbbe93cb1103d0001ecddebb42b055839960f874ee54435b8aaf45422c28fcb79d58f23a6b02c765656c7ac96ec75db92472128dda30e46534639a3747cc8610afeb9f7e8a70ca17f5cb853ba33df3de73468ae5f38b8ab0fdd72defbf077338d0c140c92198a39c36fa178a64244d296681efa0b54aae6e91ea0cc3f8e9b8ba0ce03db6fa7cc692881d9229a3a823ae98e4fc236980c7a99fd2aabdafc181d80560ae9d856bc2552d46278a79216f243e43f065ec42ea31a068296d639bedc76b44578654197705a58b1e08edfc703f4b41318d3a3ffeb0891858bf6f9e3e8888afb1f40c74aff6604f59f36c98560fde30d8b6b94834dd35e6a7f6bfdb93ae37f963c997ddbc9f4e97c2431beb3cac373b0b47b5988fceba6374006487a94772ef14a535d2ce5c454a6f4d01780ee668e62907917a0ad99ffc259be3cf9eeee6a1fc63dd83633e48d9dd095718e3a1228dee2b072c0a8f8e0b3caa4ee7107677f8a74e0a501bd158b893853bc34f09e60410460d75c54492222214362d0245cdd62c42cc05dd47cfda883c8a1f7596cde22e84e36b83e6a3c5105b2feab85cf537260718958229d5dbd1b248a5043dbf45d120b124172222999df88c321105d0f6d80fa396122e48db5b3caf0d12a239027e8ec7c11431c37dbe9919176a32ffeba96c5fe0ce1d919f6c4ca103870ac0fa29321866a4b9fd9d99c7a67a6d569091a91baa2b636c8bb523f4db084f4a4452d7f955eea29ce8f7d68a4d8a9ee226702e33da36ad0fa6c5ac2e7b72742cf3c89e415343a1e2ee4290376e795956e1684ff0e450c84d4319524b078544f01ceaecd306653aee4b7d5a679c2dfe0d073e6668c6b93e77a0972eaaca73b8048bbd7a3449ef27367fb712c92b1574d2084044843fe75566e92ab8a724e6d3961a91697dfcf8b5df594cd35a527f232466a4abedc0257577ba20973c4d14969f259ed2949dc392ac86b3db5e78b7f25f498d5d4ae23562591aef99fb52afdcddec060904341a1ab4f5125fe2a422097804c8eb0738c6165e797ed691a492c7e97b1875a622eb592c204ccfad78817cd8dd44115f571e8f5f02524c599b827a9c08e54cf1d1224a1a815d6a4f87de53f0f75138356ffb6b29941263e6e960712fa55439fd0ae87b15a76918f1f2380bd754b6404ff0c26fdcc1d089a505bd1134446eaa574d2bf1ee6e8212ed93e410180e7e1f6eac3cce53865c561da3cc8d8b58d5f84a51218ca5266f1a7cb0ee0b71a300e9ef508a31e95c37d7e6aaba8d2f352f3b5e9c3137e41e814a470e149d42581745ad76b249f9c1df122b2e542762836cfb15608a2491e3258460e857670c75e915f4d55ae382c751b2892b95ddec3c0614f12b745db212f5d083d929333c2a58d149a03ff23b62f2d30851c7aebc963d43feec9f10750dd4369336d3ead284cd270b9ef7d65633c601f452876500a8598966793767285e2120a8cdc5c14525390e1c0077d5fb0e46e7083f7e5bca46ad97570dc6af8d9599c240110613a9d784aa71b491d5d13126ca6e70c157d22319515ef343c6b6659a1da0a2e61b18f3faaaf88392f703bfabf9c14aacc83055a35067ba48fba85dfca94441fb747e2d2c4841c4dc83c20f3bafbc91fe25732f5f4a29a124c83602bc66b6b1f1fce9e18b4fbd974a9b6f7ae74aa9803f08ae4455e4220221c6f6b7385ff43a04193b57946cf4e529674e02108bd0a420568014cfc96f26422d4922e9d5f088f3e526324a4f8291de2cb8e21a9c775f24d14be1f5aa6d9023f81d39da8cb0691cfda749118d3b337b10ee243db832edcbada752caf90f03847e1e5fc9efb80a8dafc6292a2476b4e6ee5ac4c17b5b80a2ffeb1e9a616c615014ce2c637b5a39e748fd29261a56f2e65b87aa512d2923ffe19cf836ff78dfc9c1b476d94fb9976d92aa11bc7cc661ad013a1b0b014897aaf29419fe73dd3ba17b05326cd607c4c7eea0329e71c6d99f2d603df90b634fa956885069483f4e388a8d108e2efdc8f39d35e4e295785c50a2c0a153f86ea159df36e0dc6e5f54daba1ba03575d77412946fd35df383ddb959a3ef97b5ab639f07eace221402a64236f0b13a34503d704d10198758d5c8de647decdbecb9db1475bab3a50c7f64f8dd7fe66a5b022e5b935662f9f2f3a0ee5669e7938bdfbee308df89cc8914f888aced683533458ee10f69d2e1699b4427d8558ed5485a41203e5fc6be0fcc5a7259bb8738c3c4f801ccd66df77dc1381023816a4df4794526476d3096df520bd4878275c438e0044359c4a873069339cfaf2b4b2563e060f25bf96f3a79aff5a9cc64a15392633ff8e05d630e235b128f10240331bfc8bd6f7b62d42422571c653e076873384d58a3376b4a18111a798b06efdbf260cf2ee8ca5ff22efbc41dce385ecc953122f98a6383f66ad6d62763af14ad1e007bce2f96e88558db8437a8701c946c648e33e8e932af942f441cd659148417d6d52784a2dfd829b81ec5fcbdf9d3eec27b5ec1ab73ca26da4c5b6507a82d0a95324c13e40a5c75f1d619bb6a8e92b71272b32454fe278ac1814deb1bbf5a7d2a7cbad4e407da8e8f71ca9f1dcf6e7e9893d00d7507188ea8cf2639b4b06b0f556c409e9f3ab4cc3a3808120d607636acd0966bfdd837e87a7fedaf13ec48d420e3cfc70693631bef0bf936cbbaf60b5a911da28e7c9410b5a7a0217b43201bdf0ff37364c406c635111bf916a94ea6dc2b379f70aa81a813f8ccce0fa15dfcfe3aa5970f5879f093410535a65471965b1505129506a94ddb1c55fc1faea683184b95ffb8cfcc9e4d6bbfa878019cd63ec4ea2d780e2b4d076120f96fcf5e0664804d9e4394a8ab3cb7446dc7c69ef5814d7ee522c75db8c2a9be952520dc511647de9bbf8cc8bbec88eb179c1ab6f601675ee7d725400f71afc5a4c26c0c129a55c9702d3e753d679111869e092ae68df343979fb6ebb2dfd6f83c0787fb04f306db85cec76387e1adbcfba0d15ecf62b592712e4ed78fc6888a047a455862f26caf804b0239fe633fff9278ba1f0fabe3eca9b7b24310d29adbba606c828561ba4c5c87a4a5574705759ab8e4ef0b1184d01bbed271652c9c5aa1968e2f1a4bdb4ca0635bb8511cb34d7e22563caf8b571ac882215c4e710cb0255bc2dafa4b59a4afe11f1eb30cd1bf0fdd67daababbec4891dfcde4bf128dce87ce46ea93fee4505d8f07b73ecb4760c0b03950283fddac7b66d1f390d98d0b0c6ab749aaeef342ff14f1418a4e4791f6f4b29b2d77b9071841068a62645191162716f69c36fae01ab6bbbb617085d20cb803076df5367947ba05bb189e89d7ec535101efe19364f706bcc37413ed12553c55c5f2405a3b3a0494e1e1cb7b32d1fb7e1a1640b51f6820f51665c82035bea43f44cc7e5dc7ec79450a845634d6fe8c9aea84bf4cb614eee2ad90a2e031d49aa8ea24011616fe24085907a8004150ac26f895c847a764683b78ccdbc3776098b7916537664ce524e9bc104579c6865b2740977a8f87e3b5a49e620eb74cbea105ac39c5ef9ac02da6471c2351c52482897e1f6796854fe9122f5d0ae37a84b19fd8cd629724daf3eb5c5566d38bd0e96529e9f30e91934c89260dc9ca8a290d14b24d32209eb8fa203ee85353e5838415364a83751979dc47df27a4c482de789f5f4a7fe5ec90010e7adbb89a33163600f595cfda48190659fdf9af8ecd53080f26031f7eb015121b2416dd6f210661b296e6ba8c41ec482586193823cba2dfa3cf33643f01dc664bddfcc07590a63836468667e7a1fd34507b0102c8dce0bf445520aae2ee5be00a7911588f03ad320d54f7943f46a5539bc47751bb6f013f8c8baf671543962a4779258a1fddd4a1dd562f3e8d53dee46787092e6e1a5244934c6fcad4c5db1aea21ba3a0aa79b5eeb107eba0da61d84a74ecd3f03131afcc9321f4afecfa4d8b1dd63f628d79de725a7ac222db23f6f4c9cd82eff50d8916f78011ec668a38acf5d2df96739c9f4b9e717beae83e70b0404dde73f4052865ba8ded77f60e6810e0bbf4178fb6be022ccbf45377155f0029f122129f0364a346d78793b7059c372134273046bb54e1b943bf087bcfffd142e85fe47e2cbed65ccffa5a09f6e60ebf45a7dcbc1f482d57e1d02a04081143af0f80d4313f37786c33b049a23dfd5a16f9b649f1f9d4b9be654380d63567071e0c0936127dd5b511f96442b1bf9b175f8767dca80ca71bc18da7364dd213fc6de2a34aa17996d99b57042269d05bce8af1d9b94741ce088a3330f7bd44551ce284f40ba712a6f1c3ce66b73350f783d257eb0947a769c3dac6c5a59fddb727935433261906c53f7cedb343f4936dc2c0db5034e66f09aafb58d90dce29669611fd800866d3df86e2157566774e88676601a3e2c4410608ee7aa9c8d0c516b6e9c6df3d8ae1c45c05d446211980e1a3e48c2e5527918198244e3ad1eb75b373455c52e9a4c9fe6e997b7326977e9afce11dbe946438ee0065f7488e974c02cd250736438147ad898f425156aa32f3563b6c2045249f9905be7f62bd766d6337acc68a468cf6ed4c8a0365ca1e0f76a13b6287cc0ec06e2b8d9ffa40a46442727816a6159d4d193df345c15bd00a60f52611e7beff4557a7d1680355c36278a517d82c4035a50f5e69256753a6f1cdbf8e4b3bc1fe1a248c6a16b1758bab0bcfbcf04e656661e72b1403b9c121d50f5911c5c5af32bff57268aa8435a1f54debed7ce6886d692a2ed7ac097683ddc493cabe3dee297bd4f289caa9da54e2a5c876113915c68080191213accb86d7b80ef467c63e600cc67e8ee014631efd93d87b7f30c7dd0418907bc4eb092d2a650d68fe3c24944f38f514109d45d511e9e5f630062cc975c4780df3df15c5e6763b87df43c1dc977b5cfd0707410baddf08e0d870e91d37249a3864fcf341dbb9cd6cfc35d882747429e866286079d866df18af8e7960e3b8a85e48c1144f724ba51e277b572d44c3bb10568f088bda50a10a22cad108326096a1edd39d06a418b1b3446df8253ae161ed97135fe813cb96c9329921ca666d99de2fb82a6f7da60c275cf8c64e3d00cc284a42dff551ffce436e45fd323ff58f57dab17d160e824f7bc400f73292cfbdc05a637d36cf84be037eac4c7d64d2e82d2fe4ecb54fdca35bfa0b413d1855b693afb065ac42c8c13a85f3f9ccd3fa899e39e37be795f86e8d6bf4800a5f846d0c670c47ae5789a528323c89c4df801a0ba74a477e3b296dbfcedf443f228b9f21a98b3fe73c6d7cce2b43112b40fc8f954ade3db7042d05927bb09e47bd439063e26af97b8e2e5e23606bb57e8a16cbd604636f018f7d2fa028f772d3bf155987ee1d9581e38521802051a2b231f3cb52141f348d3f82c8df08ea2bb971819556d51f50ba41f12bfcd24fae0bf8258532a93a350eb11c8e48fade876bac0a7468f8f97b484fefb0b055979dd8710f2da385efbf01ec5a49210f61325858b6af09191b7fe4e61f47e78d9f57da2fb3580cb414ba4e44fe781e572e65f67caea46c81a53b5536fe81976a86b5202f92c20334927806e6be7b5cd6becd4a9825c12c526c7ace6d894bebcc4f7524a77b0955aadc5b8f54b7233d8410e3987320a52b70fba984f4c4c80ea804973337cd677b76703fdd2b00ccb74eb5249cef4d28c1f5cc598d9a41b672be9466487ff03bb871501e42ad4851bbe75e93c693aedd2106ad780863c73c61fcb4e0ef8b764562a8f681746c701803c20faae8588fbd12e6660968c32d4be4ce180d84be20dc16a2f1bdfff2caff7874c11691080b897f9bf5ccd60a0760666d1a2d6de3b65159e06fd8369181206694a4237297f4bc41ed0b4bb50737ce0a7a524d2794b3b110b86c9ffc8a692443262f4f93f7ff7edc93a064459994c521fcf341e160fd2878a4447bd53da51c4a0a297b5d9678c49055d4b51d0d5f19ab5b86a511130ebcb431b4fbffb928e3aae893294a3b625f6a57a38265f7750e95877a6d564c687a49b368d0ad6eb93817f485814cd3d5fe0fe41191887bb475a7fcf993beb38ba4b0efe9993a7d43ea18f6e9a1b63013269f66de48fa133f25d80d356ed360da04b3012f385ec39dfd088c592dcc697941bd0ea55ef3f72483a60f9f65aa75942f59d5d26b9e12acc9c25b193bb46eadd13c46f93348708b5e55fbd1d511f4e4abe3165513c1b1a5a3cf654a11d4b3d19f588f881199decace6d703caed622203f04e1212aca780aa7c51a771f4a89dd9f386a7030f723f25b93d60d1fcbe6be36bbc590d234acbe93ce5ee639e8fc9d807d0359b0e195be679ce8778e9828725000144f3dffc3837953ba5e061d570b42b2bf1f5ce7b22f5b9073aa34ea6ad700bbb81182387fa54a7064529dad6a62f4947a7665e96d27866c774ba3258dbc8fecaab2ea4ecea4d438f31c1458c7ebda6f156bd5194ab6f8f8e9462ece42109408d1a3a9755841830120b4b9aa9de83cdbdf69b45efd1d5bd15530ff12227bdc1d7be4b61b83ba3eff58aca27277ad1bded200cd9ad58ca78a20bcbe10da6511691f095d1c8e998a66af8c3a70f94616d4a814414e9036b96fd2f3d008c7621ab71d6464f4b5be59e192c06b5308d7606e0f354f095acb438d01289818ed07459034dceccca1499db7dc451f47059e462ca96b0739649f8459a17150dc22a655b4d216a5e1638a725364cca4a2633b27ac6eb7591f44e5c423880f00837f0e28806d7af2c25df5b9d7cbb660f9d8a50d414e6bc8fac82b4a047d76446e0fce0a8993852044e2845eafeeb673b66dda6f4d217a2cd57c91547aca55b94bff657334c36db03b52578e60c171663ddb72c1eb872ceaa3097496ccbc35381769701da09402860fb721931d137b29c13b3e912f18d10bede981f5b211b475ecae1e6944f8551b7ee7f71ac5e85fd7f280e462c720bc6bdb9cbead20429bc7b6ae6e5ecd837fbfd28e3a6f7e38e8f1329fc58c09e0e1bdcbccebd4690174d5f46825e5bc5f43e6ec6304f816c60077cb37a4c4681377f446f9103a546b1de58a950e0ab491c8486ed60383ec5446afdd25ab1a60669832fdbf8d768370d21b207fc214424d4fb7b133dd2aa95a11ef6ff5f21a493167b7692ee38b769dbeb7c116d7d612d44f17e1f7e80f9807c0fea6b4c15b48c33997af2023236e212745b93da90fb97cd1dfd0a2b3dfc1b70a2566299bc8097d46df535ada229ccbce438a15678ab1b3501f2cf4f98cdefc642480a05c45c842bd41106dc98708e5a187b9d075b754785e4794b89fd3796837c150b06aea043db012a669a7c1a39e2cd1157c3dcd9159a4a654e1a9346a97ea2eadb3f3ebc9403386b9553e989ab76215730220e0f5b68927413d23497067b6037d15123affb0dd76137775f827d60e7b7b35b56caa7c85654307cfbb92b13edd1420a2d3bfe43b450e26a8b8f9ea9e7f537fa78fb3757d41f7ed6cf2ec0255887c16e08628d594c422f46b3528abd5d23b410b5a4fa6b4e12f6ae961701eeb211b70a6a0181b52108f9aa4511a053ca1f3ead63b764831eca2f3b3eaa7dfcc6fd84c9f7d3d55749b712dd94b87c263562a6cf8b45efc8d76b09127b443b1ec0dbbdb4a3445744d6838bb51e96f46baeb9dbb9d28b84b8fd44dacadfa8dea6702227f7ec3dc198530d304418e1eadeb49347fb78f36fd45f78f6da0e34aaac2d164a9dcc2e62e671db83bc118be3e7e83c78eda94746161aa6d81c15f80255fd5d81a8e56865d524ddd035b961e7841ef1b47d7be365ab968856e97123b8e7c717da4ee96a655d9e244e6544fbfb03bb8990045c38f0578caffebf38c44ad9429185ea7a45bb4c09c17ec1939d85ce8e80682b7cbf81dbd1f51d9d0f016e39287d06a449061e3383be4d36bfc9dea9c15e2005891798d6b550614c7297113b9201815f209157e708b602311fc1d9ccbede3678dd7198451a0fbafcd943404dbb9ae974478fc316999464a5f5cbe44807d2f8c26e72ccb2147ab771b77de59e330791b3c24cfd4aca78f6f1f0db7248bbd3dc7bd5d96e703ce9278edb941a4a8d44ceea00f5bf0e66eaf336936972ce034d6b2655c8853da69213368bca31c69462d6a02d6a97f0549a0d8f818407d4a823b5ea5173071c087de0a971340a5d5b13e7f5a7e9ecca5ee180acca50fed9bc07d7edf7a2d355a07872596b691c3dc3bcd8d0b1e7908f52aafbdcf6d5599cfa4c5e73d2f2af603a9e1f462c7f08fa180030105072767aefd76bb898dc96b48f9a55624f4c516c3e2f5cc78337772085bddc7488e1cad5a23c8d832650e59ca0c4b0a26fc5fd3dae7a59bec15fadbaac206559f1f584c74f6fe4d5ed6dbb48cbcc0477f622a0c83f6dc787acdf1ca3753c62d55f36f71a85e8f3b77b215fe0df4b44d95ed0b2f1605439c0d3b3a9a4bc3235281f66f464d4b440084210eea03f183b00bca1fc59cd4b92ce5bf174c79385feb964053ff84fb6d88e1e6f87362570202fd52eb0b5cf4ec1a585a71f0fd8b78f95a356fa74182fac6dafc1485f9d62949599f74ab75cdaf442bf858e2396f19f05df8ba2a44d5fcae4277003d04b64eff96583258819b921f16762f3ff7e1e2e07886b64b2e906241907d3f381748c5cf2d21c458e5ea36152e21d8092d85b701c471c85dd468bf17628bd50909d88a570a9db9875fd12672ff16a2eebf24e068b41d323edc772f500c77589127500127af99e13572f67174f30d4c5ddbd1b05b202409f35187b4edfb624380a81f9fb21eb98694a192c647b9a0684f5bf466b1ac101013a822f818fc926935e8f6529830eb451851ecd180f360879a07f97d6b7897645f05bc7da97928bdab1eff4683ce54e455a315efb92c3f99a0ad08ee33bcc2a8a25c35d5699138b3dae44c1cf0f965a5a5aa0ef423ee318ad5c3fa72e59076e8bc45be451ca819024cd760acf608a8d41d8b33d7cfe0b78700df18b587e6d3710976665e3688e242d9c563d60222e2f17300a122a762949b9726919c3785ce1a8a465d96bce044c2d0aac3bcdffbd629d2c05fe1815e66896ccc1a3da9a6ed2b07e6a4610c97b88925c3d0f424a330964083ba7ff8e23b9f8f7ca314ecbb406d9cc178ece5c03c0df26e353cdea3a73196be5f6f43cb61146e4d93b590858402570e3a29e48ad457c68f25f2f1a9c25e9a75ac927e505652feccdb181b08e395dfc21bee3e6dec14be81e2e4ce0ada5e04b86e137883873029f78ddb2c3ec07966c6d50259861a686071d0b43609b9be326126245983dee007b58564f28a618badada95eebce7e7cff40bde4382a451b0210f6b9e00ffea6d6d19b68791e6f14f09c88ae407d246e24e5dddab815bf1ebe1aa7497d7dcc93519bd47c2e275629b65c59487917644aa432e8f851bdd5e855ca9a2a56151c7de55eec32eea97885f80721e21557005c3177db6ac976cd648485d74c4735ee95f54adf773ed2257914e9aa2ac4e78351bcc2101cf58b83f2e09061d78a9ea8ed852b7485d61e54080256db585009cd598074c8f12a2c3ccfda81bed3b7e6348c644a11c42f460f0bdc2c93d1bd2077b873a1b06f2313d1648aa4cb39764dcf788d7cec1b6f09699cf0da924c6678a7df3bf878943a24f7b6b8c6e5016ab61012353279d99d694b8757761d399346063d867c1c3f5a2bde623131aa0c60f83e3481e0571d86aa7aa8d5c38f77eb0ff794a5f48c87246b0de7201375edb641ff5c447cf386b8eebe84c71aca1f8d927c38c627cf77b33d247563f8a87aea36278dca40fcd302a19d2dbc82d6a8c48c5299ff37ee5643b9add713342a55822639bd719b4572ba7b50426a0a4f1029d8f5d45d1784c6feaf1e2a28e9f322e6b52d0c7affa977c151b8dc7d4e2434f88dee5771483ee040a6e7f329e77ab4525df77bed019e056664e7bde1bea1e497683d7eea584d17478dba3ad86e783d6b8a83b45a5b8fefbd5d3cfc269fff2d862946d561236aebf96e1aad69e0451be5dd47826eaf1a7a1b85ec28fbc1c125ec0ac74216cf93365a674a766e32cd2e7ac4a7b606b52ce052113adb1255c81a8d1106dfd6b317c5150b789dd79aa357956008efdf91f006e9d69ef92bef9122088b6b7e786e84f4ee183d07956fb52910e656ee66f7be06a984222b3496d98138c0edffffca5ba580e8ccc343950785dfe51a76b3e6ff1c3e3794be2a04b108ecbe92f8ef333faf7cdde52deca29f6a8b102cf1e2da570bec3aaaff8eedec24c6d9f5482290046801a6f570a2fa32ee3a0bc18ea5c0e3eb124a7b0697b54d7ffb1d1f9b6eb9da2aef0b7240eaa84888dd6b76ccc203d6b68688b27a193a02b1e95de9af95aa563efe15886362aefc3ca0c00516f98107d3ef2566ecaf73c5a3242a106dfee52375f404de6b5f591c448b93e27309905ca825ee27ff0415e2926e97792d98f5a174b58e184501623908cd93e797ee7718bac57d3f380d89668aa2f62266f458fc4aeb539d926334d441cbdd19c8603ce0a0bbedc838766a340f52da9cdc6fb68a2b0cac4c3d1710495e2e77b75aa116e04cbe11431b1c181a4e8fc3376d27fdc8d25f8d74dcc551fa9024360b82531d4028eba0ac33a2d231a8b086a3e86418e5402f419066c7b33320bfdfdbbf26b8c62ca5989f366cafba8942a8c289c8d9efd8124d0ae786f471d25ddecd30bd7170b2f80170c2a13f812b1126915e6ecbe3398ed2203d08c36d0e5016737c14e0f56d8faac6190d93c722ce52e09c05f2099d12b595308cf72c67e99f4060cfad873f1a3f3fb5a9a1c9b44fe08d927cdeea1327c7aee184c9c28a10b7640d137b13e36f8dc7db13f758bae463f1e555d840145803473b29ca8dd8208c49b74fc4bab3448f3845700aba6708b0c6eb0d7bb695e60483564d9137d39a3ccfd8d8ee094544d8b1945df8095d989157510625cf7b8706045ff9aa2fac12a83929b127b35b1274be38f7a759f81ded3cc1160d0d035e6d54c741fb5fede84aa8bee44a828228ca283818d25b174a64077e383ba7a1984ddce26b4ef986641b906c120ec6d1b08948a0c4490c1d272ee1cb0204b96f6b9a3c8f09431a861f74e538ed966f7aca6d5948f58837f46e15b772889bb566b8921bb03dc13588ea1dd50ef680dbd167ac6b3c0edeeb8ef384482c37ee18fd344b03554eefa1457b19223e06c4d944bdda542b05a94d567a0161ebde6d26884d6d8b60951c1f4da5ba6ed2e5e23ce5eb24575e998e325d33628685bf3a59cf1ec44c951262f30a4ef395e3dc8a5a66526c36ea8346f8e7b445731e1a885c931739b58a91ccaf4bc1ffe37955ae621aadb1d7d1c2a3a9432e4a910053ca5049d71308fc194a955e14d8edb8ce4225adb38120b1448bae25786721d209671da257594ad2dee136090efdd9c2277170573e87bbf7f8b8669518d7a995374e682abdc7d4f0298997d6e7f7888eb042d9907f87f50aee9a64933b8ee4272ff1b7f792d596ebaa7857d2150e69d54b352f694dd0763afb13cd7837e90338efdf9cefae28aed29041069851ffadf31e11075c97d654a4b970aba93ec3287924581778c8f1304f1609245c359525d6e4c0441470a7cf4989330f837db78ad394a3d10f783a3c0f1ac430f51af73dcee9fbfbf0c19dc10a409f3e6a3763060e7518fec15b7bbcec7c6a053eb377b9f9dcc0163b1b4458817d9cfc7b3eec1cf8fb7e3a0e8c2bfa48d1d914c251d2b1b76e7eb6d12ea6de416e4ec1a467ad75b9edbaf5ab17499409e5aab226b1ae012f9944f2f706bbe133b65912faff5ca0be8293811f16fc9cf68be5c00c057300534bce85e09cb4d8e6d1dd0b2f81a1bf2acf99c2062f108bf9502d1a1454a3161ee9a256ef7a4c380521413e1f0542d022e438e8beb7c4dc41505c7a9196165d5a1793d01de437e32b1d783dd5e9bac23fe44ab5c00b930c8a415e5a5c15a0238253065c0ff64a7b9a95158494a7d47e47c7662a03be7b25ae6c44f6bbd9526294849585b3525d94c5732898e6d38d652adc95364a7ab6e71398225eba7414adac1834a320943de6b671b17bdb74bf136255e8dcc00c8860e7583818687f6ea64be4359731bf0f6a9c0687e0c366b1fd935fbbc25f4e2402f88454bd57fdaa6f374baa17a2f1eba339f249bd515acb941bc0604a077e48d65926ee059007d4f31c37e69baa22979f273ed3cb49744719f84fef063835da95f840967fb734a758ca0f37f537b83c229de8e1b252f525100585d54257f69dd6e2cd6abecdabb12c050527db91b8bbc53dc2a6ffcc96f8594b7d2c4e11f4b6bb8c497cd1dc5f8dab6aeca99376c67e7244ab7bb42b784dbacea78b1160f0b89c021c2f9b88717f5e694b04de6009cbad653b165e8e1bd0382e0bc384067e6eacc80c2977af856c68dd39494f1500dcdc01949bad836541985a732c88c1bdea27a16a154bb1870d622fdea7357dcd73a9c58eeefe54d2f09c744dd62e12abddb742e6fdfea45db2110299c9bd8cd5b4dcbe9e0cabb461a67ecdf84f14efa29ed0a7d261f945ce2826ad65ac4bfd2290242b373ceb892786b2fb1ded88c979b8284e06748a19abf7979e2836e74a4a68a990fa230dbdb929ddd6a95ceabbe997156ab9fc287405f992301dec73d6f13a4810d73b30e0517ca31a44ba689ba083e88fc13ec85141c033a71c3d15de0ab611cee3e8b794744a0e813e8329eba1f591d8a2829416acc048b17477f4fabd26f533e8c4031f0e7544653d58e523afaa0a7f5ef77e9d3213b35ae4b3a5b8f8f8144422a0e1ce06489c8b3207f4f6a04d1487dd8931563c602ba560d305d86b5f8a87951677cc4e7e01d96ae996096e7848c9e89a81bb1e597dc82141f4e213f1cab1adb4239662ec4ad9e66fab7c0d269e47054e8f4b77fab48bc7e23381da580755a4640855287b5807999aa590b79ea24213249fabff26fcec3b22fe9c11f89b72ea3856a41626ed23e0c376429e6b158f6176d3e1d1cf78513000fea8a69aad369f33a5741707ca299b26eed600df05d51de6d62b2b751421e9feb7e00277ae3e67740387fa349a763682a50d5761477dc47ca23d32b7b7bbaffe395c378cc4e2a711b0adfc5ae2ffef2f08848f80380060846d0f13c4d69968c5114e04dd082aff7d7243ce82c8b5b0a6fa9b9822e46ac7b90fe6983c24c1ea69425059f56bf27a1beaf30d0591ed6653301e9d2403541f4b8e35ba598af7a3fe6d7298adfc008d8b962468e289c9c625dfc5a9564a9417a85863303ac6735e4bd5a71da7907014d0c8a3b1a651233933038c1fe8cd637c3c0cf2ad628d5f27458a8d7fa616077303d341eb50f859f5673e1b9cb7790d7e287de4d6b8f8887996354ca8149f986410a9338c81b8b29b4c5216c1dbbc1e5be2100192f7dbb1e985c4fef5979e6d5c3977a866173c06b230b26cedb667607cf23abac6d1a6ed91b2f8727c6ee5eda913095dae25136bd1f4181a03df5d3c579bb58ea24d1c95357cec7941b68ca9a6da4cb67c5d232c40fed33e5f4ed1d7592c4e7d777410ac4dc2ff0b6cd9bf4548061037fa604b121772c4032e58fb9b81f4eaa5b2fdce1b98c115a569f8f47debb92c8e9c73eab47f89dbc86266521e2e541d48dd3503b557551a5803994c71c287c7ff25f375ca3637d0bfbe5ac1da21644f1cc40ed137a211a3f588efcad153009b70ce0af1112abb5d71eca29a536d0f357e3ed539be2febda6230a3d296eba255d89217fa505e255e6fd015f24e5cf8cb0ab117ff74a403b2dc75b6ad79a887b9f4d387a6a1168e33c22ff51ea3849de2f0e9c85ce888712b8f25345371bb0d79d7db3a195c7a028b7555cdb79f328a6ce96e7504cee2a6601a4dac9963a0e87da20b438956e06431f4fae28dfe726f80391ebe67ef6cd5aaa8cefd9039d067dfdc89c919048346c48994210680eb6d0df49c57eb44f65fac9107fec71b7de560bdeea286a19da3a9c0c9dc2439eed5c4f178187532036135d8c5f184e39f48edbac5e72841d5b397620091215075cfb8a23de00f7fd00a1769eb08dd6cdad9d7c58015d98f409061dbe83ad9ab4a2c7d491900b6fe51813f34d097076c8a698838a729b358361747234516b5ab3084421ba9354dcd4c2dd13ee90a9cf6068997738be8ac8fa55f16ba4dda5a88c7db1a128804ec0411442285858b6aa3367c79bf120eedf39c264c22e66f13e0590addb307c913856506463a62579c17398de0c7bcbf1d0f429d3556a6adb3f319a0fdd796508fea16402c453d7671c2e41539ab89a16a1c0ee1984b962e3793a74814ba4615ad5b61bee3b990df76d4e1cd7164b367b176b0fb10ad70a1f1de6e75da190eb3477fc9b9162a7e1c402b53c3166eda04448f2e7ad4ee84c0c4753dc55d156a671e1040cb5420e77eec5b76f14c29e3a12063b0c9f92069fcc070eb35565096dc1a33fec0b98e56ef71731e1d22904d5451da588bc42f7ef6f59097e93c5b22dd82b2e1043f2bea379c622a77783888ebaebbf8274731e35d4ca49de3b1e2d61d33b0b54258ba9eacddbec25e69e7aed1b3d07c4d3cb27fd757cc354de34b952dc497332bb24044294d18facaf49894e7824c3c0f08ea5caa170fd9ad6e978b5450927b5752b7adb849eef77b7e9ad84f76ffcbded9e86cab4dc0b48bb69a96709c8f2a203ff030be4da0cf11ae9ba783d782e45658ec2e44e519ab033762bd3324dfee31c55277f37d163a08953afdfc778f4b55d0a3160f6c68974e0d59a3b4e4cd17570e3e5cf08669b3a63f7f637f385641751fb933adde5d2c50a161430ac6584b4f4bf141beecbe8261a8042beb977d508091c4e4ff18fb54ca1bd767438e5721c9d37d0e0bbd0037bec81280291c6ec2cf2ffb2c0defdf4428bc795f0ad72d36519316329b0c6d457740aa12c3cbbb6f21924f600726180c22aa389b8de953b5d0b525b26cd8396fb189b5b2cfd9d6c760a688d8a54aed8a781aeff6c814722a628364dc6db74b70db367fe935f3a0e63e0585408168d411092ebbfb01c707922a9d2603590749253bf68966f4ee0176bacc8555811a51167be917d601fd4ce2cc62dccf6dbd5235ed7858ca59833c86cd1891facf84532fabb6259e9e5fec74526aab37eaf6cb7fea6fda1b42b622da7e463d79fa7d9bbbf345ee11a2a7facd9f899cb1b32f7666c5f924d1f2d80cd9fd2cb084f2ce35fb33346d6f6bc045e458e129e149cab697da8c12de51deeda3ad4449e86b8989dbcb2fcec836bb2ea7aa1eed519983db7a0afbd3417d67e51369073b92db54a885cd223b248a88b3b2e4d0aa8fa5d52ef9760fd017d132c9e011b9bd1940825bde90cb3cbd17ee5e0067aa04164feee75939a3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Swift</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-Router架构选择</title>
    <link href="/2022/02/16/IOS-Router%E6%9E%B6%E6%9E%84%E9%80%89%E6%8B%A9/"/>
    <url>/2022/02/16/IOS-Router%E6%9E%B6%E6%9E%84%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="50a9d6b6103030d7174351571cb6320a7ce8ddc147156e3494cfb23038c1a9cf">30b1ea5aa7108d130862beaedfecbfe153ff63c4b10e9547f907ccac0b01bb559f071db3cff7df306e191c2035e75a21143c719ed1c252878635ca8967048cd77ab3dce5d0489db9cdeb5b88b5a754e693672ea7dfc7b8b49fa5dc4bcdd62d22e66fc38a7652a57496fe15820b29c8b611cf0fa0113b4f7c2ce6813c98862157a464b987822c100e6127d139482b0e787ba3b1d0b9980de3e1b192acdec4f919361880d6c3bb08466b71adfb8de6618f11e06240b01d9922ec1d3c6911a2277b6fb50d85ab0302d93d1d787be2f43af8aa2ad3e08dc189bb2ca287ffea1ec9cac19a8741fadedce83a92bbe6e04f5f1663f9a76fa1664e2f97fe426b469a2963e8a577258bc97fff1738742b7dd400a8ea489ef211cefc7525e92c6baf2ffe2604ce106152e59cae575bc1da4f0a55a690a5242281a6034f4f7ad58b32456c8b3a5f12f001a2a48d530823772798eb85be757e8cac5626bb9bc3c4e03ed63d295c95a1e92e7e54d7f7a7e454680ef3350bfa55e6d310c0ed8c4c67caaad23515d758bd99e615c8f4a91b756c43d6762888a76a4690e2cf9a280a39f7999a894ac1c4317665ebb25e4a4b2f0295b8f72686c03b0bb4d3d394a8a4520c789938c0fd9f9300237a44345e5c2b04c9be7ec570df6fcd5d061d070605236f8cb2456b65c162ced9ff58fa97d010aaf99909fa8ed76682c7a9a43559e235e43b9953c8a72c26d075a8849d85bd4d9110ac0da62789fce3e4acc0b53c1235f88dc900c2cdc555d7bb4edb609f0d73b18873bda848e6fd561310ec6029cb944244e8a4d58ad30f342e72ec7872b50beb22f32523c0f0459045e2c2476f389f24703e8f4178cf1d5beb58571f77e8fc2de102459641532f7d1d6fe8dd3fa928ad56ef7e27406f3c93459859f69c7b536b2113c0f30f8a3cb17f6a4c6ce8a469a71a20a6a4ccf3f7f97a480621179bf49b5742a4ecb3f6eb0160c80c5eb929e9ab62ef6baf96e0d8be3a85f09005cb3c93dfb217e663de54a1a6becfc06ca57d64aa1ea0ba6eeb0c7b57e02410674ade13075399937da9e6529ccdd138e4a6f604d9b6450222b64053926b665c6c5d2558abf44692285e72efcab3d13382a03ece666a44e61ff14c6b5dad10faea8aadea548a344959237527eb514ee5042d55eed6b4970d2942d39b45d1f7c77b8b0928631cb22f1c0bdf54a6f7ce4b09d759c308824e6b3f2e791c76a8d4c5a12abe5c4d04d24abc13c897df8270d86030e27f05213e67245a93358afbf8692b53e316e2bbe381d81e022ec66215357fbd934a937ef3623d53d66d33bb95afba2adc86587198ebe173a62ca7e1869f5c2c2710a442d5606822b9b7432a4b303caecc879727615e181b79e60451738dc854ff9105c8c4577ed2bda0d9c988a60a7f64792cc44e2fedb8a8576a67d9900e5a0d7a791d3e6e8cb220da8a9cc9fb5d2c2e0a8d7387d4331b40a5db92613d67d7770c4ace7a57c8a829e2876c7208199987d04c1d3fb711b9d3d4f5c381869715a29de2876f81531709039362b9b38b0c1d748d39338108752423cdf58d42c5353576767c58ff9e3a6103c83750d577ca3f13cf392a5321d9f17d08035a843717da1a4b0d11b65f655febc842e3d03005c982547904634608ef971f6ce5eb9896c4e52bbd1d1807ff34244456384d873185cc744546541a1f5d6717dfabafccdae39f9b01d616af5cb243dfb3322487044ea4a600fde1466d836f078d32a9bcac8249a9311745b43f8e27bbc3181b8487fd115dbdee9f399af8329df40b01925d10c6b72a89b87b4e374e9a2790a50c16796993167429c3d591228604d424ed8d9067fe92a5363eeab3167ac548aeb47d7a40bc2fe1521bc0ca5d7c308a063955642765c4fedc05853a41460b256e5b4189a89b91d84c5b5a1dd1510427c55d12ccaac75cae47838638c115ec2bb99fc360d59de490630cb751ef289b015f05592a5cf68de3e34efa93aa2bfc8376ffd62c3278b8333b35df615a4612e741fd2994f32275b3a2a519c8a84745698fd2ca5ea30d7cde1da84fbdd8671553bdbfa7484d11440ab0183ec9d54f39c6bdcaee394d4647d539873c9d14f58525ca8c2c55f2808dba096641182a69f87632fb2a0f06e80c8d10cfc8c0aa3f5e29a4ee1831990a2a76cc3830c28688eca193c0f4efff409a2d54490ae90bc77bad55ed119adca5ddcaf92b477a1caf413f18dacf3891fbd33552f524dcca513970c99d01f6067b9e325938ed86eb8fee4a43af76f413255f23a5089e17819e266bff8464a771020693a43cf3971cef547e4e8b1eae271244ca36894d615f910f2c5a3bf95c6840138f0c552e39b738d6b3c00d6da2f928022e431d2b11337ad3541049f4b24c19c2d1b5711fa0a474c0ee2f2058721d1f33ba793f7c066db1011e62caac8f8137058783cf9fb5a6ad2ee845d5c379fc071d2ba32a8da0c1eff6ef61d5febde1fc5aea5abe417421c4fba817ad5710294f4d6b974637a5fc4053741624895cacabbc0beec2100d6fd68680a064dc1e6296ceee72aa23cf14cab13007cdaa7d15b20df17327a5e6fc9f14357833a854126db7bf94aa0c5de124443c0ea35d1b2a9e6a8c780a0d90eab9be0c5249bec745e53c80d8adf37772fae20af9473046b1188e00ecccea86b9825dcc9d1b4ee070a30d9d1f5c4f3e132ad69370739b89ad3b02936528234060c3f7f305758f3d15edbc5480e7cddc44725674da99feec93a81516567aab91ad114f1926225165a5850c991a61e1ef66b51fa52dc3211f926cd238bd7e1a303ad7232e482e9d5a256a9c3fc3b6b826c298b7d77797fae1ec6292566e54f8037f703aee66b9f9cfc07857abb891abaea1f4975dddd0667c4f4060fbc3602517da5ed4648d3e767eba90efa83fe065d4ffdb5cfe8f709b27f3f9b9b06deb1d1a3a62b007afd432052feecbd4a688d08349af15c44d79188d19dbbe2f8334cc69e9dff935bf3e84d36c57d7b105dabde06c6032ab7e8edbf7b5cacb1b41275065424664d7cc39eb25c14bd5352c025d62e497aa2e07f9ce345cbb1b6e71d84d0fa84390eb2037dd40b668d506a35fca28d527f8fa7ed487857cd56cee37631e656d912732dd428ebe2e60629ad25777eb3f713fe53a08c6791c7d3677609aa6ee7c4bb02cf112420a5efd5e48b29dc7ae4dba391b1f02feb0438006e7de723d5b2eb5c973b39f5b56f9bb18530ff424bf0e99aca502fc5b2319f3b017564e9013265f96a6248bc197c9952209d903cf3e038fd03c84929d2f8dbea3d51807e63b40a2c1a91527dacabb30b623536d227cb2ebbc11f52e405aa2a5dd74bbf8c0f2a413d2a686044bf83bb4649f95f76e5b911a830b65d57509e86dbc910b78e7f87dd150f147c779e125ef0e6cfa58be94ec81697696c9e5369222cfd7847cb0961087ee9d392bc188e51360f870d1c043cefb521f7cf90bb0f626c91971f40ef87d0980209f11780366d283ea0054849ce97923d7ceff2b1a8df582adb199f8b2e3a074a4d8d9c1a2074354e062322e8ba2c0fd87dcd4fa7d560c0b456e68a52628a4327b00a96320edbc7e28d7649a7812a32bca1a063c6ca63454c7236bca11e3ead4c860c47002cea520b64050b83bfce92b2a9ca63991eae5e5979f6da1fdb41d7c920fd8671d407f8d4017ac1f2480911886c586cf9992473b8a094d40df6853a7c26babaf6305529fe7da6500a0d3b254e2c2eabbbde76087c59a3e1d736472c22c31f55fce241a103f3deb55d6dea0668ebf0f46302ca0983158a4b44a8ccc19707843c21f5fcd770ec064789e869171810ff8b2b5ed3cc7609b13fbe83e50f75b86473ff68bd02b505bc2a1b2c28310318c91ec5e1400e904a2bc4177626c04004b83a5c793332c8bc2d26f91ec4f0907728fe8f6c253ae24f287f846a2fae68b35f5cb01482a1d1ba8a0fe0e3e1ce81b0d8784f121c4c017a99e33a4a076abe46118c861a48b7a80e997d499de84f4c8ea7c658450d6f6753fb8395d948a46d048722eda7c11667c3628f316ff53a5bf2fcbc475edbc3bbaeb1f970f1d984bac6235296ab9b7904162b3f92ec13b17db528eaffb2c7a604581834e22ac05cf22eef64cf87b8ec537516a1f2dd52cb0cb7f54356578055958c0d1c0990798e55916ff2e999d9d12ebe7dac67b033e0a4ccb1ab70770e7ff36736bd001e18de0879d666b423b10b41e8b3fb1b38639574822ff7aff21ecbc33b2cdf776a0523b9b365f2053ead74743f3e5cad938310f48204af4ae7ec7c4b92e126a2c63ad2141fd198738bac967546babd9bd3b57f9297d8e7d7ce93119591e08810301f55d2982b4eddcd79f345f8339fe47e163c79c35801b74d001c8831733fb352ef0f92ec47100dee9b9427b3c666c255e82d45f2f4762061605650c465b7da65f206e88d16de5370a3a251d3e10ea01793cb4fd277a3fb89fbc872c3ce873149ee1a27b4f2ea103f9eb93fb9270c2747f9d9131ac4d7e0f50663febcb12b024fe116ef49516837a910ffcb2967a0bffacfa6262e8f72f20414bfd9fcf0bac77180a9ef023e23d11029d5e0ba247130d2465ec517a410d50abec75d80651dee2b99b3934a212a70cc74c2263528721925cf7319c72a16fbcee62c4f085aeb6e6a184add2b1ae09f81b6a3c49347ab5668897fc3fb52bcfa1ed873ee6f3401b64fa72b1bafc8c3cfce5eff4b757397fed02d63595c69f27bfc71f608ff71099a1dd4e254cf9747e45d25e0c81f3ccf2ae5b51a4feea86c3b42720d1383aee1bb07bebfe9f3c972c9693dfea76173668e58bb33a3dff68db81f127ccfdabaddaa9eba999499a6dceb50d1d6d70564d78ee2cb255a292088b292e691791b62b028b1545e698e86c2ed0fbbf5012d746fdc6d411db5b5a3a038303851c8994be4d92346f50b7ccfc81bb8247deb504f019c2097cd9edbefdd170f913ed5a18268b1942186e53a7f475dffaab167f7361b3dc4928dd3a71fb0dd226f13c149a4285992979252db05059a4fe9ab3c170</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-ld段位移</title>
    <link href="/2022/02/10/iOS-ld%E6%AE%B5%E4%BD%8D%E7%A7%BB/"/>
    <url>/2022/02/10/iOS-ld%E6%AE%B5%E4%BD%8D%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="TEXT-段迁移的原理"><a href="#TEXT-段迁移的原理" class="headerlink" title="__TEXT 段迁移的原理"></a>__TEXT 段迁移的原理</h3><p>程序的构建过程包含 预处理 -&gt; 编译 -&gt; 汇编 -&gt; 链接 等 4 个主要阶段，完成之后就会得到 Mach-O 可执行文件。</p><p>通过 $ man ld ，可以发现链接器有一个参数: -rename_p orgSegment orgSection newSegment newSection。使用该参数可以将orgSegment&#x2F;orgSection的名称修改为newSegment&#x2F;newSection。</p><p>可以在 Other Linker Flags 中传递该参数。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">-Wl,-rename_p,__TEXT,__text,__BD_TEXT,__text<br>-Wl,-segprot,__BD_TEXT,rx,rx<br></code></pre></td></tr></table></figure><p>其中 -Wl 的作用是告诉 Xcode 它后面的参数是添加给 Ld 链接器的，这些参数将在链接阶段生效。</p><p>第一行参数会新创建一个 __BD_TEXT 段，并把<code> __TEXT</code>  ,<code>__text </code>移动到 __<code>BD_TEXT</code>，<code>__text</code>。</p><p>第二行参数是给 <code>__BD_TEXT </code>赋予可读和可执行权限。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring&quot;</span>,<br><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__const,__RODATA,__const&quot;</span>,<br><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab&quot;</span>,<br><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname&quot;</span>,<br><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname&quot;</span>,<br><span class="hljs-string">&quot;-Wl,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 <code>-rename_p</code> 需要关闭 <code>Bitcode</code> </p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h5 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h5><p>Crash 的原因是执行代码时找不到指定的节</p><p>操作系统只关心段的读&#x2F;写&#x2F;执行权限，并不关心段或节的名称。即便是使用了<code>-rename_p</code> 移动 Segment&#x2F;Section，各符号的地址也会由链接器修正好，因此段移动后程序也可以正常运行。</p><p>但是如果代码指明了要读取 __TEXT 中的某个 Section ，那么这个 Section 就不能够被移动，否则代码就无法读取到它，就会导致出错。</p><p>首先，dyld 在启动阶段会检查 <code>__unwind_info</code> 和 <code>__eh_frame</code> 这两个 Section。如果移动这两个 Section，在启动后程序就会 Crash。</p><p>第二，Swift 相关的 Section 不能移动，否则会引起 Crash。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">__TEXT,__swift5_typeref<br>__TEXT,__swift5_reflstr<br>__TEXT,__swift5_fieldmd<br>__TEXT,__swift5_types<br>__TEXT,__swift5_capture<br>__TEXT,__swift5_assocty<br>__TEXT,__swift5_proto<br>__TEXT,__swift5_protos<br>__TEXT,__swift5_builtin<br></code></pre></td></tr></table></figure><h5 id="链接失败"><a href="#链接失败" class="headerlink" title="链接失败"></a>链接失败</h5><p><code>__TEXT</code> 段迁移最难解决的问题是链接失败问题，是由 CPU 对寻址范围的限制以及 ld64 链接器的缺陷导致。</p>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-启动优化</title>
    <link href="/2022/02/08/iOS-%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/02/08/iOS-%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bb579fdfe9695045de2c1f3a3148e18bb2174cdc943c166d2c55bf66c6b7caa4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-启动流程</title>
    <link href="/2022/02/04/iOS-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/02/04/iOS-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dbbbe14b5e36b8c2581fc22c7c54f536315e74fb65cbfae06af1f16ae82e9f0c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-系统C函数的hook</title>
    <link href="/2022/02/01/iOS-C%E5%87%BD%E6%95%B0%E7%9A%84hook/"/>
    <url>/2022/02/01/iOS-C%E5%87%BD%E6%95%B0%E7%9A%84hook/</url>
    
    <content type="html"><![CDATA[<h3 id="fishhook方案"><a href="#fishhook方案" class="headerlink" title="fishhook方案"></a>fishhook方案</h3><p>通过解析<code>bind</code>、<code>lazy_bind</code>、<code>weak_bind</code>可以获取到元组列表，每个元组会告诉我们符号和指针信息，指针信息包括指针位于哪个段以及在段的偏移</p><p>在iOS中，我们使用用变量或类似<code>NSLog()</code>等外部函数并不是直接调用地址，而是在经过bind 或 lazy_bind后才能得到真正的地址。bind或lazy_bind后真正的函数地址记录在 <code>nl_symbol_ptr</code> 或 <code>la_symbol_ptr</code>中，通过符号表可以找到每个函数对应在<code>nl_symbol_ptr</code>或<code>la_symbol_ptr</code>中的地址。fishhook 就是通过查找符号表，找到记录函数指针的地址修改函数指针从而实现C函数的hook。</p><p>bind是在加载镜像的时候就就已经绑定，而lazy_bind是在首次使用时才触发绑定。</p><blockquote><p> lazy_bind是如何实现在首次调用函数时进行bind的呢？</p></blockquote><p>假设张三和李四是同学，老师手里有个名单，这个名单上记录着要参加值日的同学。本来今天应该是李四值日，但是由于打印名单时教务处老师不知道李四的名字，因此打印了班长张三的名字。老师只认名单，因此老师找来张三打扫卫生。但是张三只做了一件事情，就是把名单上的名字改成了李四，并且叫李四来打扫卫生。这样老师以后如果再吩咐打扫卫生的事情时就直接找到了李四。这就是lazy_bind。故事中老师就是我们写的代码，代码只认地址。名单就是<code>la_symbol_ptr</code>，上面记录了值日同学名。张三就是stub机制，它只是起到了辅助作用。而李四则是真正的外部函数，需要真正执行的函数。</p><h3 id="动态库C函数hook"><a href="#动态库C函数hook" class="headerlink" title="动态库C函数hook"></a>动态库C函数hook</h3><p>除了<code>fishhook</code>外，笔者也有一种C函数的静态hook方式，相比于<code>fishhook</code>，此方案不存在耗时的查找比对操作。下面我将介绍这种比较特殊的方案：基于动态库的C函数hook </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1dv8sqwtvj20xc0fjmyr.jpg"></p><p><strong>Step1</strong>: 首先在主工程中定义一个同名同参同返回的函数，这样在<code>ld64</code>链接时会认为<code>func1</code>和<code>func2</code> 中用到的<code>NSLog</code>是我们自定义的函数，这样就不会跟系统库的函数进行匹配，<code>NSLog</code>也就不会被标记为需要<code>bind</code>的函数。</p><p><strong>Step2</strong>: 在我们自定义的<code>NSLog</code>内部，我们调用自定义动态库的中间函数<code>MyNSLog</code>，这一步是为了能够调用到真正的<code>NSLog</code></p><p><strong>Step3</strong>: 由于动态库中我们没有自定义<code>NSLog</code>去“欺骗”ld64，因此动态中的<code>NSLog</code>会去调用真正的系统函数。</p><p>到这里可能有同学会问，“难道动态库的<code>NSLog</code>不存在重新调用到主程序的<code>NSLog</code>函数的风险吗？那样岂不是会死循环？”</p><p>不会的。因为动态库是具备编译和链接过程的产物。经过链接时，在二进制文件中就已经写定了<code>NSLog</code>  <code>bind</code>到系统库中的<code>NSLog</code>了，因此在启动阶段<code>dyld</code>不会“违抗”二进制的命令执行到主程序的<code>NSLog</code>。</p><p>但是由于侵入性较强，仅对部分需要<strong>同步启动</strong>用到的函数使用。<code>fishhook</code> 还是项目中最主要的使用方式。</p>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dyld 2 和 dyld 3 有哪些区别? 以及iOS15上dyld的变化</title>
    <link href="/2022/01/01/dyld%202%20%E5%92%8C%20dyld%203%20%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%20%E4%BB%A5%E5%8F%8AiOS15%E4%B8%8Adyld%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <url>/2022/01/01/dyld%202%20%E5%92%8C%20dyld%203%20%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%20%E4%BB%A5%E5%8F%8AiOS15%E4%B8%8Adyld%E7%9A%84%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="dyld-2-和-dyld-3-有哪些区别-以及iOS15上dyld的变化"><a href="#dyld-2-和-dyld-3-有哪些区别-以及iOS15上dyld的变化" class="headerlink" title="dyld 2 和 dyld 3 有哪些区别? 以及iOS15上dyld的变化"></a>dyld 2 和 dyld 3 有哪些区别? 以及iOS15上dyld的变化</h3><p>dyld 是动态加载器，它主要用于动态库的链接和程序启动加载工作，它目前有两个主要版本：dyld 2 和 dyld 3。</p><p><strong>dyld 2</strong></p><p><a href="https://github.com/opensource-apple/dyld/tree/master/src" title="dyld开源地址">dyld2</a> 从 iOS 3.1 开始引入，一直到 iOS 12 被 dyld 3 全面代替。它经过了很多次版本迭代，我们现在常见的特性比如 ASLR，Code Sign，Shared Cache 等技术，都是在 dyld 2 中引入的。dyld 2 的执行流程是这样的：</p><p><img src="http://cdn.zhangferry.com/Images/20220104235847.png"></p><ul><li>解析 <code>mach-o</code> 头文件，找到依赖库，依赖库又可能有别的依赖，这里会进行递归分析，直到获得所有 dylib 的完整图。这里数据庞大，需要进行大量的处理；</li><li>映射所有 <code>mach-o</code> 文件，将它们放入地址空间；</li><li>执行符号查找，若你的程序使用 <code>printf</code> 函数，将会查找 <code>printf</code> 是否在库系统中，然后我们找到它的地址，将它复制到你的程序中的函数指针上；</li><li>进行 bind 和 rebase，修复内部和外部指针；</li><li>运行一些初始化任务，像是加载 category、load 方法等；</li><li>执行 main；</li></ul><p><strong>dyld 3</strong></p><p>dyld 3 在 2017 年就被引入至 iOS 11，当时主要用来优化系统库。现在，在 iOS 13 中它也将用于启动第三方 APP，完全替代 dyld 2。</p><p>dyld 3 最大的特点就是引入了启动闭包，闭包里包含了启动所需要的缓存信息，而且这个闭包在进程外就完成了。在打开 APP 时，实际上已经有不少工作都完成了，这会使 dyld 的执行更快。</p><p>最重要的特性就是启动闭包，闭包里包含了启动所需要的缓存信息，从而提高启动速度。下图是 dyld 2 和 dyld 3 的执行步骤对比：</p><p><img src="http://cdn.zhangferry.com/Images/20220105001119.png"></p><p>dyld 3 的执行步骤分两大步，以图中虚线隔开，虚线以上进程外执行，以下进程创建时执行：</p><ul><li>前 3 步查找依赖和符号相对耗时，且涉及一些安全问题，所以将这些信息做成缓存闭包写入磁盘里，对应地址：<code>tmp/com.apple.dyld</code>。闭包会在重启手机&#x2F;更新&#x2F;下载 App 的首启等时机创建。</li><li>进程启动时，读取闭包并验证闭包有效性。</li><li>后面步骤同 dyld 2</li></ul><h3 id="iOS-15-的LC-DYLD-CHAINED-FIXUPS"><a href="#iOS-15-的LC-DYLD-CHAINED-FIXUPS" class="headerlink" title="iOS 15 的LC_DYLD_CHAINED_FIXUPS"></a>iOS 15 的LC_DYLD_CHAINED_FIXUPS</h3><p>在iOS15 上，APP的<code>rebase</code> &amp; <code>bind</code> 的方式发生了变化。</p><p>如果我们将<code>iOS Deployment Target</code>设置为15的话，通过<code>MachOView</code>查看打包后的Mach-O文件会发现新的二进制上出现了不支持的LC。</p><p><img src="https://upload-images.jianshu.io/upload_images/4642217-76d3f18e9cc92b52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/830/format/webp" alt="img"></p><p>这是由于<code>LC_DYLD_INFO_ONLY</code>被替换成了新增的<code>LC_DYLD_EXPORTS_TRIE</code>和<code>LC_DYLD_CHAINED_FIXUPS</code>。</p><p>文件的变化意味着iOS 15的<code>rebase</code>和<code>bind</code>机制发生了变化。回顾iOS 14及以前，<code>dyld</code>是通过解析压缩字节流实现了<code>rebase</code>和<code>bind</code>。解析压缩字节会告诉<code>dyld</code> 整个二进制文件中有哪些地址需要修正，以及在<code>bind</code>时每个地址是为哪个外部符号预留。那iOS 15 <code>dyld</code>是如何进行过修正的呢？接下来我们探索下<code>dyld</code>。</p><p> 前段时间听到有同学讨论iOS 15 <code>dyld3</code> 更新为<code>dyld4</code>了。笔者无法确定苹果是否偷偷地升级了<code>dyld</code>，但是从蛛丝马迹中可以看出来<code>dyld</code> 确实是有变化，例如在<code>instrument</code> 中我们可以看到部分函数的命名空间变成了<code>dyld4</code>。还有就是一些API的调用上发生了一些变化，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">let header:UnsafePointer<span class="hljs-tag">&lt;<span class="hljs-name">mach_header</span>&gt;</span> = _dyld_get_image_header(0)<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在iOS 15系统之前通过索引获取<code>header</code>时，如果<code>index == 0</code>，返回的是可执行程序的<code>header</code>。但是在iOS 15中，<code>index == 0</code>获取到的却是系统库。当然这些变化对我们的业务代码可能还不足以产生影响，但是可以说明<code>dyld</code> 确定是有改动。那<code>LC_DYLD_CHAINED_FIXUPS</code>是<code>dyld</code>的新特性吗？我的答案是否定的。因为从<code>dyld3</code>的<code>dyld-852.2</code>版本中可以看到<code>LC_DYLD_CHAINED_FIXUPS</code>早就预埋在dyld中了，只不过在<code>iOS Deployment Target == 15</code>时引起Mach-O文件变化后，才能进入相应的代码分支。</p><h3 id="iOS15上如何让你的应用启动更快？"><a href="#iOS15上如何让你的应用启动更快？" class="headerlink" title="iOS15上如何让你的应用启动更快？"></a>iOS15上如何让你的应用启动更快？</h3><p>在iOS 15中，原本用于rebase &amp; bind 的压缩字节流被替换，取而代之的是fixup-chains(链表结构)。在iOS 启动时，dyld 先判断是否存在fixup-chains，如果存在fixup-chains 则按照fixup-chains的方式进行解析，否则还是按照压缩字节流的方式解析。解析的目的是为了将应用程序的地址进行修正。fixup-chains 机制是由三层结构进行存储，分别是segment（段）-&gt; pages(页) -&gt; fixup-chains(指针链表) 组成。LC_DYLD_CHAINED_FIXUPS所指向的数据会告诉我们有多少segments，每个segment的信息又会告诉我们这个segment有多少pages，以及每个page 的fixup-chains在哪里。 而 fixup-chains中的指针指向了当前page中每一个需要rebase 或者 bind的地址，这些地址中存储的数据并非像iOS 15之前那样都是0x00，而是有一定格式的具有一定意义的8字节数据。而这短短的8字节数据被按照不同的结构体拆分成多个bit，每个或连续几个bit都具有其特殊的含义用于推断rebase 或 bind 所需要的一切信息。iOS 15废除了lazy_bind(weak_bind仍然保留)，由于rebase和bind 被整合为一个链表，因此遍历一次链表即可完成一个page所需的rebase和bind。</p><p><strong>那fixup-chains为什么能加快启动呢？</strong></p><p>因为在iOS 15以前，rebase和bind的信息在压缩字节流中是分别存储的。这就意味着，在启动时dyld在做rebase时会先遍历一遍rebase压缩字节流所记录的地址进行地址修改，假设为N次page fault，由于经过rebase 的page 是被写入数据的dirty page，因此不会被释放，iOS 会通过压缩的方式优化最近没有使用到的dirty page。然后在进行bind时，又遍历bind压缩字节流所记录的那些地址进行修改，假设需要bind M个page。那么在N和M这两个Pages集合中可能存在很多重叠，这就造成了二次遍历，并且iOS可能对其中某些dirty page做了压缩优化。在这种情况下，bind时就需要对这些重叠的pages做解压操作。而fixup-chains很巧妙地解决了这个问题，因为同一个page的rebase和bind整合成一个链表，同时进行这两种操作，这样就不会存在重复遍历相同的page，也不会存在解压的问题。</p><p><strong>疑问</strong></p><p>fixup-chains 会减少page falut次数吗？：不会，依旧是<code>M</code> ∪<code>N</code></p><p>有人问这个算不算iOS 帮我们做了二进制重排？：完全是两回事。虽然都提到了page fault，但是阶段是不同的。</p><p><a href="https://easeapi.com/blog/blog/83-ios13-dyld3.html" title="iOS 13中dyld 3的改进和优化">iOS 13中dyld 3的改进和优化</a></p><p><a href="https://www.yotrolz.com/posts/c2aae680/" title="iOS dyld 前世今生">iOS dyld 前世今生</a></p><p><a href="https://www.jianshu.com/p/6ff72443377b">从野指针探测到对iOS 15 bind 的探索</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift-weak的实现</title>
    <link href="/2021/09/01/Swift-weak%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/09/01/Swift-weak%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在Swift中, <code>SideTable</code> 是针对有需要的对象而创建，系统会为目标对象分配一块新的内存来保存该对象额外的信息。 因为这不是对象必须的内容，所以这个 <code>SideTable</code> 可有可无。对象会有一个指向 <code>SideTable</code> 的指针，同时 <code>SideTable</code> 也有一个指回原对象的指针。在实现上为了不额外多占用内存，目前只有在创建弱引用时，会先把对象的引用计数放到新创建的 <code>SideTable</code> 去，再把空出来的空间存放 <code>SideTable</code> 的地址，会通过一个标志位来区分对象是否有 <code>SideTable</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">JYObject</span>&#123;<br>    <span class="hljs-keyword">var</span> age :<span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br>    <span class="hljs-keyword">var</span> name:<span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JY&quot;</span><br>&#125;<br> <br>  <span class="hljs-keyword">var</span> t <span class="hljs-operator">=</span> <span class="hljs-type">JYObject</span>()<br>    <br>  <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> t2 <span class="hljs-operator">=</span> t<br>    <br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们在<code>print</code>处打上断点，查看t2对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">(lldb) po t2<br>▿ Optional&lt;JYObject&gt;<br>  ▿ some : &lt;JYObject: <span class="hljs-number">0x6000001a9710</span>&gt;<br><br>(lldb) x/<span class="hljs-number">8</span>gx  <span class="hljs-number">0x6000001a9710</span><br><span class="hljs-number">0x6000001a9710</span>: <span class="hljs-number">0x0000000100491e18</span> <span class="hljs-number">0xc0000c00001f03dc</span><br><span class="hljs-number">0x6000001a9720</span>: <span class="hljs-number">0x0000000000000012</span> <span class="hljs-number">0x000000000000594a</span><br><span class="hljs-number">0x6000001a9730</span>: <span class="hljs-number">0xe200000000000000</span> <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6000001a9740</span>: <span class="hljs-number">0x00007efd22b59740</span> <span class="hljs-number">0x000000000000009c</span><br>(lldb) <br></code></pre></td></tr></table></figure><p>通过查看汇编，定义了一个<code>weak</code>变量，编译器自动调用了<code>swift_weakInit</code>函数，这个函数是由<code>WeakReference</code>调用的。说明<code>weak</code>字段在编译器声明的过程当中自动生成了<code>WeakReference</code>对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">WeakReference *<span class="hljs-title">swift::swift_weakInit</span><span class="hljs-params">(WeakReference *ref, HeapObject *value)</span> </span>&#123;<br>  ref-&gt;<span class="hljs-built_in">nativeInit</span>(value);<br>  <span class="hljs-keyword">return</span> ref;<br>&#125;<br><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nativeInit</span><span class="hljs-params">(HeapObject *object)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> side = object ? object-&gt;refCounts.formWeakReference() : <span class="hljs-literal">nullptr</span>;<br>    nativeValue.<span class="hljs-built_in">store</span>(<span class="hljs-built_in">WeakReferenceBits</span>(side), std::memory_order_relaxed);<br>  &#125;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br>HeapObjectSideTableEntry* RefCounts&lt;InlineRefCountBits&gt;::formWeakReference()<br>&#123;<br>    <span class="hljs-comment">// 创建一个 Side Table</span><br>  <span class="hljs-keyword">auto</span> side = <span class="hljs-built_in">allocateSideTable</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">if</span> (side)<br>      <span class="hljs-comment">// 增加一个弱引用</span><br>    <span class="hljs-keyword">return</span> side-&gt;<span class="hljs-built_in">incrementWeak</span>();<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 我们来看一下<code>allocateSideTable</code>方法，是如何创建一个<code>Side Table</code>的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;&gt;<br>HeapObjectSideTableEntry* RefCounts&lt;InlineRefCountBits&gt;::<span class="hljs-built_in">allocateSideTable</span>(<span class="hljs-type">bool</span> failIfDeiniting)<br>&#123;<br>  <span class="hljs-comment">//1.拿到原有的引用计数</span><br>  <span class="hljs-keyword">auto</span> oldbits = refCounts.<span class="hljs-built_in">load</span>(SWIFT_MEMORY_ORDER_CONSUME);<br>  <br>  <span class="hljs-comment">// 判断是否有SideTable，</span><br>  <span class="hljs-keyword">if</span> (oldbits.<span class="hljs-built_in">hasSideTable</span>()) &#123;<br>    <span class="hljs-comment">// Already have a side table. Return it.</span><br>    <span class="hljs-keyword">return</span> oldbits.<span class="hljs-built_in">getSideTable</span>();<br>  &#125; <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (failIfDeiniting &amp;&amp; oldbits.<span class="hljs-built_in">getIsDeiniting</span>()) &#123;<br>    <span class="hljs-comment">// Already past the start of deinit. Do nothing.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Preflight passed. Allocate a side table.</span><br>  <br>  <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> custom side table allocator</span><br> <br>  <span class="hljs-comment">//2.通过HeapObject创建了一个HeapObjectSideTableEntry实例对象</span><br>  HeapObjectSideTableEntry *side = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HeapObjectSideTableEntry</span>(<span class="hljs-built_in">getHeapObject</span>());<br> <br>  <span class="hljs-comment">//3.将创建的实例对象地址给了InlineRefCountBits，也就是 RefCountBitsT</span><br>  <span class="hljs-keyword">auto</span> newbits = <span class="hljs-built_in">InlineRefCountBits</span>(side);<br>  <br>  <span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">if</span> (oldbits.<span class="hljs-built_in">hasSideTable</span>()) &#123;<br>      <span class="hljs-comment">// Already have a side table. Return it and delete ours.</span><br>      <span class="hljs-comment">// Read before delete to streamline barriers.</span><br>      <span class="hljs-keyword">auto</span> result = oldbits.<span class="hljs-built_in">getSideTable</span>();<br>      <span class="hljs-keyword">delete</span> side;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (failIfDeiniting &amp;&amp; oldbits.<span class="hljs-built_in">getIsDeiniting</span>()) &#123;<br>      <span class="hljs-comment">// Already past the start of deinit. Do nothing.</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>     <br>    <span class="hljs-comment">// 将原有的引用计数存储</span><br>    side-&gt;<span class="hljs-built_in">initRefCounts</span>(oldbits);<br>     <br>  &#125; <span class="hljs-keyword">while</span> (! refCounts.<span class="hljs-built_in">compare_exchange_weak</span>(oldbits, newbits,<br>                                             std::memory_order_release,<br>                                             std::memory_order_relaxed));<br>  <span class="hljs-keyword">return</span> side;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结一下上面所做的事情</p><p>1.拿到原有的引用计数<br>2.通过HeapObject创建了一个HeapObjectSideTableEntry实例对象<br>3.将创建的实例对象地址给了<code>InlineRefCountBits</code>，也就是 RefCountBitsT。</p></blockquote><p>构造完 <code>Side Table</code> 以后，对象中的 <code>RefCountBitsT</code> 就不是原来的引用计数了，而是一个指向 <code>Side Table</code> 的指针，然而由于它们实际都是 <code>uint64_t</code>，因此需要一个方法来区分。区分的方法我们可以来看 <code>InlineRefCountBits</code> 的构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//弱引用</span><br><span class="hljs-function">LLVM_ATTRIBUTE_ALWAYS_INLINE</span><br><span class="hljs-function">  <span class="hljs-title">RefCountBitsT</span><span class="hljs-params">(HeapObjectSideTableEntry* side)</span></span><br><span class="hljs-function">    : bits((reinterpret_cast&lt;BitsType&gt;(side) &gt;&gt; Offsets::SideTableUnusedLowBits)</span><br><span class="hljs-function">           | (BitsType(<span class="hljs-number">1</span>) &lt;&lt; Offsets::UseSlowRCShift)</span><br><span class="hljs-function">           | (BitsType(<span class="hljs-number">1</span>) &lt;&lt; Offsets::SideTableMarkShift))</span><br><span class="hljs-function">  &#123;</span><br>    <span class="hljs-built_in">assert</span>(refcountIsInline);<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>在弱引用方法中把创建出来的地址做了偏移操作然后存放到了内存当中。</p><p><code>SideTableUnusedLowBits</code> &#x3D; 3，所以，在这个过程中，传进来的<code>side</code>往右移了 3 位，下面的两个是 62 位和 63 位标记成 1</p></blockquote><p>我们接着来看一下 <code>HeapObjectSideTableEntry</code> 的结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapObjectSideTableEntry</span> &#123;<br>  <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> does object need to be atomic?</span><br>  std::atomic&lt;HeapObject*&gt; object;<br>  SideTableRefCounts refCounts;<br><br>  <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">HeapObjectSideTableEntry</span>(HeapObject *newObject)<br>    : <span class="hljs-built_in">object</span>(newObject), <span class="hljs-built_in">refCounts</span>()<br>  &#123; &#125;<br></code></pre></td></tr></table></figure><p>我们来尝试还原一下 拿到弱引用计数 </p><p><code>0xc0000c00001f03dc</code>62位和63位清0得到 <code>HeapObjectSideTableEntry</code> 实例对象的地址<code>0xC00001F03DC</code></p><p>它既然是右移 3 位，那么我左移 3 位把它还原，<code>HeapObjectSideTableEntry</code>左移三位 得到<code>0x10062AFE0</code></p><p><img src="https://gitee.com/zhangferry/Images/raw/master/iOSWeeklyLearning/20220302155825.png"></p><ul><li><code>0x6000001a9710</code> 就是实例对象的地址。</li><li><code>0x0000000000000002</code>就是弱引用计数。<br>这里弱引用为<code>2</code>的原因是因为<code>SideTableRefCountBits</code>初始化的时候从<code>1</code>开始.</li></ul><p> <code>Side Table</code>的生命周期与对象是分离的，当强引用计数为 0 时，只有 <code>HeapObject</code> 被释放了，并没有释放<code>Side Table</code>，只有所有的 <code>weak</code> 引用者都被释放了或相关变量被置 <code>nil</code> 后，<code>Side Table</code> 才能得以释放</p>]]></content>
    
    
    <categories>
      
      <category>Swift</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift-对象的内存结构</title>
    <link href="/2021/09/01/Swift%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <url>/2021/09/01/Swift%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="Swift对象的内存结构"><a href="#Swift对象的内存结构" class="headerlink" title="Swift对象的内存结构"></a>Swift对象的内存结构</h3><p><code>Swift</code>对象的内存结构<code>HeapObject</code>，HeapObject (对应OC中的objc_object) ，有两个属性： 一个是 <code>Metadata</code> ，一个是 <code>RefCount</code> ，默认占用 16 字节大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HeapObject</span> &#123;<br>  HeapMetadata <span class="hljs-type">const</span> * metadata;<br>  InlineRefCounts refCounts;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>HeapMetadata数据结构</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++">   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">swift_class_t</span>: NSObject&#123;<br>   <span class="hljs-type">void</span> *kind; <span class="hljs-comment">//isa, kind(unsigned long)</span><br>   <span class="hljs-type">void</span> *superClass;<br>   <span class="hljs-type">void</span> *cacheData<br>   <span class="hljs-type">void</span> *data<br>   <span class="hljs-type">uint32_t</span> flags; <span class="hljs-comment">//4</span><br>   <span class="hljs-type">uint32_t</span> instanceAddressOffset; <span class="hljs-comment">//4</span><br>   <span class="hljs-type">uint32_t</span> instanceSize;<span class="hljs-comment">//4</span><br>   <span class="hljs-type">uint16_t</span> instanceAlignMask; <span class="hljs-comment">//2</span><br>   <span class="hljs-type">uint16_t</span> reserved; <span class="hljs-comment">//2</span><br><br>   <span class="hljs-type">uint32_t</span> classSize; <span class="hljs-comment">//4</span><br>   <span class="hljs-type">uint32_t</span> classAddressOffset; <span class="hljs-comment">//4</span><br>   <span class="hljs-type">void</span> *description;<br>   <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Macho中的Swift类储存结构"><a href="#Macho中的Swift类储存结构" class="headerlink" title="Macho中的Swift类储存结构"></a>Macho中的Swift类储存结构</h3><p><code>Swift</code> 类的结构描述，结构体 <code>ClassContextDescriptor</code> 是 <code>Swift</code> 类在 <code>macho</code> 里 <code>Section64(__TEXT,__const)</code> 中的存储结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ClassContextDescriptor</span>&#123;</span><br>    <span class="hljs-type">uint32_t</span> Flag;<br>    <span class="hljs-type">uint32_t</span> Parent;<br>    <span class="hljs-type">int32_t</span>  Name;<br>    <span class="hljs-type">int32_t</span>  AccessFunction; <span class="hljs-comment">// 通过此地址可以获取到MetaData地址</span><br>    <span class="hljs-type">int32_t</span>  FieldDescriptor;<br>    <span class="hljs-type">int32_t</span>  SuperclassType;<br>    <span class="hljs-type">uint32_t</span> MetadataNegativeSizeInWords;<br>    <span class="hljs-type">uint32_t</span> MetadataPositiveSizeInWords;<br>    <span class="hljs-type">uint32_t</span> NumImmediateMembers;<br>    <span class="hljs-type">uint32_t</span> NumFields;<br>    <span class="hljs-type">uint32_t</span> FieldOffsetVectorOffset;<br>    <br>    &lt;泛型签名&gt; <span class="hljs-comment">//字节数与泛型的参数和约束数量有关</span><br>    <br>    &lt;MaybeAddResilientSuperclass&gt;<span class="hljs-comment">//有则添加4字节</span><br>    <br>    &lt;MaybeAddMetadataInitialization&gt;<span class="hljs-comment">//有则添加4*3字节</span><br>    <br>    VTableList[]<span class="hljs-comment">//先用4字节存储offset/pointerSize，再用4字节描述数量，随后N个4+4字节描述函数类型及函数地址。</span><br>    <br>    OverrideTableList[]<span class="hljs-comment">//先用4字节描述数量，随后N个4+4+4字节描述当前被重写的类、被重写的函数描述、当前重写函数地址。</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="如何判断是否为泛型？"><a href="#如何判断是否为泛型？" class="headerlink" title="如何判断是否为泛型？"></a>如何判断是否为泛型？</h4><p>通过 <code>Flag</code> 来判断，如果 <code>Flag</code> 的 <code>generic</code> 标记位为1，则说明为泛型</p><hr><h4 id="泛型的长度如何计算？"><a href="#泛型的长度如何计算？" class="headerlink" title="泛型的长度如何计算？"></a>泛型的长度如何计算？</h4><p>假设有泛型有 <code>paramsCount</code> 个参数，有 <code>requeireCount</code> 个约束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">short</span> pandding = (<span class="hljs-type">unsigned</span>) - paramsCount &amp; <span class="hljs-number">3</span>;<br> 泛型签名字节数 = (<span class="hljs-number">16</span> + paramsCount + pandding + <span class="hljs-number">3</span> * <span class="hljs-number">4</span> * (requeireCount) + <span class="hljs-number">4</span>);<br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     16B  =  4B + 4B + 2B + 2B + 2B + 2B</span><br><span class="hljs-comment">     addMetadataInstantiationCache -&gt; 4B</span><br><span class="hljs-comment">     addMetadataInstantiationPattern -&gt; 4B</span><br><span class="hljs-comment">     GenericParamCount -&gt; 2B</span><br><span class="hljs-comment">     GenericRequirementCount -&gt; 2B</span><br><span class="hljs-comment">     GenericKeyArgumentCount -&gt; 2B</span><br><span class="hljs-comment">     GenericExtraArgumentCount -&gt; 2B</span><br><span class="hljs-comment"> */</span><br> <br></code></pre></td></tr></table></figure><blockquote><p><font color="#54d530">注意：这只是 <code>macho</code> 当中的类的结构形态，但是实际运行的时候，则是会从 <code>metadata + offset(函数偏移位置)</code> 来调用，即将函数地址存储在<code>X8</code> 寄存器中</font></p></blockquote><hr><p><code>Swift</code> 类的 <code>Metadata</code> 位于 <code>__DATA</code> 段，是可读写的，其结构如下：</p><p>上述所提到的 <code>offset(偏移地址)</code>也就是 <code>metaData</code> 距离 <code>func[0]</code> 的距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SwiftClass</span> &#123;</span><br>    NSInteger kind;<br>    id superclass;<br>    NSInteger reserveword1;<br>    NSInteger reserveword2;<br>    NSUInteger rodataPointer;<br>    UInt32 classFlags;<br>    UInt32 instanceAddressPoint;<br>    UInt32 instanceSize;<br>    UInt16 instanceAlignmentMask;<br>    UInt16 runtimeReservedField;<br>    UInt32 classObjectSize;<br>    UInt32 classObjectAddressPoint;<br>    NSInteger nominalTypeDescriptor; <span class="hljs-comment">// 会指向CalssContextDescriptor</span><br>    NSInteger ivarDestroyer;<br>    <span class="hljs-comment">//func[0]</span><br>    <span class="hljs-comment">//func[1]</span><br>    <span class="hljs-comment">//func[2]</span><br>    <span class="hljs-comment">//func[3]</span><br>    <span class="hljs-comment">//func[4]</span><br>    <span class="hljs-comment">//func[5]</span><br>    <span class="hljs-comment">//func[6]</span><br>    ....<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h3 id="ClassContextDescriptor-与-MetaData-之间的关系？"><a href="#ClassContextDescriptor-与-MetaData-之间的关系？" class="headerlink" title="ClassContextDescriptor 与 MetaData 之间的关系？"></a>ClassContextDescriptor 与 MetaData 之间的关系？</h3><p>**<code>MetaData</code> 地址 + <code>0x40</code>  &#x3D;  <code>ClassContextDescriptor</code> 地址 **</p><p><strong><code>ClassContextDescriptor</code> 地址 + <code>AccessFunction（0x12）</code> &#x3D; <code>MetaData</code> 地址</strong></p><blockquote><p><font color="#54d530">注意： 如果编译器进行了缓存，则不会通过 <code>AccessFunction</code> 来获取，直接用缓存中拿到  <code>MetaData</code> 地址</font></p></blockquote><hr><h3 id="Swift方法存储结构"><a href="#Swift方法存储结构" class="headerlink" title="Swift方法存储结构"></a>Swift方法存储结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SwiftMethod</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> Flag;<br>    <span class="hljs-type">uint32_t</span> Offset;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>Flag</code> 的4个字节代表 函数的类型，例如动态，实例，函数类型 <code>Kind</code></p><p><code>Offset</code> 代表存储函数的相对地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 函数类型 kind 对应的枚举如下所示</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">NS_ENUM</span><span class="hljs-params">(NSInteger, SwiftMethodKind)</span> &#123;<br>    SwiftMethodKindMethod             = <span class="hljs-number">0</span>,     <span class="hljs-comment">// method</span><br>    SwiftMethodKindInit               = <span class="hljs-number">1</span>,     <span class="hljs-comment">//init</span><br>    SwiftMethodKindGetter             = <span class="hljs-number">2</span>,     <span class="hljs-comment">// get</span><br>    SwiftMethodKindSetter             = <span class="hljs-number">3</span>,     <span class="hljs-comment">// set</span><br>    SwiftMethodKindModify             = <span class="hljs-number">4</span>,     <span class="hljs-comment">// modify</span><br>    SwiftMethodKindRead               = <span class="hljs-number">5</span>,     <span class="hljs-comment">// read</span><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="类重写的函数"><a href="#类重写的函数" class="headerlink" title="类重写的函数"></a>类重写的函数</h2><p><code>Swift</code> 类重写的函数是单独存储的，单独的 <code>OverrideTable </code>，并且 <code>OverrideTable </code> 是存储在 <code>VTable</code> 之后，其结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SwiftOverrideMethod</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> OverrideClass;<span class="hljs-comment">//记录是重写哪个类的函数，指向TypeContext</span><br>    <span class="hljs-type">uint32_t</span> OverrideMethod;<span class="hljs-comment">//记录重写哪个函数，指向SwiftMethod</span><br>    <span class="hljs-type">uint32_t</span> Method;<span class="hljs-comment">//函数相对地址</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>即修改 <code>Method</code> 为 Hook 的函数地址，那么就可以实现对 重写类的方法的HOOK，与顺序以及数量都无关，</p><hr><h3 id="swift5-types"><a href="#swift5-types" class="headerlink" title="__swift5_types"></a>__swift5_types</h3><p><code> __swift5_types</code> 中存储的是 <code>Class</code> 、<code>Struct</code> 、 <code>Enum</code> 的地址</p><p><code>types</code> 不是 <code>8</code> 字节地址，而是 <code>4</code> 字节，并且所存储的数据明显不是直接地址</p><p>当前文件偏移 + 随后4字节中存储的 <code>value</code>  即可得到 <code>class</code> 地址</p><hr><h4 id="Swift-为什么要采用这种方式来存储数据？"><a href="#Swift-为什么要采用这种方式来存储数据？" class="headerlink" title="Swift 为什么要采用这种方式来存储数据？"></a>Swift 为什么要采用这种方式来存储数据？</h4><p>按照 <code>OC</code> 的习惯需要 <code>8</code> 个字节，现在只需要 <code>4</code> 个字节就能解决，这样的话能够节省包大小</p><p><code>|TypeFlag(16bit)|version(8bit)|generic(1bit)|unique(1bit)|unknown (1bit)| Kind(5bit)|</code></p><p><code>Flag</code> 比较有用的低5位和高16位。低5位可以代表32类型，中间位用来表示<code>version</code> 、是否唯一、泛型等 </p><ul><li>低5位标识当前描述的类型，是 <code>Class</code> | <code>Struct</code> | <code>Enum</code> | <code>Protocol</code> 等等。</li></ul><p>高16位用于标识是否有 <code>Class_HasVTable</code> | <code>Class_HasOverrideTable</code> | <code>Class_HasResilientSuperclass</code> 等等</p><hr><h4 id="如何判断是Class以及拥有V-table"><a href="#如何判断是Class以及拥有V-table" class="headerlink" title="如何判断是Class以及拥有V-table"></a>如何判断是Class以及拥有V-table</h4><p>我们拿到 <code>Class Flag</code> , <code>0x80000050</code>为例 ，其中低5位是 <code>0x50 = 10000 = 16(十进制)</code>, 在 <code>ContextDescriptorKind</code> 当中，16 代表 <code>Class</code></p><p> 高16位为 <code>0x8000 = 10000000000000</code> , 在 <code>TypeContextDescriptorFlags</code> 中，第16位为1 则代表 <code>Class_HasVTable</code>, 所以 <code>swiftType.flag &amp; 0x80000050) == 0x80000050</code> 成立也就是具有 <code>V-Table</code> 的类</p><hr><h3 id="如何知道函数中是否调用了某个Class"><a href="#如何知道函数中是否调用了某个Class" class="headerlink" title="如何知道函数中是否调用了某个Class?"></a><strong>如何知道函数中是否调用了某个Class?</strong></h3><p>在二进制文件中，函数都是4个字节的汇编指令内容，所有的指令都是按地址顺序执行，因此函数都是连续的并且无论有多少 <code>if else</code> 多少 <code>return</code> ，函数只存在一个ret指令位于函数指令结尾</p><p>因此当遇到 <code>ret</code> 的时候就可以认为函数结束 </p><font color="#54d530">引用类会将类的地址放入寄存器中，类的地址是 `classref` 中记录的地址，并且，如果类的地址如果低12位为0，则会将类地址一次性放入寄存器。如果低12位不为0，则会先将高位存入寄存器中，再将低12位存入寄存器中，经过运算加法形成真正的地址</font><p><img src="https://raw.githubusercontent.com/krystal1110/markdownPic/master/tuchuang20220620140706.png"></p><p><strong>在函数范围内，先查看是否直接命中目标函数地址，如果命中则认为类被调用，如果没有直接命中则查看是否先命中高位，再命中低位，如果都命中，则认为类被调用。细心的同学可能会发现，假设存在高位命中了，但是低位被其他地址命中了，则会存在被误报的情况</strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>Swift</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-OOM产生的原因</title>
    <link href="/2021/08/08/iOS-OOM%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/08/iOS-OOM%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是OOM"><a href="#什么是OOM" class="headerlink" title="什么是OOM"></a>什么是<code>OOM</code></h4><p><code>out-of-memory</code> 内存超过限制，iOS的<code>Jetsam</code>机制造成的一种<code>Crash</code>，这种另类<code>Crash</code>，通过通过<code>Signal</code>捕获等方法无法捕获</p><h4 id="什么又是FOOM"><a href="#什么又是FOOM" class="headerlink" title="什么又是FOOM"></a>什么又是<code>FOOM</code></h4><p><code>Foreground-out-of-memory</code> App在前台因消耗内存过多而引起的系统强杀</p><h4 id="什么是JetSam机制"><a href="#什么是JetSam机制" class="headerlink" title="什么是JetSam机制"></a>什么是<code>JetSam</code>机制</h4><p><code>JetSam</code>机制是操作系统为了控制内存资源过度所建立的一种管理机制，<code>JetSam</code>是一个独立的进程，每一个进程都会有一个阈值，一旦超过这个值，<code>JetSam</code>就会杀死这个进程，设备的内存是有限制的，并不是无限大的，所以内存资源非常重要。系统进程及用户使用的其他app的进程都会争抢这个资源。由于iOS不支持交换空间，一旦触发低内存事件，<code>Jetsam</code>就会尽可能多的释放应用占用的内存，这样在iOS系统上出现系统内存不足时，应用就会被系统终止。</p><h4 id="交换空间"><a href="#交换空间" class="headerlink" title="交换空间"></a>交换空间</h4><p>物理内存不够使用该怎么办呢？像一些桌面操作系统，会有内存交换空间，在window上称为虚拟内存。它的机制是，在需要时能将物理内存中的一部分交换到硬盘上去，利用硬盘空间扩展内存空间。</p><h4 id="iOS不支持交换空间"><a href="#iOS不支持交换空间" class="headerlink" title="iOS不支持交换空间"></a>iOS不支持交换空间</h4><p>但iOS并不支持交换空间，大多数移动设备都不支持交换空间。移动设备的大容量存储器通常是闪存，它的读写速度远远小于电脑所使用的硬盘，这就导致在移动设备上就算使用了交换空间，也并不能提升性能。其次，移动设备的容量本身就经常短缺、内存的读写寿命也有限，所以不适合拿闪存来做内存交换</p><h4 id="典型app内存类型"><a href="#典型app内存类型" class="headerlink" title="典型app内存类型"></a>典型app内存类型</h4><p>当内存不足的时候，系统会按照一定策略来腾出更多空间供使用，比较常见的做法是将一部分低优先级的数据挪到磁盘上，这个操作称为Page Out。之后当再次访问到这块数据的时候，系统会负责将它重新搬回内存空间中，这个操作称为Page In。</p><h4 id="Clean-Memory"><a href="#Clean-Memory" class="headerlink" title="Clean Memory"></a>Clean Memory</h4><p>Clean Memory是指那些可以用以Page Out的内存，只读的内存映射文件，或者是App所用到的frameworks。每个frameworks都有_DATA_CONST段，通常他们都是Clean的，但如果用runtime进行swizzling，那么他们就会变Dirty。</p><h4 id="Dirty-Memory"><a href="#Dirty-Memory" class="headerlink" title="Dirty Memory"></a>Dirty Memory</h4><p>Dirty Memory是指那些被App写入过数据的内存，包括所有堆区的对象、图像解码缓冲区，同时，类似Clean memory，也包括App所用到的frameworks。每个framework都会有_DATA段和_DATA_DIRTY段，它们的内存是Dirty的。</p><p>值得注意的是，在使用framework的过程中会产生Dirty Memory，使用单例或者全局初始化方法是减少Dirty Memory不错的方法，因为单例一旦创建就不会销毁，全局初始化方法会在类加载时执行。</p><h4 id="Compressed-Memory"><a href="#Compressed-Memory" class="headerlink" title="Compressed Memory"></a>Compressed Memory</h4><p>由于闪存容量和读写寿命的限制，iOS 上没有交换空间机制，取而代之使用Compressed memory。</p><p>Compressed memory是在内存紧张时能够将最近使用过的内存占用压缩至原有大小的一半以下，并且能够在需要时解压复用。它在节省内存的同时提高了系统的响应速度，特点总结起来如下：</p><p>Shrinks memory usage 减少了不活跃内存占用 Improves power efficiency 改善电源效率，通过压缩减少磁盘IO带来的损耗 Minimizes CPU usage 压缩&#x2F;解压十分迅速，能够尽可能减少 CPU 的时间开销 Is multicore aware 支持多核操作 例如，当我们使用Dictionary去缓存数据的时候，假设现在已经使用了3页内存，当不访问的时候可能会被压缩为1页，再次使用到时候又会解压成3页。</p><p>本质上，<code>Compressed memory</code>也是<code>Dirty memory</code>。<br>因此， <code>memory footprint = dirty size + compressed size</code> ，这也就是我们需要并且能够尝试去减少的内存占用。</p><h4 id="出现OOM前一定会出现Memory-Warning么？"><a href="#出现OOM前一定会出现Memory-Warning么？" class="headerlink" title="出现OOM前一定会出现Memory Warning么？"></a>出现OOM前一定会出现<code>Memory Warning</code>么？</h4><p>答案是不一定，有可能瞬间申请了大量内存，而恰好此时主线程在忙于其他事情，导致可能没有经历过Memory Warning就发生了OOM。当然即便出现了多次Memory Warning后，也不见得会在最后一次Memory Warning的几秒钟后出现OOM。之前做extension开发的时候，就经常会出现Memory Warnning，但是不会出现OOM，再操作一两分钟后，才出现OOM，而在这一两分钟内，没有再出现过Memory Warning。</p><p>当然在内存警告时，处理内存，可以在一定程度上避免出现OOM。</p><h4 id="开始分析系统的JetSam"><a href="#开始分析系统的JetSam" class="headerlink" title="开始分析系统的JetSam"></a>开始分析系统的<code>JetSam</code></h4><p><code>bsd_init</code>当中找到初始化<code>JetSam</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// iOS上独有的特性，内存和进程的休眠的常驻监控线程</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_FREEZE   <span class="hljs-comment">// 这个宏是内核会对进程进行冷冻而不是kill掉</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_MEMORYSTATUS</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">error</span> <span class="hljs-string">&quot;CONFIG_FREEZE defined without matching CONFIG_MEMORYSTATUS&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">/* Initialise background freezing */</span><br>    <span class="hljs-built_in">bsd_init_kprintf</span>(<span class="hljs-string">&quot;calling memorystatus_freeze_init\n&quot;</span>);<br>    <span class="hljs-built_in">memorystatus_freeze_init</span>(); <span class="hljs-comment">//从内核中开启优先级最高的线程来监控整个系统的内存情况</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//iOS独有，JetSAM（即低内存事件的常驻监控线程）</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_MEMORYSTATUS</span><br>    <span class="hljs-comment">/* Initialize kernel memory status notifications */</span><br>    <span class="hljs-built_in">bsd_init_kprintf</span>(<span class="hljs-string">&quot;calling memorystatus_init\n&quot;</span>);<br>    <span class="hljs-built_in">memorystatus_init</span>(); <span class="hljs-comment">//从内核中开启优先级最高的线程来监控整个系统的内存情况</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_MEMORYSTATUS */</span></span><br></code></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>在内核里面所有的进程都有一个优先级，通过一个数组维护，数组的每一项是一个进程的列表也就是<code>memstat_bucket</code>。这个数组的大小则是<code>JETSAM_PRIORITY_MAX + 1</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEMSTAT_BUCKET_COUNT (JETSAM_PRIORITY_MAX + 1)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">memstat_bucket</span> &#123;<br>    <span class="hljs-built_in">TAILQ_HEAD</span>(, proc) list; <span class="hljs-comment">//一个TAILQ_HEAD的双向链表用来存放优先级</span><br>    <span class="hljs-type">int</span> count; <span class="hljs-comment">//进程个数</span><br>    <span class="hljs-type">int</span> relaunch_high_count;<br>&#125; <span class="hljs-type">memstat_bucket_t</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">memstat_bucket_t</span> memstat_bucket[MEMSTAT_BUCKET_COUNT]; <span class="hljs-comment">//优先级队列(里面包含不同优先级的结构)    </span><br></code></pre></td></tr></table></figure><p>在这里可以看到优先级数字，其中<code>SpringBoard</code>就<code>JETSAM_PRIORITY_HOME</code>,后台应用程序为<code>JETSAM_PRIORITY_BACKGROUND</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb50ee7d685846d1ad3b6ac2c1496a4e~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><h4 id="回到-memorystatus-init"><a href="#回到-memorystatus-init" class="headerlink" title="回到 memorystatus_init"></a>回到 <code>memorystatus_init</code></h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">jetsam_threads = zalloc<span class="hljs-constructor">_permanent(<span class="hljs-params">sizeof</span>(<span class="hljs-params">struct</span> <span class="hljs-params">jetsam_thread_state</span>)</span><span class="hljs-operator"> *</span><br><span class="hljs-operator"></span><br><span class="hljs-operator"></span>max_jetsam_threads, <span class="hljs-constructor">ZALIGN(<span class="hljs-params">struct</span> <span class="hljs-params">jetsam_thread_state</span>)</span>);<br><br><br><span class="hljs-comment">/* Initialize all the jetsam threads */</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_jetsam_threads; i++) &#123;<br><br><span class="hljs-comment">// max_jetsam_threads 性能差为1个 ，普通为3个</span><br>jetsam_threads<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.inited = FALSE;<br>jetsam_threads<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.index = i;<br><br><br><span class="hljs-comment">//这些线程的优先级是内核所能分配的最高级95 MAXPRI_KERNEL  (XNU的线程优先级为0-127)</span><br>result = kernel<span class="hljs-constructor">_thread_start_priority(<span class="hljs-params">memorystatus_thread</span>, NULL, 95 <span class="hljs-operator">/</span><span class="hljs-operator">*</span> MAXPRI_KERNEL <span class="hljs-operator">*</span><span class="hljs-operator">/</span>, &amp;<span class="hljs-params">jetsam_threads</span>[<span class="hljs-params">i</span>].<span class="hljs-params">thread</span>)</span>;<br><span class="hljs-keyword">if</span> (result != KERN_SUCCESS) &#123;<br>     panic(<span class="hljs-string">&quot;Could not create memorystatus_thread %d&quot;</span>, i);<br>&#125;<br>     thread<span class="hljs-constructor">_deallocate(<span class="hljs-params">jetsam_threads</span>[<span class="hljs-params">i</span>].<span class="hljs-params">thread</span>)</span>;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="来到-memorystatus-thread"><a href="#来到-memorystatus-thread" class="headerlink" title="来到 memorystatus_thread"></a>来到 <code>memorystatus_thread</code></h4><p>系统中会有一个线程专门来管理内存状态，当内存出现问题或者压力过大时，将会通过一些方法来干掉APP回收内存</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbac5549ff7249d4a21f8c009ef12be8~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><p><code>memorystatus_action_needed()</code>是触发OOM的核心判断条件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f9f965fa5194490b1a56a272bd7f2d2~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><h4 id="我们来到-is-reason-thrashing"><a href="#我们来到-is-reason-thrashing" class="headerlink" title="我们来到 is_reason_thrashing"></a>我们来到 <code>is_reason_thrashing</code></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a731f7cd91614b75b3c0cf852819ccea~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><h4 id="memorystatus-action-needed为true来到了Highwater"><a href="#memorystatus-action-needed为true来到了Highwater" class="headerlink" title="memorystatus_action_needed为true来到了Highwater"></a><code>memorystatus_action_needed</code>为true来到了<code>Highwater</code></h4><p>来到这里证明当前内存紧张，来到<code>memorystatus_act_on_hiwat_processes</code></p><h4 id="memorystatus-act-on-hiwat-processes"><a href="#memorystatus-act-on-hiwat-processes" class="headerlink" title="memorystatus_act_on_hiwat_processes"></a><code>memorystatus_act_on_hiwat_processes</code></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a3a8aed30452e9f5d3e8610538d97~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><p>则会调用<code>memorystatus_kill_hiwat_proc</code></p><ol><li>优先级队列里面取出优先级最低的进程</li><li>while循环查找进程的内存是否高于阈值</li><li>如果高于则通过<code>memorystatus_do_kill</code>杀掉这个进程，并结束循环</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37ebcdf7faa64f049020f209fd3fc070~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><p>如果经过了<code>Highwater</code>还是没有办法结束进程，将来到<code>memorystatus_act_aggressive</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d74e199fadb4df0ad63134f4c79ec4e~tplv-k3u1fbpfcp-zoom-1.image" alt="imagepng"></p><h4 id="memorystatus-act-aggressive-也就是我们所经常遇到的OOM"><a href="#memorystatus-act-aggressive-也就是我们所经常遇到的OOM" class="headerlink" title="memorystatus_act_aggressive 也就是我们所经常遇到的OOM"></a><code>memorystatus_act_aggressive</code> 也就是我们所经常遇到的OOM</h4><p>这部分代码太多 我就贴关键的代码了</p><h4 id="如果上面memorystatus-act-aggressive函数没有杀死任何进程，那么就需要通过LRU来杀死Jetsam队列中的第一个进程"><a href="#如果上面memorystatus-act-aggressive函数没有杀死任何进程，那么就需要通过LRU来杀死Jetsam队列中的第一个进程" class="headerlink" title="如果上面memorystatus_act_aggressive函数没有杀死任何进程，那么就需要通过LRU来杀死Jetsam队列中的第一个进程"></a>如果上面<code>memorystatus_act_aggressive</code>函数没有杀死任何进程，那么就需要通过<code>LRU</code>来杀死<code>Jetsam</code>队列中的第一个进程</h4><h3 id="总结-系统触发OOM的过程"><a href="#总结-系统触发OOM的过程" class="headerlink" title="总结 - 系统触发OOM的过程"></a>总结 - 系统触发OOM的过程</h3><ol><li><code>JetSam</code>线程初始化完毕，从外部接受到有内存压力</li><li>如果接收到的内存压力是当前物理内存达到限制时，则触发<code>per-process-limit</code>类型的<code>OOM</code>，然后退出流程</li><li>如果接收到内存压力是其他类型时，唤醒<code>JetSam</code>线程，判断当前可用内存紧张则进入<code>OOM</code>逻辑</li><li>首先遍历优先级最低的进程，判断进程是否高于阈值，如果没有高于阈值，则查找比当前优先级高一级的进程，直到找到后，触发<code>high-water</code>类型<code>OOM</code></li><li>如果没有触发<code>high-water</code> ，那就先回收一个优先级较低的进程或者标记为随时可回收的进程</li><li>当所有低优先级进程和随时可回收的进程都被杀掉后，如果<code>memorystatus_available_pages</code>可用内存依然低于正常水平，那就开始杀掉后台进程，每杀掉一个后台进程，则判断一下<code>memorystatus_available_pages</code>可用内存是否还是低于正常水平，如果已经恢复到正常，则挂起线程，等待唤醒</li><li>当所有后台进程都被杀死后，可用内存还是低于正常，那就开始杀掉前台的进程，挂起线程，等待唤醒</li><li>如果上面没有杀掉任何进程，就通过<code>LRU</code>杀死<code>JetSam</code>队列中的第一个进程，挂起线程，等待唤醒</li></ol><h4 id="Matrix如何检测OOM？"><a href="#Matrix如何检测OOM？" class="headerlink" title="Matrix如何检测OOM？"></a><code>Matrix</code>如何检测<code>OOM</code>？</h4><p><code>Matrix</code>采用的是排除法，在每次启动<code>Matrix</code>的时候都会调用<code>[MatrixAppRebootAnalyzer checkRebootType];</code></p><p>来看一下<code>checkRebootType</code>方法中有什么</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs awk">+ (void)checkRebootType &#123;<br>    <span class="hljs-keyword">if</span> ([MatrixDeviceInfo isBeingDebugged]) &#123; <span class="hljs-regexp">//</span> 是否在DEBUG<br>        MatrixInfo(@<span class="hljs-string">&quot;app is being debugged&quot;</span>);<br>        MatrixAppRebootInfo *info = [MatrixAppRebootInfo sharedInstance];<br>        info.isAppCrashed = NO;<br>        info.isAppQuitByExit = NO;<br>        info.isAppQuitByUser = NO;<br>        info.isAppWillSuspend = NO;<br>        info.isAppEnterBackground = NO;<br>        info.isAppEnterForeground = NO;<br>        info.isAppBackgroundFetch = NO;<br>        info.isAppSuspendKilled = NO;<br>        info.isAppMainThreadBlocked = NO;<br>        info.dumpFileName = @<span class="hljs-string">&quot;&quot;</span>;<br>        info.userScene = @<span class="hljs-string">&quot;&quot;</span>;<br>        [info saveInfo];<br>        return;<br>    &#125;<br><br>    MatrixAppRebootInfo *info = [MatrixAppRebootInfo sharedInstance];<br><br>    <span class="hljs-keyword">if</span> (info.isAppCrashed) &#123;<br>        <span class="hljs-regexp">//</span> App是否发生了普通的Crash<br>        s_rebootType = MatrixAppRebootTypeNormalCrash;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.isAppQuitByUser) &#123;<br>        <span class="hljs-regexp">//</span> 是否用户主动退出应用<br>        s_rebootType = MatrixAppRebootTypeQuitByUser;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.isAppQuitByExit) &#123;<br>        <span class="hljs-regexp">//</span> 是否调用了<span class="hljs-keyword">exit</span>相关的函数<br>        s_rebootType = MatrixAppRebootTypeQuitByExit;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.isAppWillSuspend || info.isAppBackgroundFetch) &#123;<br>        <span class="hljs-regexp">//</span> App是否挂起Suspend或者执行了BackgroundFetch<br>        <span class="hljs-keyword">if</span> (info.isAppSuspendKilled) &#123;<br>            s_rebootType = MatrixAppRebootTypeAppSuspendCrash;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            s_rebootType = MatrixAppRebootTypeAppSuspendOOM;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([MatrixAppRebootAnalyzer isAppChange]) &#123;<br>        <span class="hljs-regexp">//</span> App的版本是否发生了改变<br>        s_rebootType = MatrixAppRebootTypeAPPVersionChange;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([MatrixAppRebootAnalyzer isOSChange]) &#123;<br>        <span class="hljs-regexp">//</span> 手机系统是否升级了<br>        s_rebootType = MatrixAppRebootTypeOSVersionChange;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([MatrixAppRebootAnalyzer isOSReboot]) &#123;<br>        <span class="hljs-regexp">//</span> 手机是否重启了<br>        s_rebootType = MatrixAppRebootTypeOSReboot;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.isAppEnterBackground) &#123;<br>        <span class="hljs-regexp">//</span> App是否处于后台<br>        s_rebootType = MatrixAppRebootTypeAppBackgroundOOM;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.isAppEnterForeground) &#123;<br>        <span class="hljs-regexp">//</span> App是否处于前台<br>        <span class="hljs-keyword">if</span> (info.isAppMainThreadBlocked) &#123;<br>            <span class="hljs-regexp">//</span> 主线程是否卡死了 <br>            s_rebootType = MatrixAppRebootTypeAppForegroundDeadLoop;<br>            s_lastDumpFileName = info.dumpFileName;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-regexp">//</span> 触发Foreground OOM<br>            s_rebootType = MatrixAppRebootTypeAppForegroundOOM;<br>            s_lastDumpFileName = @<span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        s_rebootType = MatrixAppRebootTypeOtherReason;<br>    &#125;<br></code></pre></td></tr></table></figure><p>现在所遇到的<code>OOM</code>主要都是<code>FOOM</code>，因为优先级的缘故，App在后台的时候，即使占用内存很少，也有可能被前台应用过多占用内存而被杀死，所以关注的点上还是要在<code>FOOM</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/TuGeLe/article/details/104004692">深入了解iOS中的OOM(低内存崩溃)</a></p><p>(<a href="http://www.cocoachina.com/index.php/articles/485753">你真的了解OOM吗？——京东iOS APP内存优化实录</a>)</p><p><a href="https://juejin.cn/post/6844903749836603400">iOS Out-Of-Memory 原理阐述及方案调研</a></p><p><a href="https://wetest.qq.com/lab/view/367.html">iOS微信内存监控</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-编译过程梳理</title>
    <link href="/2021/08/02/iOS-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E6%A2%B3%E7%90%86/"/>
    <url>/2021/08/02/iOS-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-编译过程梳理"><a href="#iOS-编译过程梳理" class="headerlink" title="iOS 编译过程梳理"></a>iOS 编译过程梳理</h1><p>编译语言在执行的时候，必须先通过编译器生成机器码，机器码可以直接在 CPU 上执行，所以执行效率很高。</p><h2 id="编译器的概述"><a href="#编译器的概述" class="headerlink" title="编译器的概述"></a>编译器的概述</h2><p>编译器的作用是把我们的高级语言转换成机器可以识别的机器码，经典的设计结构如下：</p><p> <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1dwrp77ruj20ki03z0sn.jpg"></p><ul><li>前端（Frontend）：语法分析，语义分析和生成中间代码。在这个过程中，也会对代码进行检查，如果发现出错的或需要警告的会标注出来。</li><li>优化器（Optimizer）：会进行 BitCode 的生成，链接期优化等工作。</li><li>后端（Backend）：针对不同的架构，生成对应的机器码。</li></ul><h2 id="Clang-LLVM-的编译过程"><a href="#Clang-LLVM-的编译过程" class="headerlink" title="Clang + LLVM 的编译过程"></a>Clang + LLVM 的编译过程</h2><ol><li><strong>预处理阶段</strong>：import 头文件替换；macro 宏展开；处理预编译指令</li><li><strong>词法分析</strong>：预处理完成后进入词法分析，将输入的代码转化为一系列符合特定语言的词法单元（token 流）。</li><li><strong>语法分析</strong>：将词法分析得到的 token 流进行语法静态分析（Static Analysis），输出<strong>抽象语法树（AST）</strong>，过程中会校验语法是否错误。</li><li><strong>CodeGen 生成 IR 中间代码</strong>：CodeGen 负责将语法树自顶向下遍历翻译成 <code>LLVM IR</code>，<code>IR</code> 是编译过程中前端的输出后端的输入。</li><li><strong>Optimize 优化 IR</strong>：到这里 LLVM 会做一些优化工作，在 Xcode 的编译设置里可以设置优化级别 -01, -03, -0s，也可以写自己的 Pass，Pass 是 LLVM 优化工作的一个节点，一个节点做些事，一起加起来就构成了 LLVM 完整的优化和转化。附件：<a href="http://llvm.org/docs/WritingAnLLVMPass.html">官方 Pass 教程</a>。</li><li><strong>LLVM Bitcode 生成字节码</strong>：如果开启了 bitcode，苹果会做进一步优化。若有新的后端架构，依旧可以用这份优化过的 bitcode 去生成。</li><li><strong>生成汇编</strong></li><li><strong>生成目标文件</strong></li><li><strong>生成可执行文件</strong></li></ol><h2 id="Xcode-Build-的流程"><a href="#Xcode-Build-的流程" class="headerlink" title="Xcode Build 的流程"></a>Xcode Build 的流程</h2><p>我们在 Xcode 中使用 <strong>Command + B</strong> 或 <strong>Command + R</strong> 时，即完成了一次编译，来看下这个过程做了哪些事情。</p><p>编译过程分为四个步骤：</p><ul><li>预编译（Pre-process）：宏替换、删除注释、展开头文件，产生 .i 文件。</li><li>编译（Compliling）：把前面生成的 .i 文件转化为汇编语言，产生 .s 文件。</li><li>汇编（Asembly）：把汇编语言 .s 文件转化为机器码文件，产生 .0 文件。</li><li>链接（Link）：对 .o 文件中的对于其他库的引用的地方进行引用，生成最后的可执行文件。也包括多个 .o 文件进行 link。</li></ul><p>通过解析 Xcode 编译 log，可以发现 Xcode 是根据 Target 进行编译的。我们可以通过 Xcode 中的 Build Phases、Build Settings 及 Build Rules 来控制编译过程。</p><ul><li>Build Settings：这一栏下是对编译的细节进行设定，包含 build 过程的每个阶段的设置选项（包含编译、链接、代码签名、打包）。</li><li>Build Phases：用于控制从源文件到可执行文件的整个过程，如编译哪些文件，编译过程中执行哪些自定义脚本。例如 CocoaPods 在这里会进行相关配置。</li><li>Build Rules：指定了不同的文件类型该如何编译。一般我们不需要修改这里的内容。如果需要对特定类型的文件添加处理方法，可以在这里添加规则。</li></ul><p>每个 Target 的具体编译过程也可以通过 log 日志获得。大致过程为：</p><ul><li>编译信息写入辅助文件（如Entitlements.plist），创建编译后的文件架构</li><li>写入辅助信息（.hmap 文件）。将项目的文件结构对应表、将要执行的脚本、项目依赖库的文件结构对应表写成文件。</li><li>运行预设的脚本。如 Cocoapods 会在 Build Phases 中预设一些脚本（CheckPods Manifest.lock）。</li><li>编译 .m 文件，生成可执行文件 Mach-O。每次进行了 LLVM 的完整流程：前端（词法分析 - 语法分析 - 生成 IR）、优化器（优化 IR）、后端（生成汇编 - 生成目标文件 - 生成可执行文件）。使用 <code>CompileC</code> 和 <code>clang</code> 命令。 CompileC 是 xcodebuild 内部函数的日志记录表示形式，它是 build.log 文件中有关编译的基本信息来源。</li><li>链接需要的库。如 Foundation.framework，AFNetworking.framework…</li><li>拷贝资源文件到目标包</li><li>编译 storyboard 文件</li><li>链接 storyboard 文件</li><li>编译 Asset 文件。如果使用 Asset.xcassets 来管理图片，这些图片会被编译为机器码，除了 icon 和 launchIamge。</li><li>处理 infoplist</li><li>执行 CocoaPods 脚本，将在编译项目前已编译好的依赖库和相关资源拷贝到包中。</li><li>拷贝 Swift 标准库</li><li>创建 .app 文件并对其签名</li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-系统内存泄露</title>
    <link href="/2021/07/01/iOS-%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <url>/2021/07/01/iOS-%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p>下面是复现泄漏的测试代码，<code>JYObject</code>是一个没有任何多余代码的类，继承自<code>NSObject</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">JYObject * jyobject = [JYObject <span class="hljs-keyword">new</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span> * <span class="hljs-number">1000</span>; ++i) &#123;<br>    id value = @<span class="hljs-string">&quot;JY&quot;</span>;<br>    [jyobject validateValue:&amp;value forKey:@<span class="hljs-string">&quot;notexistkey&quot;</span> error:nil];<br>&#125;<br></code></pre></td></tr></table></figure><p>当对一个没有实现校验方法的key进行<code>validateValue</code>时，就会有少量内存泄漏。如果执行很多次，结果还是很可观的。上面的代码会让内存飙到160M。</p><h4 id="定位泄漏源"><a href="#定位泄漏源" class="headerlink" title="定位泄漏源"></a>定位泄漏源</h4><p>这个泄漏使用Instruments的Leaks模版可以很快的发现，但是代码却不好定位。下面是Leaks报告的泄漏截图。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1nksnswpjj20yg06hwf7.jpg"></p><p>可以看出，泄漏发生在<code>validateValue:forKey:error:</code>，再细看右边的调用栈，可以看到这块内存是由<code>malloc</code>分配的。所以很有可能是这个系统方法内部发生了泄漏。</p><p>可以看出，泄漏发生在<code>validateValue:forKey:error:</code>，再细看右边的调用栈，可以看到这块内存是由<code>malloc</code>分配的。所以很有可能是这个系统方法内部发生了泄漏。</p><h4 id="使用符号断点深入观察系统方法"><a href="#使用符号断点深入观察系统方法" class="headerlink" title="使用符号断点深入观察系统方法"></a>使用符号断点深入观察系统方法</h4><p>首先使用符号断点，让程序在<code>validateValue:forKey:error:</code>处停下。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/17/162d197750bcc39e~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>运行程序，命中断点后，我们就可以观察<code>validateValue:forKey:error:</code>的汇编代码了。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/17/162d197750e0badd~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h4 id="寻找Leak的内存来源"><a href="#寻找Leak的内存来源" class="headerlink" title="寻找Leak的内存来源"></a>寻找Leak的内存来源</h4><p>在汇编代码中，我发现了一个malloc调用和一个free调用。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x1048272ef</span> &lt;+<span class="hljs-number">63</span>&gt;:  callq  <span class="hljs-number">0x10498b1da</span>               <span class="hljs-comment">; symbol stub for: malloc</span><br>...<br><span class="hljs-number">0x104827389</span> &lt;+<span class="hljs-number">217</span>&gt;: callq  <span class="hljs-number">0x10498b066</span>               <span class="hljs-comment">; symbol stub for: free</span><br>复制代码<br></code></pre></td></tr></table></figure><p>通过单步调试发现，malloc出来的内存主要用来存储key，并且把首字母变成大写，应该是为了方便构成<code>validate&lt;Key&gt;:error:</code>的selector name。不过如果对象上没有校验这个key的方法，那么代码会直接jump到free调用的下二行。这样这个内存块就永远不会被释放了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x104827390</span> &lt;+<span class="hljs-number">224</span>&gt;: movb   $<span class="hljs-number">0</span>x1, %r14b<br></code></pre></td></tr></table></figure><p>当我们给LeakObject加上notexistkey的校验方法后，单步可以发现free被调用。下面是增加的校验方法。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">- (BOOL)validateNotexistkey:(<span class="hljs-built_in">id</span> *)value <span class="hljs-keyword">error</span>:(NSError **)<span class="hljs-keyword">error</span> &#123;<br><span class="hljs-built_in">    return</span> YES;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这次泄漏的寻找过程，大致可以分为</p><ol><li>使用Instruments Leak模版初步定位</li><li>使用符号断点深入泄漏方法，如果泄漏的方法不是系统或者第三方静态（动态）库的方法，就不用这么麻烦了。</li><li>关注泄漏内存块的分配释放方式，在源码或者汇编代码中寻找匹配的内存块。 由于这次泄漏的仅仅是malloc内存块，所以OC的引用计数记录并不能起什么作用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>iOS日常问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-线程数量监控</title>
    <link href="/2021/07/01/iOS-%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F%E7%9B%91%E6%8E%A7/"/>
    <url>/2021/07/01/iOS-%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<p>在iOS开发中，我们会经常开辟新的线程去做一些事，如何合理的开辟线程，在App开发阶段，监控线程的开辟数量，避免线上发生意外情况。 </p><p>当线程过多或瞬间创建大量子线程(线程爆炸)，就在控制台打印信息，并记录信息。</p><ol><li><p>创建子线程过多，是会造成性能问题的，因为创建线程需要占用内存空间（默认的情况下，主线程占1M,子线程占用512KB）。</p></li><li><p>不合理创建和使用线程，容易引发数据一致性（线程安全）和死锁问题。</p></li></ol><p>因为在iOS中基本上都是使用的<code>p_thread</code>，在<code>Mach</code>层中<code>thread_basic_info</code> 结构体封装了单个线程的基本信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct thread_basic_info &#123;<br>    time_value_t  user_time;      /* user run time */<br>    time_value_t  system_time;    /* system run time */<br>    integer_t    cpu_usage;       /* scaled cpu usage percentage */<br>    policy_t     policy;          /* scheduling policy in effect */<br>    integer_t    run_state;       /* run state (see below) */<br>    integer_t    flags;           /* various flags (see below) */<br>    integer_t    suspend_count;   /* suspend count for thread */<br>    integer_t    sleep_time;      /* number of seconds that thread  has been sleeping */<br>&#125;<br></code></pre></td></tr></table></figure><p>一个<code>Mach Task</code>包含它的线程列表。内核提供了<code>task_threads</code> API 调用获取指定 task 的线程列表，然后可以通过<code>thread_info</code> API调用来查询指定线程的信息，在 thread_act.h 中有相关定义。</p><p><code>task_threads</code> 将<code>target_task</code> 任务中的所有线程保存在<code>act_list</code>数组中，act_listCnt表示线程个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">kern_return_t task_threads<br>(<br>    task_t target_task,<br>    thread_act_array_t *act_list,<br>    mach_msg_type_number_t *act_listCnt<br>);<br></code></pre></td></tr></table></figure><p> <code>thread_info</code>结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">kern_return_t</span> <span class="hljs-title">thread_info</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">thread_act_t</span> target_act,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">thread_flavor_t</span> flavor,  <span class="hljs-comment">// 传入不同的宏定义获取不同的线程信息</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">thread_info_t</span> thread_info_out,  <span class="hljs-comment">// 查询到的线程信息</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">mach_msg_type_number_t</span> *thread_info_outCnt  <span class="hljs-comment">// 信息的大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p> 如果频繁调用<code>task_threads</code>函数，来获取线程数量和增长速度，大量调用这个函数会造成一定的性能问题</p><p>通过<code>hook</code>线程的创建和销毁，来监听线程的数量</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//在#include &lt;pthread/introspection.h&gt;文件里</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">定义函数指针：pthread_introspection_hook_t</span><br><span class="hljs-comment">event  : 线程处于的生命周期（下面枚举了线程的4个生命周期）</span><br><span class="hljs-comment">thread ：线程</span><br><span class="hljs-comment">addr   ：线程栈内存基址</span><br><span class="hljs-comment">size   ：线程栈内存可用大小</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*<span class="hljs-type">pthread_introspection_hook_t</span>)</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> event,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">pthread_t</span> thread, <span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> size)</span></span>;<br><br><span class="hljs-keyword">enum</span> &#123;<br>PTHREAD_INTROSPECTION_THREAD_CREATE = <span class="hljs-number">1</span>, <span class="hljs-comment">//创建线程</span><br>PTHREAD_INTROSPECTION_THREAD_START, <span class="hljs-comment">// 线程开始运行</span><br>PTHREAD_INTROSPECTION_THREAD_TERMINATE,  <span class="hljs-comment">//线程运行终止</span><br>PTHREAD_INTROSPECTION_THREAD_DESTROY, <span class="hljs-comment">//销毁线程</span><br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">看这个函数名，很像我们平时hook函数一样的。</span><br><span class="hljs-comment">返回值是上面声明的pthread_introspection_hook_t函数指针：返回原线程生命周期函数。</span><br><span class="hljs-comment">参数也是函数指针：传入的是我们自定义的线程生命周期函数</span><br><span class="hljs-comment">*/</span><br>__attribute__((__nonnull__, __warn_unused_result__))<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-type">pthread_introspection_hook_t</span></span><br><span class="hljs-function"><span class="hljs-title">pthread_introspection_hook_install</span><span class="hljs-params">(<span class="hljs-type">pthread_introspection_hook_t</span> hook)</span></span>;<br><br></code></pre></td></tr></table></figure><h4 id="下面开始写一个Monitor"><a href="#下面开始写一个Monitor" class="headerlink" title="下面开始写一个Monitor"></a>下面开始写一个<code>Monitor</code></h4><p>先来定义一些参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">static pthread_introspection_hook_t original_pthread_introspection_hook_t = NULL;<br><br>/// 创建信号量<br>static dispatch_semaphore_t semaphore;<br><br>/// 线程总数<br>static int threadCount = 0;<br><br>/// 是否开启监控<br>static bool isMonitor = false;<br><br>/// 线程总数阈值<br>static int averageThreadCount = 40;<br><br>/// 线程在一定时间内新增数<br>static int newThreadCount = 0;<br><br>/// 线程在一定时间内新增阈值<br>static int newAverageThreadCount = 10;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/// 开启监控<br>+ (void)startMonitor&#123;<br>    // 创建信号量 最大并发数为1<br>    semaphore = dispatch_semaphore_create(1);<br>    // 等待<br>    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);<br>    <br>    mach_msg_type_number_t count;<br>    thread_act_array_t threads;<br>    // 获取到count<br>    task_threads(mach_task_self(), &amp;threads, &amp;count);<br>   <br>    // 保证加锁的时候，线程数量不变<br>    threadCount = count;<br>    <br>    // 添加🪝钩子函数<br>    original_pthread_introspection_hook_t = pthread_introspection_hook_install(kry_pthread_introspection_hook_t);<br>    <br>    // 解锁 信号量+1<br>    dispatch_semaphore_signal(semaphore);<br>    <br>    // 开始监控<br>    isMonitor = true;<br>    <br>    <br>    // 开启一个定时器 检测每秒线程创建 然后通过clearNewThreadCount置位0<br>    const char *queenIdentifier = dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL);<br>    if (queenIdentifier == dispatch_queue_get_label(dispatch_get_main_queue())) &#123;<br>        [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(clearNewThreadCount) userInfo:nil repeats:YES];<br>    &#125;else&#123;<br>        dispatch_async(dispatch_get_main_queue(), ^&#123;<br>        [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(clearNewThreadCount) userInfo:nil repeats:YES];<br>        &#125;);<br>    &#125;<br>&#125;<br><br>// 当前线程总数<br>+ (int)currentThreadCount&#123;<br>    return threadCount;<br>&#125;<br><br>void kry_pthread_introspection_hook_t(unsigned int event,<br>                                      pthread_t thread, void *addr, size_t size)&#123;<br>    <br>    // 正常调用原有逻辑<br>    if (original_pthread_introspection_hook_t) &#123;<br>        original_pthread_introspection_hook_t(event,thread,addr,size);<br>    &#125;<br>    <br>    // 开始记录<br>    <br>    // 如果是创建线程,则线程的数量+1，新增数+1<br>    if (event == PTHREAD_INTROSPECTION_THREAD_CREATE) &#123;<br>        threadCount +=1;<br>        if (isMonitor &amp;&amp; threadCount &gt; averageThreadCount) &#123;<br>            // 总数 超过阈值 警告或者记录堆栈<br>            kry_Log_CallStack(false, 0);<br>        &#125;<br>        <br>        newThreadCount +=1;<br>        if (isMonitor &amp;&amp; newThreadCount &gt; newAverageThreadCount) &#123;<br>            // 新增数 超过阈值 警告或者记录堆栈<br>            kry_Log_CallStack(true, newThreadCount);<br>        &#125;<br>    &#125;<br>    <br>    <br>    // 销毁线程，则线程数量-1，新增数-1<br>    if (event == PTHREAD_INTROSPECTION_THREAD_DESTROY) &#123;<br>        threadCount -=1;<br>       <br>        if (newThreadCount &gt; 0 ) &#123;<br>            newThreadCount -=1;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><br>void kry_Log_CallStack(bool isIncreaseLog, int num)<br>&#123;<br>    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);<br>    if (isIncreaseLog) &#123;<br>        printf(&quot;\n🔥一秒钟开启 %d 条线程！！！！\n&quot;, num);<br>    &#125;<br>    // 可以记录堆栈信息<br>    dispatch_semaphore_signal(semaphore);<br>&#125;<br><br>+ (void)clearNewThreadCount&#123;<br>    newThreadCount = 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很简单，都有注释，近期在看PCL的堆栈记录，后期会把堆栈记录完善上去</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.jianshu.com/p/95df83780c8f">APP性能检测方案汇总</a></p><p><a href="https://juejin.cn/post/6844904122248855560">iOS线程数量监控工具</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-自定义Section延迟load加载</title>
    <link href="/2021/07/01/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89Section%E5%BB%B6%E8%BF%9Fload%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/07/01/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89Section%E5%BB%B6%E8%BF%9Fload%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="在指定的segment和section中存入数据"><a href="#在指定的segment和section中存入数据" class="headerlink" title="在指定的segment和section中存入数据"></a>在指定的segment和section中存入数据</h4><p>之前我们已经了解过<code>machO</code>的结构了，那么我们有没有办法去修改或者新增<code>segment</code>和<code>section</code>当中的数据呢，答案是可以的，使用<code>__attribute__ section</code>将指定的数据存储到指定的<code>segmemt</code>和<code>section</code>中，也可以在通过在<code>Build Settings</code>中的<code>Other Linker Flags</code>设置链接参数，从而达到移动段，新增段，赋予权限等操作</p><h4 id="attribute-的用法"><a href="#attribute-的用法" class="headerlink" title=" __attribute__的用法"></a><code> __attribute__</code>的用法</h4><p><code>__attribute__</code> 可以用来设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）</p><ul><li><code>__attribute__((format()))</code> 按照指定格式进行参数检查。</li></ul><hr><ul><li><code>__attribute__((__always_inline__))</code> 强制内联。</li></ul><hr><ul><li><code>__attribute__((deprecated(&quot;Use xxx: instead&quot;)</code> 这个可能是我们见的比较多的，用来标记某个方法已经被废弃了，需要用其它的方法代替。</li></ul><hr><ul><li><code>__attribute__((__unused__))</code> 标记函数或变量可能不会用到。</li></ul><hr><ul><li><p><code>__attribute__((visibility(&quot;visibility_type&quot;)))</code> 标记动态库符号是否可见，有以下取值：</p><pre><code class="hljs">   1.  `default` 符号可见，可导出。          2.  `hidden` 符号隐藏，不可导出，只能在本动态库内调用。</code></pre></li></ul><hr><ul><li><code>__attribute__((objc_designated_initializer))</code> 明确指定用于初始化的方法。一个优秀的设计，初始化接口可以有多个，但最终多个初始化初始化接口都会调用 <code>designed initializer</code> 方法。</li></ul><hr><ul><li><code>__attribute__((unavailable))</code>、<code>__attribute__((unavailable(&quot;Must use xxx: instead.&quot;)));</code> 标记方法被禁用，不能直接调用，但这并不意味着该方法不能被调用，在 Objective-C 中使用 runtime 依然可以调用。</li></ul><hr><ul><li><code>__attribute__((section(&quot;segment,section&quot;)))</code> 将一个指定的数据储存到我们需要的 segment 和 section 中。</li></ul><hr><ul><li><code>__attribute__((constructor))</code> 被 <code>attribute((constructor))</code> 标记的函数，会在 <code>main</code> 函数之前或动态库加载时执行。在 mach-o 中，被 <code>attribute((constructor))</code> 标记的函数会在 <code>_DATA</code> 段的 <code>__mod_init_func</code> 区中。当多个被标记 <code>attribute((constructor))</code> 的方法想要有顺序的执行，怎么办？<code>attribute((constructor))</code> 是支持优先级的：<code>_attribute((constructor(1)))</code></li></ul><hr><ul><li><code>__attribute__((destructor))</code> 和 <code>attribute((constructor))</code> 相反：被 <code>attribute((destructor))</code> 标记的函数，会在 <code>main</code> 函数退出或动态库卸载时执行。在 mach-o 中此类函数会放在 <code>_DATA</code> 段的 <code>__mod_term_func</code> 区中</li></ul><p>… 还有很多 这里就不一一列举了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">JYProtocolInfo</span>&#123;<br>    <span class="hljs-type">char</span> *className;<br>    <span class="hljs-type">char</span> *method;<br>&#125;;<br><br> <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> JYProtocolRegister(_className_,_method_)\</span><br><span class="hljs-meta">__attribute__((used)) static struct JYProtocolInfo JYProtocolInfo##_className_ \</span><br><span class="hljs-meta">__attribute__ ((used, section (<span class="hljs-string">&quot;__DATA,JYLoadDelayData&quot;</span>))) =\</span><br><span class="hljs-meta">&#123;\</span><br><span class="hljs-meta">    .className = #_className_,\</span><br><span class="hljs-meta">    .method = #_method_,\</span><br><span class="hljs-meta">&#125;;</span><br><br><br>@interface JYLoadDelayTool : NSObject<br><br>+ (<span class="hljs-type">void</span>)readDataFromMachO;<br><br>+ (<span class="hljs-type">void</span>)xxx;<br><br>@end<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">JYProtocolRegister</span>(JYLoadDelayTool,xxx)<br><br>+ (<span class="hljs-type">void</span>)xxx&#123;<br>    <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;123&quot;</span>);<br>&#125;<br><br>+ (<span class="hljs-type">void</span>)readDataFromMachO &#123;<br>   <br>     Dl_info info;<br>     <span class="hljs-built_in">dladdr</span>((__bridge <span class="hljs-type">void</span> *)[self <span class="hljs-keyword">class</span>], &amp;info);<br><br>    <span class="hljs-comment">// 读取__DATA中自定义的ProtocolInfoDataz数据</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LP64__</span><br>        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">mach_header</span> *mhp = (<span class="hljs-keyword">struct</span> mach_header*)info.dli_fbase;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> schemeSize = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">uint32_t</span> *schemeMemory = (<span class="hljs-type">uint32_t</span>*)<span class="hljs-built_in">getsectiondata</span>(mhp, <span class="hljs-string">&quot;__DATA&quot;</span>, <span class="hljs-string">&quot;JYLoadDelayData&quot;</span>, &amp;schemeSize);<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* defined(__LP64__) */</span></span><br>        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">mach_header_64</span> *mhp = (<span class="hljs-keyword">struct</span> mach_header_64*)info.dli_fbase;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> schemeSize = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">uint64_t</span> *schemeMemory = (<span class="hljs-type">uint64_t</span>*)<span class="hljs-built_in">getsectiondata</span>(mhp, <span class="hljs-string">&quot;__DATA&quot;</span>, <span class="hljs-string">&quot;JYLoadDelayData&quot;</span>, &amp;schemeSize);<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* defined(__LP64__) */</span></span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> schemeCounter = schemeSize/<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> JYProtocolInfo);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JYProtocolInfo</span> *items = (<span class="hljs-keyword">struct</span> JYProtocolInfo*)schemeMemory;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>; idx &lt; schemeCounter; ++idx)&#123;<br>        <br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JYProtocolInfo</span> * info = (<span class="hljs-keyword">struct</span> JYProtocolInfo*)&amp;items[idx];<br>        <br>        Class JYClass = <span class="hljs-built_in">NSClassFromString</span>([NSString stringWithUTF8String:info-&gt;className]);<br><br>        SEL sel = <span class="hljs-built_in">NSSelectorFromString</span>([NSString stringWithUTF8String:info-&gt;method]);<br>        <br>        <span class="hljs-built_in">id</span> (*func)(Class, SEL) = (<span class="hljs-built_in">id</span> (*)(Class, SEL))objc_msgSend;<br>       <br>        <span class="hljs-built_in">func</span>(JYClass, sel);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>这样，可以把一些<code>+load</code>的方法都通过指定<code>JYProtocolRegister</code>来加载，这样可以优化启动时间，另外我们APM的监控，应该是最早的，这样在APP启动后的问题都能够检测到，如果<code>load</code>里面的方法有性能问题，而APM监控却是在<code>load</code>之后，那么就会检查不到，所以一些非必要性的<code>load</code>方法可以放在APM之后加载，通过上述方式</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://juejin.cn/post/6980545001126101005">iOS APP 启动优化(六)：在指定的 segment 和 section 中存入数据</a></p><p><a href="https://xiaozhuanlan.com/topic/9204153876">iOS开发之runtime（12）：深入 Mach-O</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-逆向防护</title>
    <link href="/2021/06/01/iOS-%E9%80%86%E5%90%91%E9%98%B2%E6%8A%A4/"/>
    <url>/2021/06/01/iOS-%E9%80%86%E5%90%91%E9%98%B2%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="MethodSwizzle"><a href="#MethodSwizzle" class="headerlink" title="**MethodSwizzle **"></a>**MethodSwizzle **</h3><ul><li>利用OC的运行时（Runtime）特性修改 <code>SEL</code> 和 <code>IMP(函数指针)</code> 的关系，打到Hook OC方法的目的</li><li><code>method_exchangeIMP</code>交换两个 <code>IMP</code></li><li><code>class_replaceMethod</code>替换某个 <code>SEL</code>的 <code>IMP</code> （如果没有该方法就添加，相当于换掉这个方法）</li><li><code>method_getImplementation</code> 、<code>method_setImplementation</code> 获取和设置某个方法的IMP （很多第三方框架都使用）</li></ul><hr><h3 id="MonKey-Hook"><a href="#MonKey-Hook" class="headerlink" title="MonKey Hook"></a>MonKey Hook</h3><p>Monkey中使用了  <code>libsubstrate.dylib</code></p><ul><li><code>method_setImplementation</code></li><li><code>method_getImplementation</code></li></ul><h4 id="MonKey已经替换的系统函数"><a href="#MonKey已经替换的系统函数" class="headerlink" title="MonKey已经替换的系统函数"></a><strong>MonKey已经替换的系统函数</strong></h4><ul><li>dlsym </li><li>sysctl</li><li>ptrace</li></ul><hr><h3 id="Dobby-（修改静态函数-C-和-swift）"><a href="#Dobby-（修改静态函数-C-和-swift）" class="headerlink" title="Dobby （修改静态函数 C 和 swift）"></a>Dobby （修改静态函数 C 和 swift）</h3><ul><li>实际上是替换 <code>Text段</code>   </li><li>动态修改 （加载到内存的时候修改）</li></ul><hr><h3 id="防护-：lldb-ptrace"><a href="#防护-：lldb-ptrace" class="headerlink" title="防护 ：lldb - ptrace"></a>防护 ：<code>lldb - ptrace</code></h3><ul><li><code>ptrace</code> 是 命令行工程以及 Mac OS 工程里的 <code>&lt;sys/ptrace.h&gt;</code>提供的一个函数 , 可以用来来控制进程附加管理 , 它可以实现禁止应用程序进程被附加的效果 . 在 iOS 中并没有暴露出来 , 但是 iOS 是可以使用的 .</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> arg1: ptrace要做的事情: PT_DENY_ATTACH 表示要控制的是当前进程不允许被附加</span><br><span class="hljs-comment"> arg2: 要操作进程的PID , 0就代表自己</span><br><span class="hljs-comment"> arg3: 地址 取决于第一个参数要做的处理不同传递不同</span><br><span class="hljs-comment"> arg4: 数据 取决于第一个参数要做的处理不同传递不同</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">ptrace</span>(PT_DENY_ATTACH, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ul><li><p>效果：</p><ul><li>运行工程 , 程序闪退 .</li><li>从手机点开应用 , 应用正常 .</li><li>使用Xcode 自带的 Debug - Attach to process 发现附加失败</li></ul></li><li><p>破解：</p><ul><li>通过符号断点检测</li><li>使用 <code>fishhook</code>  HOOK掉ptrace这个函数</li></ul></li></ul><hr><h3 id="防护：-sysctl"><a href="#防护：-sysctl" class="headerlink" title="防护： sysctl"></a>防护： sysctl</h3><ul><li><code>sysctl ( system control )</code> 是由 <code>&lt;sys/sysctl.h&gt;</code> 提供的一个函数 , 它有很多作用 , 其中一个是可以监测当前进程有没有被附加 . 但是因为其特性 , 只是监测当前时刻应用有没有被附加 .</li><li>因此正向开发中我们往往结合定时器一起使用 , 或者 定时 &#x2F; 定期 &#x2F; 在特定时期 去使用 .</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#import <span class="hljs-string">&quot;ViewController.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-string">&lt;sys/sysctl.h&gt;</span></span><br>@<span class="hljs-function">interface <span class="hljs-title">ViewController</span> <span class="hljs-params">()</span></span><br><span class="hljs-function">@end</span><br><span class="hljs-function"></span><br><span class="hljs-function">@implementation ViewController</span><br><span class="hljs-function">BOOL <span class="hljs-title">isDebug</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> name[<span class="hljs-number">4</span>];             <span class="hljs-comment">//里面放字节码。查询的信息</span><br>    name[<span class="hljs-number">0</span>] = CTL_KERN;      <span class="hljs-comment">//内核查询</span><br>    name[<span class="hljs-number">1</span>] = KERN_PROC;     <span class="hljs-comment">//查询进程</span><br>    name[<span class="hljs-number">2</span>] = KERN_PROC_PID; <span class="hljs-comment">//传递的参数是进程的ID</span><br>    name[<span class="hljs-number">3</span>] = <span class="hljs-built_in">getpid</span>();      <span class="hljs-comment">//获取当前进程ID</span><br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">kinfo_proc</span> info;  <span class="hljs-comment">//接受查询结果的结构体</span><br>    <span class="hljs-type">size_t</span> info_size = <span class="hljs-built_in">sizeof</span>(info);  <span class="hljs-comment">//结构体大小</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sysctl</span>(name, <span class="hljs-number">4</span>, &amp;info, &amp;info_size, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))&#123;<br>        <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;查询失败&quot;</span>);<br>        <span class="hljs-keyword">return</span> NO;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    查询结果看info.kp_proc.p_flag 的第12位。如果为1，表示调试状态。</span><br><span class="hljs-comment">    (info.kp_proc.p_flag &amp; P_TRACED) 就是0x800, 即可获取第12位</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> ((info.kp_proc.p_flag &amp; P_TRACED) != <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">dispatch_source_t</span> timer;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">debugCheck</span><span class="hljs-params">()</span></span>&#123;<br>    timer = <span class="hljs-built_in">dispatch_source_create</span>(DISPATCH_SOURCE_TYPE_TIMER, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">dispatch_get_global_queue</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">dispatch_source_set_timer</span>(timer, DISPATCH_TIME_NOW, <span class="hljs-number">1.0</span> * NSEC_PER_SEC, <span class="hljs-number">0.0</span> * NSEC_PER_SEC);<br>    <span class="hljs-built_in">dispatch_source_set_event_handler</span>(timer, ^&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isDebug</span>()) &#123;<span class="hljs-comment">//在这里写你检测到调试要做的操作</span><br>            <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;调试状态!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;正常！&quot;</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-built_in">dispatch_resume</span>(timer);<br>&#125;<br><br>- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    <span class="hljs-built_in">debugCheck</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>效果：</p><ul><li>可以上报或者 <code>exit</code></li></ul></li><li><p>破解：</p><ul><li>因为 <code>sysctl</code>函数也是系统函数，从而可以使用fishHook来交换</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">int</span>  (*sysctl_ptr)(<span class="hljs-type">int</span> *, u_int, <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span> *, <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">my_sysctl</span><span class="hljs-params">(<span class="hljs-type">int</span> * name, u_int namelen, <span class="hljs-type">void</span> * info, <span class="hljs-type">size_t</span> * infoSize, <span class="hljs-type">void</span> * newInfo, <span class="hljs-type">size_t</span> newInfoSize)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (name[<span class="hljs-number">0</span>] == CTL_KERN &amp;&amp; name[<span class="hljs-number">1</span>] == KERN_PROC &amp;&amp; name[<span class="hljs-number">2</span>] == KERN_PROC_PID &amp;&amp; *infoSize == <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> kinfo_proc)) &#123;<br>        <br>        <span class="hljs-type">int</span> old = <span class="hljs-built_in">sysctl_ptr</span>(name,namelen,info,infoSize,newInfo,newInfoSize);<br>        <span class="hljs-comment">//拿出info</span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">kinfo_proc</span> * myinfo = (<span class="hljs-keyword">struct</span> kinfo_proc *)info;<br>        <br>        <span class="hljs-keyword">if</span> ((myinfo-&gt;kp_proc.p_flag &amp; P_TRACED ) != <span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-comment">//使用异或取反</span><br>            myinfo-&gt;kp_proc.p_flag ^= P_TRACED;<br>        &#125;<br>        <span class="hljs-keyword">return</span> old;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sysctl_ptr</span>(name,namelen,info,infoSize,newInfo,newInfoSize);<br>&#125;<br><br>+(<span class="hljs-type">void</span>)load&#123;<br>  <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rebinding</span> rebingSysctl;<br>    rebingSysctl.name = <span class="hljs-string">&quot;sysctl&quot;</span>;<br>    rebingSysctl.replacement = my_sysctl;<br>    rebingSysctl.replaced = (<span class="hljs-type">void</span> *)&amp;sysctl_ptr;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rebinding</span> rebs[<span class="hljs-number">1</span>] = &#123;rebingSysctl&#125;;<br>    <span class="hljs-built_in">rebind_symbols</span>(rebs, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>需要慎用 <code>exit</code> 函数</li><li>逆向中通过 <code>exit</code>  添加符号断点，就可以查看函数调用栈，从而可以看到调用 <code>exit</code>的函数地址，在减去首地址就可以拿到函数的偏移量，接着在 <code>Hopper</code> 当中就可以知道调用 <code>exit</code> 的地址了</li><li>我们自己开发所使用的 <code> framework</code> 会比注入的动态库更早的执行，虽然还是会被 <code>fishhook</code> 替换掉，但是可以在此之前，禁用掉 <code>fishhook</code> 或者完成检测</li><li>只不过如果破解人员找到这个 <code>framework</code> ，然后在 <code>load</code> 方法中直接 <code>Return</code></li></ul></li></ul><hr><hr><h3 id="防护：-通过函数地址直接调用-ptrace-和-sysctl"><a href="#防护：-通过函数地址直接调用-ptrace-和-sysctl" class="headerlink" title="防护： 通过函数地址直接调用 ptrace 和 sysctl"></a>防护： 通过函数地址直接调用 <code>ptrace</code> 和 <code>sysctl</code></h3><ul><li><p>在我工程开始我就获取 <code>ptrace / sysctl</code> 的地址 , 后面直接使用地址调用这个函数 . 实际上是可行的 , 利用 <code>dlsym</code>这个函数 .</p><ul><li>通过符号获取函数地址 ( dladdr 函数 ) </li><li>通过函数内部地址找到函数符号 ( dlsym 函数 )</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#import <span class="hljs-string">&quot;MyPtraceHeader.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">callFunAddres</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">int</span> name[<span class="hljs-number">4</span>];             <span class="hljs-comment">//里面放字节码。查询的信息</span><br>    name[<span class="hljs-number">0</span>] = CTL_KERN;      <span class="hljs-comment">//内核查询</span><br>    name[<span class="hljs-number">1</span>] = KERN_PROC;     <span class="hljs-comment">//查询进程</span><br>    name[<span class="hljs-number">2</span>] = KERN_PROC_PID; <span class="hljs-comment">//传递的参数是进程的ID</span><br>    name[<span class="hljs-number">3</span>] = <span class="hljs-built_in">getpid</span>();      <span class="hljs-comment">//获取当前进程ID</span><br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">kinfo_proc</span> info;  <span class="hljs-comment">//接受查询结果的结构体</span><br>    <span class="hljs-type">size_t</span> info_size = <span class="hljs-built_in">sizeof</span>(info);  <span class="hljs-comment">//结构体大小</span><br>    <br>    <span class="hljs-comment">//这里做法是隐藏常量字符串</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> str[] = &#123;<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;s&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;y&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;s&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;c&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;t&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;l&#x27;</span>),<br>        (<span class="hljs-string">&#x27;a&#x27;</span> ^ <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * p = str;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    <span class="hljs-keyword">while</span> (((*p) ^= <span class="hljs-string">&#x27;a&#x27;</span>) != <span class="hljs-string">&#x27;\0&#x27;</span>) p++;<br>    <br>    <span class="hljs-type">void</span> * handle = <span class="hljs-built_in">dlopen</span>(<span class="hljs-string">&quot;/usr/lib/system/libsystem_c.dylib&quot;</span>, RTLD_LAZY);<br><br>    <span class="hljs-built_in">int</span>  (*sysctl_ptr)(<span class="hljs-type">int</span> *, u_int, <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span> *, <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>);<br>    <span class="hljs-comment">//获取sysctl函数指针</span><br>    sysctl_ptr = <span class="hljs-built_in">dlsym</span>(handle,(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)str);<br>    <span class="hljs-keyword">if</span> (sysctl_ptr) &#123;<br>        <br>        <span class="hljs-built_in">sysctl_ptr</span>(name, <span class="hljs-number">4</span>, &amp;info, &amp;info_size, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>      <br>        <span class="hljs-keyword">if</span> ((info.kp_proc.p_flag &amp; P_TRACED ) != <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;调试状态&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;正常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>破解 <ul><li>使用 <code>fishhook </code> 将  <code>dlopen</code> 与 <code>dlsym</code> 这两个系统函数干掉</li></ul></li></ul><hr><hr><h3 id="防护-汇编"><a href="#防护-汇编" class="headerlink" title="防护 汇编"></a>防护 汇编</h3><ul><li>使用汇编直接调用</li></ul><hr><hr><h3 id="字符串常量隐藏"><a href="#字符串常量隐藏" class="headerlink" title="字符串常量隐藏"></a>字符串常量隐藏</h3><ul><li>例如在App内注册第三方APP的Key,SecretKey等，字符串常量隐藏</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> kWxAppID @<span class="hljs-string">&quot;krystal69d7xxxxxx&quot;</span>  </span><br> - (<span class="hljs-type">void</span>)configureForWXSDK&#123;<br>    [WXApi registerApp:kWxAppID<br>         universalLink:@<span class="hljs-string">&quot;123123&quot;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>利用Hopper打开MachO就可以看到<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gslif4da10j31lw0egmze.jpg">  </p><ul><li>解决办法<ul><li>在方法中返回这个字符串</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> KRYSTAL_ENCRYPT_KEY @<span class="hljs-string">&quot;krystal_key&quot;</span></span><br>@implementation ViewController<br>- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    <span class="hljs-comment">//使用函数代替字符串</span><br>    [self uploadDataWithKey:<span class="hljs-built_in">AES_KEY</span>()];  <br>&#125;<br><br>- (<span class="hljs-type">void</span>)uploadDataWithKey:(NSString *)key&#123;<br>    <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,key);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> NSString * <span class="hljs-title">AES_KEY</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] = &#123;<br>        <span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> [NSString stringWithUTF8String:(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)key];<br>&#125;<br>@end<br></code></pre></td></tr></table></figure><ul><li><p><strong>破解：</strong></p><ul><li>静态分析需要找到这个返回 <code> Key</code> 函数</li></ul></li><li><p><strong>升级防护</strong></p><ul><li>通过异或方式</li><li>这些字符不会进入字符常量区 . 编译器直接换算成异或结果 .<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRING_ENCRYPT_KEY @<span class="hljs-string">&quot;demo_AES_key&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENCRYPT_KEY 0xAC</span><br>@<span class="hljs-function">interface <span class="hljs-title">ViewController</span> <span class="hljs-params">()</span></span><br><span class="hljs-function">@end</span><br><span class="hljs-function"></span><br><span class="hljs-function">@implementation ViewController</span><br><span class="hljs-function">- <span class="hljs-params">(<span class="hljs-type">void</span>)</span>viewDidLoad </span>&#123;<br>    [super viewDidLoad];<br><span class="hljs-comment">//    [self uploadDataWithKey:STRING_ENCRYPT_KEY]; //使用宏/常量字符串</span><br>    [self uploadDataWithKey:<span class="hljs-built_in">AES_KEY</span>()]; <span class="hljs-comment">//使用函数代替字符串</span><br>&#125;<br><br>- (<span class="hljs-type">void</span>)uploadDataWithKey:(NSString *)key&#123;<br>    <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,key);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> NSString * <span class="hljs-title">AES_KEY</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] = &#123;<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;d&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;e&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;m&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;o&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;_&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;A&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;E&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;S&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;_&#x27;</span>),<br>        (ENCRYPT_KEY ^ <span class="hljs-string">&#x27;\0&#x27;</span>),<br>    &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * p = key;<br>    <span class="hljs-keyword">while</span> (((*p) ^= ENCRYPT_KEY) != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [NSString stringWithUTF8String:(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)key];<br>&#125;<br>@end<br></code></pre></td></tr></table></figure></li></ul><ul><li><strong>效果：</strong><br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsm44y5b44j30o80ka76l.jpg"></li></ul></li></ul><hr><hr><hr><h3 id="动态库检测"><a href="#动态库检测" class="headerlink" title="动态库检测"></a>动态库检测</h3><ul><li><p>可以在服务器上存储一份 <code> _dyld_image_name</code></p></li><li><p>然后本地运行后获取到的上传服务器做比对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">+ (BOOL)isExternalLibs&#123;<br>    <span class="hljs-keyword">if</span>(TARGET_IPHONE_SIMULATOR)<span class="hljs-keyword">return</span> NO;<br>    <span class="hljs-type">int</span> dyld_count = _dyld_image_count();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; dyld_count; i++) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> * imageName = _dyld_get_image_name(i);<br>        NSString *res = [NSString stringWithUTF8String:imageName];<br>        <span class="hljs-keyword">if</span>([res hasPrefix:@<span class="hljs-string">&quot;/var/containers/Bundle/Application&quot;</span>])&#123;<br>            <span class="hljs-keyword">if</span>([res hasSuffix:@<span class="hljs-string">&quot;.dylib&quot;</span>])&#123;<br>                <span class="hljs-comment">//这边还需要过滤掉自己项目中本身有的动态库</span><br>                <span class="hljs-keyword">return</span> YES;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> NO;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>破解：</strong> </p><ul><li>可以hook NSString的hasPrefix方法绕过检测</li></ul></li></ul><hr><hr><h3 id="防护-NSFileManager"><a href="#防护-NSFileManager" class="headerlink" title="防护  NSFileManager"></a>防护  NSFileManager</h3><ul><li>使用NSFileManager通过检测一些越狱后的关键文件&#x2F;路径是否可以访问来判断是否越狱 常见的文件&#x2F;路径有<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"> <span class="hljs-type">static</span> <span class="hljs-type">char</span> *JailbrokenPathArr[] = &#123;<span class="hljs-string">&quot;/Applications/Cydia.app&quot;</span>,<br>                                     <span class="hljs-string">&quot;/usr/sbin/sshd&quot;</span>,<br>                                     <span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>                                     <span class="hljs-string">&quot;/etc/apt&quot;</span>,<br>                                     <span class="hljs-string">&quot;/Library/MobileSubstrate&quot;</span>,<br>                                     <span class="hljs-string">&quot;/User/Applications/&quot;</span>&#125;; <br>      <br>      <br>+ (BOOL)isJailbroken1&#123;<br>    <span class="hljs-keyword">if</span>(TARGET_IPHONE_SIMULATOR)<span class="hljs-keyword">return</span> NO;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(JailbrokenPathArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *);i++) &#123;<br>        <span class="hljs-keyword">if</span>([[NSFileManager defaultManager] fileExistsAtPath:[NSString stringWithUTF8String:JailbrokenPathArr[i]]])&#123;<br>            <span class="hljs-keyword">return</span> YES;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> NO;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>破解<ul><li>攻击者可以通过hook NSFileManager的fileExistsAtPath方法来绕过检测<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//绕过使用NSFileManager判断特定文件是否存在的越狱检测，此时直接返回NO势必会影响程序中对这个方法的正常使用，因此可以先打印一下path，然后判断如果path是用来判断是否越狱则返回NO，否则按照正常逻辑返回</span><br>%hook NSFileManager<br>- (BOOL)fileExistsAtPath:(NSString *)path&#123;<br>    <span class="hljs-keyword">if</span>(TARGET_IPHONE_SIMULATOR)<span class="hljs-keyword">return</span> NO;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(JailbrokenPathArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *);i++) &#123;<br>        NSString *jPath = [NSString stringWithUTF8String:JailbrokenPathArr[i]];<br>        <span class="hljs-keyword">if</span>([path isEqualToString:jPath])&#123;<br>            <span class="hljs-keyword">return</span> NO;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> %orig;<br>&#125;<br>%end<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><hr><h3 id="防护-stat-函数"><a href="#防护-stat-函数" class="headerlink" title="防护 stat 函数"></a>防护 <code>stat</code> 函数</h3><ul><li><p>使用C语言函数stat判断文件是否存在(注:stat函数用于获取对应文件信息，返回0则为获取成功，-1为获取失败)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">+ (BOOL)isJailbroken2&#123;<br>    <span class="hljs-keyword">if</span>(TARGET_IPHONE_SIMULATOR)<span class="hljs-keyword">return</span> NO;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(JailbrokenPathArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *);i++) &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> stat_info;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">stat</span>(JailbrokenPathArr[i], &amp;stat_info)) &#123;<br>            <span class="hljs-keyword">return</span> YES;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> NO;<br>&#125;      <br></code></pre></td></tr></table></figure></li><li><p>破解：</p><ul><li>使用fishhook可hook C函数，fishhook通过在mac-o文件中查找并替换函数地址达到hook的目的<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-title">int</span> <span class="hljs-params">(*orig_stat)</span><span class="hljs-params">(<span class="hljs-type">char</span> *c, <span class="hljs-keyword">struct</span> stat *s)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hook_stat</span><span class="hljs-params">(<span class="hljs-type">char</span> *c, <span class="hljs-keyword">struct</span> stat *s)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(JailbrokenPathArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *);i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(c, JailbrokenPathArr[i]))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_stat</span>(c,s);<br>&#125;<br>+(<span class="hljs-type">void</span>)statHook&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rebinding</span> stat_rebinding = &#123;<span class="hljs-string">&quot;stat&quot;</span>, hook_stat, (<span class="hljs-type">void</span> *)&amp;orig_stat&#125;;<br>    <span class="hljs-built_in">rebind_symbols</span>((<span class="hljs-keyword">struct</span> rebinding[<span class="hljs-number">1</span>])&#123;stat_rebinding&#125;, <span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure> 在动态库加载的时候，调用statHook    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"> %ctor&#123;<br>    [StatHook statHook];<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>判断stat的来源是否来自于系统库，因为fishhook通过交换函数地址来实现hook，若hook了stat，则stat来源将指向攻击者注入的动态库中 因此我们可以完善上方的isJailbroken2判断规则，若stat来源非系统库，则直接返回已越狱      </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">+ (BOOL)isJailbroken2&#123;<br>    <span class="hljs-keyword">if</span>(TARGET_IPHONE_SIMULATOR)<span class="hljs-keyword">return</span> NO;<br>    <span class="hljs-type">int</span> ret ;<br>    Dl_info dylib_info;<br>    <span class="hljs-built_in">int</span> (*func_stat)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-keyword">struct</span> stat *) = stat;<br>    <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">dladdr</span>(func_stat, &amp;dylib_info))) &#123;<br>        NSString *fName = [NSString stringWithUTF8String:dylib_info.dli_fname];<br>        <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;fname--%@&quot;</span>,fName);<br>        <span class="hljs-keyword">if</span>(![fName isEqualToString:@<span class="hljs-string">&quot;/usr/lib/system/libsystem_kernel.dylib&quot;</span>])&#123;<br>            <span class="hljs-keyword">return</span> YES;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(JailbrokenPathArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *);i++) &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> stat_info;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">stat</span>(JailbrokenPathArr[i], &amp;stat_info)) &#123;<br>            <span class="hljs-keyword">return</span> YES;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> NO;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><hr><hr><hr><h3 id="BundleID检测"><a href="#BundleID检测" class="headerlink" title="BundleID检测"></a>BundleID检测</h3><ul><li>进行BundleID检测可以有效防止多开</li><li>获取当前项目的BundleID有多种方法，此处不再赘述，绕过检测则是hook对应的方法，返回原有的BundleID</li><li>防止攻击者绕过检测，可以在自行link的framework中获取BundleID并进行检测，以在被hook前进行校验<br> BundleID并进行校验以避免常见的BundleID获取方法被hook<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//获取Boundle ID</span><br><span class="hljs-type">char</span>  * bundleName =  getenv(<span class="hljs-string">&quot;XPC_SERVICE_NAME&quot;</span>);<br>    NSLog(@<span class="hljs-string">&quot;%s&quot;</span>,bundleName);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-夜间模式框架</title>
    <link href="/2021/05/01/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E6%A1%86%E6%9E%B6/"/>
    <url>/2021/05/01/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>iOS夜间模式的适配，主要用到了<code>NSProxy</code>转发原理 ，其中JYDynamicColor继承于UIColor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@interface JYDynamicColor : UIColor<br><br>@property (nonatomic, readonly) UIColor * lightColor;<br><br>@property (nonatomic, readonly) UIColor * darkColor;<br><br>+ (UIColor *)colorWithLightColor:(UIColor *)lightColor darkColor:(UIColor *)darkColor;<br><br>+ (UIColor *)colorWithDynamicProvider:(UIColor * (^)(JYTraitCollection *traitCollection))dynamicProvider;<br><br>@end<br></code></pre></td></tr></table></figure><p>  但是在.m文件中,我们实际将消息给了JYDynamicColorProxy处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@implementation JYDynamicColor<br><br>+ (UIColor *)colorWithLightColor:(UIColor *)lightColor darkColor:(UIColor *)darkColor &#123;<br>  return [self colorWithDynamicProvider:^(JYTraitCollection *traitCollection)&#123;<br>    return traitCollection.userInterfaceStyle == JYInterfaceStyleDark ? darkColor : lightColor;<br>  &#125;];<br>&#125;<br><br>+ (UIColor *)colorWithDynamicProvider:(UIColor * _Nonnull (^)(JYTraitCollection * _Nonnull))dynamicProvider &#123;<br>    <br>    return (JYDynamicColor *)[[JYDynamicColorProxy alloc] initWithDynamicProvider:dynamicProvider];<br>&#125;<br><br>- (UIColor *)lightColor &#123;<br>  NSAssert(NO, @&quot;This should never be called&quot;);<br>  return nil;<br>&#125;<br><br>- (UIColor *)darkColor &#123;<br>  NSAssert(NO, @&quot;This should never be called&quot;);<br>   return nil;<br>&#125;<br><br>@end<br></code></pre></td></tr></table></figure><p>接着看到<code>JYDynamicColorProxy</code>是继承于<code>NSProxy</code>，将所有的事件都转发到了<code>resolvedColor</code>，而<code>resolvedColor</code>是根据当前模式返回 <code>lightColor</code> 或者 <code>darkColor</code>,这样就实现了，对外其实是一个<code>UIColor</code>，但是实际上是一个<code>JYDynamicColorProxy</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@interface JYDynamicColorProxy : NSProxy &lt;NSCopying&gt;<br><br>@property (nonatomic, readonly) UIColor * resolvedColor;<br><br>@property (nonatomic, strong) UIColor *(^dynamicProvider)(JYTraitCollection *);<br><br>@end<br><br><br>@implementation JYDynamicColorProxy<br><br>- (instancetype)initWithDynamicProvider:(UIColor * (^)(JYTraitCollection *traitCollection))dynamicProvider &#123;<br>  self.dynamicProvider = dynamicProvider;<br>  return self;<br>&#125;<br><br>// MARK: NSProxy - 转发消息 将消息全部转发到 resolvedColor<br>- (NSMethodSignature *)methodSignatureForSelector:(SEL)sel &#123;<br>  return [self.resolvedColor methodSignatureForSelector:sel];<br>&#125;<br><br>- (void)forwardInvocation:(NSInvocation *)invocation &#123;<br>  [invocation invokeWithTarget:self.resolvedColor];<br>&#125;<br><br>- (UIColor *)resolvedColor &#123;<br>  return [self resolvedColorWithTraitCollection:JYTraitCollection.overrideTraitCollection];<br>&#125;<br><br>- (UIColor *)resolvedColorWithTraitCollection:(JYTraitCollection *)traitCollection &#123;<br>    return self.dynamicProvider(traitCollection);<br>&#125;<br><br>// MARK: UIColor<br>- (UIColor *)colorWithAlphaComponent:(CGFloat)alpha &#123;<br>  return [JYDynamicColor colorWithDynamicProvider:^UIColor *(JYTraitCollection *traitCollection) &#123;<br>    return [self.dynamicProvider(traitCollection) colorWithAlphaComponent:alpha];<br>  &#125;];<br>&#125;<br><br>- (CGColorRef)CGColor &#123;<br>  return [[self resolvedColor] CGColor];<br>&#125;<br><br><br>// MARK: NSObject<br>- (BOOL)isKindOfClass:(Class)aClass &#123;<br>  static JYDynamicColor *dynamicColor = nil;<br>  static dispatch_once_t onceToken;<br>  dispatch_once(&amp;onceToken, ^&#123;<br>    dynamicColor = [[JYDynamicColor alloc] init];<br>  &#125;);<br>  return [dynamicColor isKindOfClass:aClass];<br>&#125;<br><br>// MARK: NSCopying<br>- (id)copy &#123;<br>  return [self copyWithZone:nil];<br>&#125;<br><br>- (id)copyWithZone:(NSZone *)zone &#123;<br>  return [[JYDynamicColorProxy alloc] initWithDynamicProvider:[self.dynamicProvider copy]];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> iOS13以下，如果需要切换颜色，该如何刷新？<code>JYDynamicColorProxy</code>是如何存储颜色的呢？</p></blockquote><p>我们<code>swizzle</code>将设置颜色方法进行了hook，例如<code>@selector(setBackgroundColor:);</code>方法，将<code>backgroundColor</code>为<code>JYDynamicColor</code>的都进行处理</p><p>这里采用了关联对象的思想，写了一个<code>UIView</code>的分类,将<code>JYDynamicColorProxy</code>进行存储，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">...<br>@property (nullable, readonly) JYDynamicColor *jy_dynamicBackgroundColor;<br>...<br><br>- (JYDynamicColor *)jy_dynamicBackgroundColor &#123;<br>    return objc_getAssociatedObject(self, @selector(jy_dynamicBackgroundColor));<br>&#125;<br><br>- (void)setJy_dynamicBackgroundColor:(JYDynamicColor *)jy_dynamicBackgroundColor &#123;<br>  objc_setAssociatedObject(self,<br>                           @selector(jy_dynamicBackgroundColor),<br>                           jy_dynamicBackgroundColor,<br>                           OBJC_ASSOCIATION_COPY_NONATOMIC);<br>&#125;<br></code></pre></td></tr></table></figure><p>当修改当前模式的时候，我们将初始化拿到的<code>UIApplication</code>进行遍历，拿到<code>UIView</code>,然后调用分类当中的修改颜色方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void)jyTraitCollectionDidChange:(JYTraitCollection *)previousTraitCollection &#123;<br>  if (@available(iOS 13.0, *)) &#123;<br>    return;<br>  &#125;<br>    [self.subviews enumerateObjectsUsingBlock:^(__kindof UIView * _Nonnull view, NSUInteger idx, BOOL * _Nonnull stop) &#123;<br>        [view jyTraitCollectionDidChange:previousTraitCollection];<br>     &#125;];<br>     <br>    [self setNeedsLayout];<br>    [self setNeedsDisplay];<br>#if __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_13_0<br>    [self jy_updateDynamicColors];<br>#endif<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void)jy_updateDynamicColors&#123;<br>    JYDynamicColor * backgroundColor = [self jy_dynamicBackgroundColor];<br>    if (backgroundColor) &#123;<br>        [self setBackgroundColor:backgroundColor];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过关联对象取到对应模式的Color,然后赋值即可，图片也是一样的原理</p>]]></content>
    
    
    <categories>
      
      <category>iOS源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-渲染机制</title>
    <link href="/2021/04/01/iOS-%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/04/01/iOS-%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="CALayer-与-UIView"><a href="#CALayer-与-UIView" class="headerlink" title="CALayer 与 UIView"></a>CALayer 与 UIView</h3><p>UIView拥有一个属性为<code>layer</code>和<code>layerClass</code>属性</p><ul><li><code>layer</code> 属性返回的是 <code>UIView</code> 所持有的主 <code>Layer(RootLayer)</code> 实例，我们可以通过其来设置 <code>UIView</code> 没有封装的一些 <code>layer</code> 属性；</li><li><code>layerClass</code> 则返回 <code>RootLayer</code> 所使用的类，我们可以通过重写该属性，来让 <code>UIView</code> 使用不同的 <code>CALayer</code> 来显示</li></ul><p><code>CALayer</code>继承自<code>NSObject</code>，负责图像渲染</p><p><code>UIView</code>继承自<code>UIResponder</code>，负责事件的响应</p><h3 id="图像显示原理"><a href="#图像显示原理" class="headerlink" title="图像显示原理"></a>图像显示原理</h3><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024844.png" alt="image-20190312112603570"></p><p>CPU和GPU通过总线连接，CPU中计算出的往往是<code>bitmap</code>位图，通过总线由合适的时机传递给GPU，GPU拿到位图后，渲染到帧缓存区<code>FrameBuffer</code>,然后由视频控制器根据<code>Vsync</code>信号在指定时间之前去帧缓冲区提取内容，显示到屏幕上。</p><p>CPU工作内容: </p><ol><li>layout（UI布局，文本计算）</li><li>display（绘制 drawRect）</li><li>prepare(图片解码)</li><li>commit（提交位图）</li></ol><p><code>GPU工作内容:</code> 顶点着色，图元装配，光栅化，片段着色，片段处理，最后提交帧缓冲区</p><h3 id="View绘制渲染机制和Runloop什么关系"><a href="#View绘制渲染机制和Runloop什么关系" class="headerlink" title="View绘制渲染机制和Runloop什么关系"></a>View绘制渲染机制和Runloop什么关系</h3><p>例如有以下 <code>UIView</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@implementation JYView<br>- (void)drawRect:(CGRect)rect &#123;<br>    CGContextRef con = UIGraphicsGetCurrentContext();<br>    CGContextAddEllipseInRect(con, CGRectMake(0,0,100,200));<br>    CGContextSetRGBFillColor(con, 0, 0, 1, 1);<br>    CGContextFillPath(con);<br>&#125;<br>@end<br><br><br>@implementation ViewController<br><br>- (void)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    JYView *view = [[JYView alloc] init];<br>    view.backgroundColor = [UIColor whiteColor];<br>    view.bounds = CGRectMake(0, 0, 100, 100);<br>    view.center = CGPointMake(100, 100);<br>    [self.view addSubview:view];<br>&#125;<br><br>@end<br></code></pre></td></tr></table></figure><p>重写了 <code>UIView</code> 的 <code>DrawRect</code>方法.展现在屏幕前经历以下堆栈</p><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2020-03-03-093059.jpg" alt="img"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>当在操作 UI 时，比如改变了<code>Frame</code> 、更新了 <code>UIView/CALayer</code> 的层次时，或者手动调用了 <code>UIView/CALayer</code> 的 <code>setNeedsLayout/setNeedsDisplay</code> 方法后，这个 <code>UIView/CALayer</code> 就被标记为待处理，并被提交到一个全局的容器去。 苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数： <code>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</code>。这个函数里会遍历所有待处理的 UIView&#x2F;CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()<br>QuartzCore:CA::Transaction::observer_callback:<br>CA::Transaction::commit();<br>CA::Context::commit_transaction();<br>CA::Layer::layout_and_display_if_needed();<br>CA::Layer::layout_if_needed();<br>[CALayer layoutSublayers];<br>[UIView layoutSubviews];<br>CA::Layer::display_if_needed();<br>[CALayer display];<br>[UIView drawRect];<br></code></pre></td></tr></table></figure><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2020-03-04-A4.png" alt="img"></p><h3 id="View布局与约束时机"><a href="#View布局与约束时机" class="headerlink" title="View布局与约束时机"></a>View布局与约束时机</h3><p>一个视图的布局指的是它在屏幕上的的大小和位置。每个 view 都有一个 frame 属性，用来表示在父 view 坐标系中的位置和具体的大小。<code>UIView</code> 给你提供了用来通知系统某个 view 布局发生变化的方法，也提供了在 view 布局重新计算后调用的可重写的方法。</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局:"></a>布局:</h4><p><strong>layoutSubviews()</strong></p><p>它负责给出当前 view 和每个子 view 的位置和大小。这个方法很开销很大，因为它会在每个子视图上起作用并且调用它们相应的 <code>layoutSubviews</code> 方法。系统会在任何它需要重新计算视图的 frame 的时候调用这个方法，所以你应该在需要更新 frame 来重新定位或更改大小时重载它。然而你不应该在代码中显式调用这个方法。相反，有许多可以在 run loop 的不同时间点触发 <code>layoutSubviews</code> 调用的机制，这些触发机制比直接调用 <code>layoutSubviews</code> 的资源消耗要小得多。</p><p><strong>自动刷新触发器</strong></p><p>有许多事件会自动给视图打上 “update layout” 标记，因此 <code>layoutSubviews</code> 会在<strong>下一个周期中（重点！！！）</strong>被调用，而不需要开发者手动操作。这些自动通知系统 view 的布局发生变化的方式有：</p><ul><li>修改 view 的大小</li><li>新增 subview</li><li>用户在 <code>UIScrollView</code> 上滚动（<code>layoutSubviews</code> 会在 <code>UIScrollView</code> 和它的父 view 上被调用）</li><li>用户旋转设备</li><li>更新视图的 constraints</li></ul><p>这些方式都会告知系统 view 的位置需要被重新计算，继而会自动转化为一个最终的 <code>layoutSubviews</code> 调用。当然，也有直接触发 <code>layoutSubviews</code> 的方法。</p><p><strong>setNeedsLayout()</strong></p><p>触发 <code>layoutSubviews</code> 调用的最省资源的方法就是在你的视图上调用 <code>setNeedsLaylout</code> 方法。调用这个方法代表向系统表示视图的布局需要重新计算。<code>setNeedsLayout</code> 方法会立刻执行并返回，但在返回前不会真正更新视图。视图会在下一个 update cycle 中更新，就在系统调用视图们的 <code>layoutSubviews</code> 以及他们的所有子视图的 <code>layoutSubviews</code> 方法的时候。</p><p><strong>layoutIfNeeded()</strong></p><p><code>layoutIfNeeded</code> 是另一个会让 <code>UIView</code> 触发 <code>layoutSubviews</code> 的方法。 当视图需要更新的时候，与 <code>setNeedsLayout()</code> 会让视图在下一周期调用 <code>layoutSubviews</code> 更新视图不同，<code>layoutIfNeeded</code> 会立即调用 <code>layoutSubviews</code> 方法。但是如果你调用了 <code>layoutIfNeeded</code> 之后，并且没有任何操作向系统表明需要刷新视图，那么就不会调用 <code>layoutsubview</code>。如果你在同一个 run loop 内调用两次 <code>layoutIfNeeded</code>，并且两次之间没有更新视图，第二个调用同样不会触发 <code>layoutSubviews</code> 方法。</p><p>使用 <code>layoutIfNeeded</code>，则布局和重绘会立即发生并在函数返回之前完成（除非有正在运行中的动画）。这个方法在你需要依赖新布局，无法等到下一次 update cycle 的时候会比 <code>setNeedsLayout</code> 有用</p><p>当对希望通过修改 constraint 进行动画时，这个方法特别有用。你需要在 animation block 之前对 self.view 调用 <code>layoutIfNeeded</code>，以确保在动画开始之前传播所有的布局更新。在 animation block 中设置新 constrait 后，需要再次调用 <code>layoutIfNeeded</code> 来动画到新的状态。</p><p>(<strong>注:</strong> Masonry 动画需要这个)</p><h4 id="显示："><a href="#显示：" class="headerlink" title="显示："></a>显示：</h4><p>一个视图的显示包含了颜色、文本、图片和 Core Graphics 绘制等视图属性，不包括其本身和子视图的大小和位置。和布局的方法类似，显示也有触发更新的方法，它们由系统在检测到更新时被自动调用，或者我们可以手动调用直接刷新。</p><p><strong>setNeedsDisplay()</strong></p><p>这个方法类似于布局中的 <code>setNeedsLayout</code> 。它会给有内容更新的视图设置一个内部的标记，但在视图重绘之前就会返回。然后在下一个 update cycle 中，系统会遍历所有已标标记的视图，并调用它们的 <code>draw</code> 方法。</p><p>大部分时候，在视图中更新任何 UI 组件都会把相应的视图标记为“dirty”，通过设置视图“内部更新标记”，在下一次 update cycle 中就会重绘，而不需要显式的 <code>setNeedsDisplay</code> 调用</p><h4 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h4><p><strong>updateConstraints()</strong></p><p>这个方法用来在自动布局中动态改变视图约束。和布局中的 <code>layoutSubviews()</code> 方法或者显示中的 <code>draw</code> 方法类似，<code>updateConstraints()</code> 只应该被重载，<strong>绝不要在代码中显式地调用</strong>。通常你只应该在 <code>updateConstraints</code> 方法中实现必须要更新的约束。</p><p><strong>setNeedsUpdateConstraints()</strong></p><p>调用 <code>setNeedsUpdateConstraints()</code> 会保证在下一次更新周期中更新约束。它通过标记“update constraints”来触发 <code>updateConstraints()</code>。这个方法和 <code>setNeedsDisplay()</code> 以及 <code>setNeedsLayout()</code> 方法的工作机制类似。</p><p><strong>updateConstraintsIfNeeded()</strong></p><p>对于使用自动布局的视图来说，这个方法与 <code>layoutIfNeeded</code> 等价。它会检查 “update constraints”标记（可以被 <code>setNeedsUpdateConstraints</code> 或者 <code>invalidateInstrinsicContentSize</code>方法自动设置）。如果它认为这些约束需要被更新，它会立即触发 <code>updateConstraints()</code> ，<strong>而不会等到 RunLoop 的末尾。</strong></p><h3 id="UI-卡顿-列表卡顿、掉帧原理"><a href="#UI-卡顿-列表卡顿、掉帧原理" class="headerlink" title="UI 卡顿,列表卡顿、掉帧原理"></a>UI 卡顿,列表卡顿、掉帧原理</h3><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024849.png" alt="image-20190312140156990"></p><p>iOS的 <code>mainRunloop</code>是一个60fps的回调，也就是说每16.7ms(VSync信号时间)会绘制一次屏幕，这个时间段内要完成view的缓冲区创建，view内容的绘制（如果重写了drawRect），这些CPU的工作。然后将这个缓冲区交给GPU渲染，这个过程又包括多个view的拼接(compositing)，纹理的渲染（Texture）等，最终显示在屏幕上。整个过程就是我们上面画的流程图。 因此，如果在16.7ms内完不成这些操作，比如，CPU做了太多的工作，或者view层次过于多，图片过于大，导致GPU压力太大，就会导致“卡”的现象，也就是丢帧.</p><blockquote><p>在规定的16.7ms内，在下一个VSync信号到来之前，CPU和GPU并没有共同完成下一帧视频的合成，就会出现掉帧、卡顿。</p></blockquote><h5 id="滑动优化方案思路："><a href="#滑动优化方案思路：" class="headerlink" title="滑动优化方案思路："></a>滑动优化方案思路：</h5><ul><li>CPU：<ul><li>对象的创建、调整、销毁可以放在子线程中去做ASDK；</li><li>预排班。布局计算、文本计算等事先放到子线程中去做；</li><li>使用轻量级对象，比如CALayer代替UIView</li><li>预渲染。文本等异步绘制，图片编解码等。</li><li>控制并发线程数量</li><li>减少重复计算布局，减少修改frame等</li><li>autolayout比frame更消耗资源</li><li>可以让图片的size跟frame一致</li></ul></li><li>GPU：<ul><li>纹理渲染。避免离屏渲染</li><li>视图混合。减少视图层级的复杂性，减少透明视图；不透明的opaque设置为YES</li><li>GPU能处理的最大纹理是4096 * 4096，一旦超过这个尺寸就会调用CPU进行资源处理，所以纹理尽量不要超过这个尺寸</li></ul></li></ul><h3 id="UIView的绘制原理"><a href="#UIView的绘制原理" class="headerlink" title="UIView的绘制原理"></a>UIView的绘制原理</h3><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024854.png" alt="image-20190312141642996"></p><p><code>[UIView setNeedsDisplay]</code> 并没有发生当前视图立即绘制工作,打上需要重绘的脏标记，最后是在某个时机完成</p><p><code>[UIView setLayoutIfNeed]</code> 立即重新布局视图(下一个Runloop)</p><p><code>[view layouIfNeeded]</code> 当前RunLoop休眠前更新</p><p>当我们调用UIView的<code>setNeedsDisplay</code>的方法时候，会调用<code>layer</code>的同名方法，相当于在当前<code>layer</code>打上绘制标记，在当前<code>runloop</code>将要结束的时候，才会调用CALayer的<code>display</code>方法进入到真正的绘制当中。</p><p>CALayer的<code>display</code>方法中，首先会判断layer的delegate方法<code>displayLayer：</code>是否实现，如果代理没有响应这个方法，则进入到系统绘制流程；如果代理响应了这个方法，则进入到异步绘制流程</p><h3 id="系统绘制流程"><a href="#系统绘制流程" class="headerlink" title="系统绘制流程"></a>系统绘制流程</h3><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024857.png" alt="image-20190312142115333"></p><p>在CALayer内部，系统会创建一个backingStore（可以理解为CGContextRef，drawRect中取到的currentRef就是这个东西），然后layer回判断是否有delegate，如果没有代理，就调用CALayer的<code>drawInContext：</code>方法；如果有代理，则调用layer代理的<code>drawLayer:inContext:</code>方法，这一步发生在系统内部，然后在合适的时间给与我们回调一个熟悉的UIView的<code>drawRect：</code>方法。也就是在系统内部的绘制之上，允许我们再做一些额外的绘制。最后CALayer把backting store（位图）传给GPU。</p><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-07-23-134925.jpg" alt="15420320733034"></p><ol><li>首先一个视图由 CPU 进行 Frame 布局，准备视图和图层的层级关系，查询是否有重写 <code>drawRect:</code> 或 <code>drawLayer:inContext:</code>方法，<strong>注意：如果有重写的话，这里的渲染是会占用CPU进行处理的。</strong></li><li>CPU 会将处理视图和图层的层级关系打包，通过 IPC（内部处理通信）通道提交给渲染服务，渲染服务由 OpenGL ES 和 GPU 组成。</li><li>渲染服务首先将图层数据交给 OpenGL ES 进行纹理生成和着色。生成前后帧缓存，再根据显示硬件的刷新频率，一般以设备的Vsync信号和CADisplayLink为标准，进行前后帧缓存的切换。</li><li>最后，将最终要显示在画面上的后帧缓存交给 GPU，进行采集图片和形状，运行变换，应用文理和混合。最终显示在屏幕上。</li></ol><blockquote><p>在iOS中是双缓冲机制，有前帧缓存、后帧缓存，即GPU会预先渲染好一帧放入一个缓冲区内（前帧缓存），让视频控制器读取，当下一帧渲染好后，GPU会直接把视频控制器的指针指向第二个缓冲器（后帧缓存）。当你视频控制器已经读完一帧，准备读下一帧的时候，GPU会等待显示器的VSync信号发出后，前帧缓存和后帧缓存会瞬间切换，后帧缓存会变成新的前帧缓存，同时旧的前帧缓存会变成新的后帧缓存。</p></blockquote><h3 id="异步绘制流程"><a href="#异步绘制流程" class="headerlink" title="异步绘制流程"></a>异步绘制流程</h3><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024902.png" alt="image-20190312142425272"></p><p>layer的delegate如果实现了<code>displayLayer:</code>方法，就会进入到异步绘制的流程。在异步绘制的过程中，需要代理来生成对应的bitmap位图文件，并把此bitmap作为layer的contents属性</p><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2019-03-22-024910.png" alt="image-20190312142514299"></p><h3 id="drawRect方法内为何第一行代码总要获取图形的上下文"><a href="#drawRect方法内为何第一行代码总要获取图形的上下文" class="headerlink" title="drawRect方法内为何第一行代码总要获取图形的上下文"></a>drawRect方法内为何第一行代码总要获取图形的上下文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">CGContextRef con = UIGraphicsGetCurrentContext();<br></code></pre></td></tr></table></figure><p><img src="http://sylarimage.oss-cn-shenzhen.aliyuncs.com/2020-03-04-082448.jpg" alt="img"></p><p>每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store 当UIView被绘制时（从 CA::Transaction::commit:以后），CPU执行drawRect，通过context将数据写入backing store 当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上 所以在 drawRect 方法中 要首先获取 context</p><h3 id="为什么要将图像渲染和事件响应这两个功能分开？"><a href="#为什么要将图像渲染和事件响应这两个功能分开？" class="headerlink" title="为什么要将图像渲染和事件响应这两个功能分开？"></a>为什么要将图像渲染和事件响应这两个功能分开？</h3><p>因为<code>CALayer</code>属于<code>QuartzCore</code>框架，<code>UIView</code>属于<code>UIKit</code>框架，</p><p><code>QuartzCore</code> 框架是可以跨平台使用的，但是<code>UIKit</code>框架只能在iOS中，在MacOs当中触摸是鼠标键盘，而iOS是触摸事件，遵循设计原则中的单一职责。</p><h3 id="CALayer为什么可以呈现可视化内容呢？"><a href="#CALayer为什么可以呈现可视化内容呢？" class="headerlink" title="CALayer为什么可以呈现可视化内容呢？"></a>CALayer为什么可以呈现可视化内容呢？</h3><p>CALayer包含一个<code>contents</code>属性,<code>CALayer</code> 中的 <code>contents</code> 属性保存了由设备渲染流水线渲染好的位图 <code>bitmap</code>（通常也被称为 <code>backing store</code>），而当设备屏幕进行刷新时，会从 <code>CALayer</code> 中读取生成好的 <code>bitmap</code>，进而呈现到屏幕上。CALayer的<code>contents</code>的值必须是<code>CGImage</code>。</p><h3 id="例如添加一个View-其底层做了什么操作？"><a href="#例如添加一个View-其底层做了什么操作？" class="headerlink" title="例如添加一个View,其底层做了什么操作？"></a>例如添加一个View,其底层做了什么操作？</h3><p><code>Core Animation</code> 会在APP启动时像 <code>Runloop</code> 注册一个 <code>Observer</code>，当事件到来的时候，<code>Runloop</code> 会被唤醒处理相关的业务逻辑（UIView 的创建，修改），将UI信息提交给<code>Render Server</code>,然后会等待<code>VSync</code>信号的到来，然后会通过<code>Metal</code>或者<code>OpenGLES</code>做一些绘制操作，然后把处理完的数据，纹理，顶点，着色器等提交给<code>GPU</code>，在下一个<code>VSync</code>信号到来的时候，视频控制器等读取帧缓冲区的数据显示到屏幕上。p><h3 id="界面掉帧是因为什么引起的？"><a href="#界面掉帧是因为什么引起的？" class="headerlink" title="界面掉帧是因为什么引起的？"></a>界面掉帧是因为什么引起的？</h3><p>掉帧是因为当在一个<code>Vsync</code>周期中，<code>CPU</code>或者<code>GPU</code>没有完成内容提交，那么这一帧就会被废弃掉，等待下一个<code>Vsync</code>的到来，而显示屏还会保持之前的内容不变，这也是界面卡顿的原因。</p><h3 id="CoreAnimation渲染流程？"><a href="#CoreAnimation渲染流程？" class="headerlink" title="CoreAnimation渲染流程？"></a>CoreAnimation渲染流程？</h3><p>首先收到事件的处理，例如布局改变</p><p>通过CPU完成显示内容计算，对APP图层进行打包，在下一次runloop时将描述好的 UI 信息以 <code>IPC</code> 的形式提供给<strong>系统常驻的 UI 绘制进程</strong>渲染服务RenderServer, </p><p>将收到的打包进行解码，执行metal相关程序，调用GPU</p><p>GPU完成对图像的渲染，最后显示到屏幕上</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzj6f3n9o3j20xc0hq406.jpg"></p><p><strong>但是如果重写了 <code>drawRect:</code> 方法，这个方法会直接调用 <code>Core Graphics</code> 绘制方法得到 <code>bitmap</code> 数据，同时系统会额外申请一块内存，用于暂存绘制好的 <code>bitmap</code>。</strong></p><p>由于重写了 <code>drawRect:</code> 方法，导致绘制过程从 GPU 转移到了 CPU，这就导致了一定的效率损失。与此同时，这个过程会额外使用 CPU 和内存，因此需要高效绘制，否则容易造成 CPU 卡顿或者内存爆炸。</p><h3 id="离屏渲染指的是什么？"><a href="#离屏渲染指的是什么？" class="headerlink" title="离屏渲染指的是什么？"></a>离屏渲染指的是什么？</h3><p>我们知道<code>GPU</code>会将渲染完成后的结果放入<code>Frame Buffer</code>当中，但是如果<code>GPU</code>无法一次完成渲染工作，需要两，这时就需要一个额外的载体来保存第一次的结果，而这个载体也就是离屏渲染缓冲区。</p><p>离屏渲染会创建新的缓冲区，增加额外的空间，大量的离屏渲染可能造成内存的过大压力。</p><p>离屏渲染的过程中，会进行两次上下文的切换，先切换到屏幕外，离屏渲染完成后再切回当前屏幕。</p><h3 id="所有的离屏渲染都是坏的吗？"><a href="#所有的离屏渲染都是坏的吗？" class="headerlink" title="所有的离屏渲染都是坏的吗？"></a>所有的离屏渲染都是坏的吗？</h3><p>我们可以利用开启<code>CALayer</code>的<code>shouldRasterize</code>属性去触发离屏渲染。开启之后，<code>Render Server</code> 会强制将 <code>CALayer 的渲染位图结果</code>bitmap&#96; 保存下来，这样下次再需要渲染时就可以直接复用，从而提高效率。</p><p>保存的 <code>bitmap</code> 包含 <code>layer</code> 的 <code>subLayer</code>、圆角、阴影、组透明度 <code>group opacity</code> 等，所以如果 <code>layer</code> 的构成包含上述几种元素，结构复杂且需要反复利用，那么就可以考虑打开光栅化。<strong>其主旨在于降低性能损失，但总是至少会触发一次离屏渲染。</strong></p><blockquote><p>圆角、阴影、组透明度等会由系统自动触发离屏渲染，那么打开光栅化就可以节约第二次及以后的渲染时间。而多层 subLayer 的情况由于不会自动触发离屏渲染，所以相比之下会多花费第一次离屏渲染的时间，但是可以节约后续的重复渲染的开销。</p></blockquote><h3 id="哪些情况会触发离屏渲染？"><a href="#哪些情况会触发离屏渲染？" class="headerlink" title="哪些情况会触发离屏渲染？"></a>哪些情况会触发离屏渲染？</h3><ul><li>使用了 <code>mask</code> 的 <code>layer (layer.mask)</code>；</li><li>添加了投影的<code> layer (layer.shadow*，表示相关的 shadow 开头的属性)</code></li><li>设置了组透明度为 YES，并且透明度不为 1 的<code>layer (layer.allowsGroupOpacity/layer.opacity)</code></li><li>采用了光栅化的 <code>layer (layer.shouldRasterize)</code></li><li>绘制了文字的 <code>layer (UILabel, CATextLayer, Core Text 等)</code></li><li>需要进行裁剪的<code> layer (layer.masksToBounds / view.clipsToBounds)</code></li></ul><p>总结一下，iOS 9 之后圆角造成离屏渲染的条件包括：</p><ul><li>圆角</li><li>裁剪</li><li><code>layer</code> 的<code>contents</code>不为 <code>nil</code></li><li>设置了背景色 &#x2F; 边框 &#x2F; 其他有图像内容的图层</li></ul><h3 id="知识点问题梳理"><a href="#知识点问题梳理" class="headerlink" title="知识点问题梳理"></a>知识点问题梳理</h3><ul><li><p>图像显示的原理</p></li><li><p>layoutSubviews()&#x2F;setNeedsLayout()&#x2F;layoutIfNeeded()三者之间的区别？</p></li><li><p>setNeedsDisplay()有什么作用？</p></li><li><p>界面掉帧是因为什么引起的？</p></li><li><p>离屏渲染是什么?所有的离屏渲染都是坏的吗？哪些情况会触发离屏渲染？</p></li><li><p>异步绘制的流程</p></li><li><p>drawRect方法在什么时候调用？</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-Runloop</title>
    <link href="/2021/03/01/iOS-Runloop/"/>
    <url>/2021/03/01/iOS-Runloop/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是runloop"><a href="#什么是runloop" class="headerlink" title="什么是runloop"></a>什么是runloop</h3><ul><li>Run loops是线程相关的的基础框架的一部分。一个runloop就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。其实内部就是do－while循环，这个循环内部不断地处理各种任务（比 如Source，Timer，Observer）。使用runloop的目的是让你的线程在有工作的时候忙于工作，而没工作的时候处于休眠状态。</li></ul><h3 id="runloop和线程的关系"><a href="#runloop和线程的关系" class="headerlink" title="runloop和线程的关系"></a>runloop和线程的关系</h3><ul><li>线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。</li><li>子线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。</li><li>子线程中，RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。</li><li>你只能在一个线程的内部获取其 RunLoop（主线程除外）。</li></ul><h3 id="runloop的接口"><a href="#runloop的接口" class="headerlink" title="runloop的接口"></a>runloop的接口</h3><ul><li>CFRunLoopRef<ul><li>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source&#x2F;Timer&#x2F;Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source&#x2F;Timer&#x2F;Observer，让其互不影响</li></ul></li><li>CFRunLoopModeRef</li><li>CFRunLoopSourceRef<ul><li>CFRunLoopSourceRef 是事件产生的地方。Source有两个版本：Source0 和 Source1。<ul><li>Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</li><li>Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程，其原理在下面会讲到。</li></ul></li></ul></li><li>CFRunLoopTimerRef<ul><li>CFRunLoopTimerRef 是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</li></ul></li><li>CFRunLoopObserverRef<ul><li>CFRunLoopObserverRef 是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。</li></ul></li></ul><h3 id="runloop的mode"><a href="#runloop的mode" class="headerlink" title="runloop的mode"></a>runloop的mode</h3><ul><li>kCFRunLoopDefaultMode&#x2F;NSDefaultRunLoopMode<ul><li>App的默认 Mode，通常主线程是在这个 Mode 下运行的。</li></ul></li><li>UITrackingRunLoopMode<ul><li>界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。</li></ul></li><li>UIInitializationRunLoopMode<ul><li>在刚启动App时第进入的第一个Mode，启动完成后就不再使用</li></ul></li><li>GSEventReceiveRunLoopMode<ul><li>接受系统事件的内部Mode，通常用不到</li></ul></li><li>kCFRunLoopCommonModes&#x2F;NSRunLoopCommonModes<ul><li>组合状态，这是一个占位的 Mode，没有实际作用。</li></ul></li></ul><h3 id="runloop内部逻辑"><a href="#runloop内部逻辑" class="headerlink" title="runloop内部逻辑"></a>runloop内部逻辑</h3><p><img src="http://blog.qiji.tech/wp-content/uploads/2016/04/RunLoop_1.png" alt="image"></p><ul><li>1、通知Observer：即将进入Loop</li><li>2、通知Observer：将要处理Timer</li><li>3、通知Observer：将要处理Source0</li><li>4、处理Source0</li><li>5、如果有Source1，跳到第9步</li><li>6、通知Observer：线程即将休眠</li><li>7、休眠，等待唤醒</li><li>8、通知Observer：线程刚被唤醒</li><li>9、处理唤醒时收到的消息，之后跳回2</li><li>10、通知Observer：即将退出Loop</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs scss">&#123;<br>    <span class="hljs-comment">/// 1. 通知Observers，即将进入RunLoop</span><br>    <span class="hljs-comment">/// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();</span><br>    <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopEntry);<br>    do &#123;<br> <br>        <span class="hljs-comment">/// 2. 通知 Observers: 即将触发 Timer 回调。</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopBeforeTimers);<br>        <span class="hljs-comment">/// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopBeforeSources);<br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__</span>(block);<br> <br>        <span class="hljs-comment">/// 4. 触发 Source0 (非基于port的) 回调。</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__</span>(source0);<br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__</span>(block);<br> <br>        <span class="hljs-comment">/// 6. 通知Observers，即将进入休眠</span><br>        <span class="hljs-comment">/// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopBeforeWaiting);<br> <br>        <span class="hljs-comment">/// 7. sleep to wait msg.</span><br>        <span class="hljs-built_in">mach_msg</span>() -&gt; <span class="hljs-built_in">mach_msg_trap</span>();<br>        <br> <br>        <span class="hljs-comment">/// 8. 通知Observers，线程被唤醒</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopAfterWaiting);<br> <br>        <span class="hljs-comment">/// 9. 如果是被Timer唤醒的，回调Timer</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__</span>(timer);<br> <br>        <span class="hljs-comment">/// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__</span>(dispatched_block);<br> <br>        <span class="hljs-comment">/// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件</span><br>        <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__</span>(source1);<br> <br> <br>    &#125; while (...);<br> <br>    <span class="hljs-comment">/// 10. 通知Observers，即将退出RunLoop</span><br>    <span class="hljs-comment">/// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();</span><br>    <span class="hljs-built_in">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</span>(kCFRunLoopExit);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><h3 id="runloop什么时候退出"><a href="#runloop什么时候退出" class="headerlink" title="runloop什么时候退出"></a>runloop什么时候退出</h3><ul><li>1、超过设定的超时</li><li>2、当前runloop中没有需要处理的timer、source</li><li>3、接收到exit信号</li></ul><h2 id="runloop在系统中的应用"><a href="#runloop在系统中的应用" class="headerlink" title="runloop在系统中的应用"></a>runloop在系统中的应用</h2><h3 id="1、AutoreleasePool"><a href="#1、AutoreleasePool" class="headerlink" title="1、AutoreleasePool"></a>1、AutoreleasePool</h3><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p><p>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p><p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p><h3 id="2、事件响应"><a href="#2、事件响应" class="headerlink" title="2、事件响应"></a>2、事件响应</h3><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 <code>__IOHIDEventSystemClientQueueCallback()</code></p><p>当一个硬件事件(触摸&#x2F;锁屏&#x2F;摇晃等)发生后，首先由 <code>IOKit.framework</code> 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。SpringBoard 只接收按键(锁屏&#x2F;静音等)，触摸，加速，接近传感器等几种 Event，随后用 <code>mach port</code> 转发给需要的App进程。随后苹果在APP内注册的 Source1 就会触发回调，并调用<code>_UIApplicationHandleEventQueue() </code>进行应用内部的分发。</p><p><code>_UIApplicationHandleEventQueue()</code> 会把 <code>IOHIDEvent </code>处理并包装成 <code>UIEvent</code> 进行处理或分发，其中包括识别 UIGesture&#x2F;处理屏幕旋转&#x2F;发送给 UIWindow 等。通常事件比如 <code>UIButton 点击、touchesBegin/Move/End/Cancel </code>事件都是在这个回调中完成的。</p><h3 id="3、手势识别"><a href="#3、手势识别" class="headerlink" title="3、手势识别"></a>3、手势识别</h3><p>当上面的 <code>_UIApplicationHandleEventQueue() </code>识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin&#x2F;Move&#x2F;End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p><p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 <code>_UIGestureRecognizerUpdateObserver()</code>，其内部会获取所有刚被标记为待处理的 <code>GestureRecognizer</code>，并执行<code>GestureRecognizer</code>的回调。</p><p>当有 UIGestureRecognizer 的变化(创建&#x2F;销毁&#x2F;状态改变)时，这个回调都会进行相应处理。</p><h3 id="4、界面更新"><a href="#4、界面更新" class="headerlink" title="4、界面更新"></a>4、界面更新</h3><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView&#x2F;CALayer 的层次时，或者手动调用了 UIView&#x2F;CALayer 的 <code>setNeedsLayout/setNeedsDisplay</code>方法后，这个 UIView&#x2F;CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p><p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br><code>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</code>。这个函数里会遍历所有待处理的 UIView&#x2F;CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p><h3 id="5、定时器"><a href="#5、定时器" class="headerlink" title="5、定时器"></a>5、定时器</h3><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop，这个稍后我会再单独写一页博客来分析。</p><h3 id="6、PerformSelecter"><a href="#6、PerformSelecter" class="headerlink" title="6、PerformSelecter"></a>6、PerformSelecter</h3><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p><h3 id="7、网络请求（现在的NSURLSession是否借助了runloop？）"><a href="#7、网络请求（现在的NSURLSession是否借助了runloop？）" class="headerlink" title="7、网络请求（现在的NSURLSession是否借助了runloop？）"></a>7、网络请求（现在的NSURLSession是否借助了runloop？）</h3><p>NSURLConnection 的工作过程也借助了runloop。使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p><p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p><p><img src="https://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_network.png" alt="image"></p><p>NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。</p><h2 id="你用runloop实现了什么"><a href="#你用runloop实现了什么" class="headerlink" title="你用runloop实现了什么"></a>你用runloop实现了什么</h2><h3 id="使用runloop开启一个常驻子线程"><a href="#使用runloop开启一个常驻子线程" class="headerlink" title="使用runloop开启一个常驻子线程"></a>使用runloop开启一个常驻子线程</h3><ul><li>AFNetworking2开启子线程，在后台线程接收 Delegate 回调  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">+ (<span class="hljs-type">void</span>)networkRequestThreadEntryPoint:(id)__unused object &#123;<br> <br>     @autoreleasepool &#123;<br>       [[NSThread currentThread] setName:@<span class="hljs-string">&quot;AFNetworking&quot;</span>];<br>       NSRunLoop *runLoop = [NSRunLoop currentRunLoop];<br>       [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];<br>       [runLoop run];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>线上实时卡顿监控<ul><li>NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources（3. 通知 Observers: 即将触发 Source0回调）和kCFRunLoopBeforeWaiting（6. 通知Observers，即将进入休眠）之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿</li><li><a href="https://www.jianshu.com/p/890d1ba05f4c">iOS线上实时卡顿监控</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-动态库与静态库的区别</title>
    <link href="/2021/02/16/%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/02/16/%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="静态库-Static-Library"><a href="#静态库-Static-Library" class="headerlink" title="静态库 (Static Library)"></a>静态库 (Static Library)</h3><ul><li><p>分发文件大</p></li><li><p>静态库默认仅将有用到的类文件<code>link</code>到<code>Mach-O</code>中(已类文件为最小链接单位)</p></li><li><p>ipa包小(为了APP瘦身，尽量将代码放静态库中) </p><ul><li>静态库中某个目标文件的代码没有被任何地方引用，则这个目标文件不会被链接到可执行文件中去(前提是不要使用<code>-Objc</code>和<code>-all_load</code>选项，分类代码经常被优化掉，一般都使用<code>-force_load</code>来处理静态库分类加载问题)</li></ul></li><li><p>APP冷启动速度快</p><ul><li>前提是不使用<code>动态库拆分</code>搭配<code>动态库懒加载方案</code></li><li>APP启动流程中有<code>rebase</code>和<code>bind</code>，多个静态库只需要<code>rebase</code>和<code>bind</code>一次</li></ul></li><li><p>存在符号冲突可能</p></li><li><p>共享<code>TEXT段</code></p><ul><li>iOS9以前单个Mach-O的TEXT限制60M</li><li>iOS9以后单个Mach-O的TEXT限制500M</li></ul></li><li><p>不需要额外签名验证  </p></li><li><p>静态库符号的可见性可以在链接期间被修改 </p></li><li><p>文件格式多为<code>fat</code>格式的静态库文件</p></li><li><p>形式多为<code>.a</code>与<code>.framework</code></p></li><li><p>静态库不含<code>bitcode</code>时，引用静态库的目标部署时就不能包含<code>bitcode</code></p></li></ul><h3 id="动态库-Dynamic-Library"><a href="#动态库-Dynamic-Library" class="headerlink" title="动态库 (Dynamic Library)"></a>动态库 (Dynamic Library)</h3><ul><li><p>分发文件小</p></li><li><p>ipa包大  （前提是不考虑懒加载的情况）</p><ul><li>动态库会把整个<code>lib</code>复制进<code>ipa</code>中</li></ul></li><li><p>APP冷启动速度慢</p><ul><li>APP启动流程中有<code>rebase</code>和<code>bind</code>，多个动态库只需要多次<code>rebase</code>和<code>bind</code></li></ul></li><li><p>需要设置合适的<code>runpath</code> </p></li><li><p>需要动态加载</p></li><li><p>需要签名且需要验证签名</p><ul><li>会检查<code>framework</code>的签名，签名中必须包含<code>TeamIdentifier</code>,并且<code>framework</code>和host APP的<code>TeamIdentifier</code>必须一致</li><li>Xcode重签命，保证动态库签名一致性</li></ul></li><li><p>需要导出符号</p></li><li><p>重复的<code>arch</code>结构</p></li><li><p>APP与动态库中重复代码可以共存，不会发生符号冲突</p><ul><li>因为可执行文件在构建链接阶段，遇到静态库则吸附进来，遇到动态库则打个标记，彼此保持独立性</li><li>对于来自动态库的符号，编译器会打个标记，交给<code>dyld</code>去加载和链接符号，也就是把链接的过程推迟到了运行时执行。（比如APP使用的是3.0版本SDK，动态库使用的是1.0版本SDK，能正常运行，但是会有风险）</li></ul></li><li><p>链接后需要包含分发大小</p></li><li><p>冷启动过程中，默认会在<code>main</code>函数之前加载</p><ul><li>默认情况下，过多的动态库会拖慢冷启动速度</li><li>如果采用懒加载动态库的形式，能够加快APP的启动速度,可以使用<code>dlopen</code>和<code>bundle</code>懒加载优化</li></ul></li><li><p>文件格式<code>Mach-O</code>（一个没有<code>main</code>函数的可执行文件）</p></li><li><p>动态库不包含<code>bitcode</code>时，引用动态库的目标部署时可以包含<code>bitcode</code></p></li><li><p><code>CocoaPods</code>从<code>v0.36.0</code>开始，可添加关键字<code>use_frameworks!</code>编译成类似<code>Embedded Framework</code>的结构（可以称之为<code>umbrella framework</code>）</p><ul><li>缺点：默认把项目的依赖全部改为动态库（可是使用<code>use_modular_headers!</code>,也可以在<code>podsepc</code>添加<code>s.static_framework = true</code>规避）</li><li><code>CocoaPods</code>执行脚本把动态库嵌入到<code>.app</code>的<code>Framework</code>目录下（相当于在<code>Embedded Binaries</code>加入动态库）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2020/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2020/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="简述OSI七层协议"><a href="#简述OSI七层协议" class="headerlink" title="简述OSI七层协议"></a>简述OSI七层协议</h3><ul><li>OSI七层协议包括：物理层，数据链路层，网络层，运输层，会话层，表示层， 应用层</li></ul><hr><hr><h3 id="简述TCP-x2F-IP五层协议"><a href="#简述TCP-x2F-IP五层协议" class="headerlink" title="简述TCP&#x2F;IP五层协议"></a>简述TCP&#x2F;IP五层协议</h3><ul><li>TCP&#x2F;IP五层协议包括：物理层，数据链路层，网络层，运输层，应用层</li></ul><hr><hr><h3 id="物理层有什么作用"><a href="#物理层有什么作用" class="headerlink" title="物理层有什么作用"></a>物理层有什么作用</h3><ul><li>主要解决两台物理机之间的通信，通过二进制比特流的传输来实现，二进制数据表现为电流电压上的强弱，到达目的地再转化为二进制机器码。网卡、集线器工作在这一层。</li></ul><hr><hr><h3 id="数据链路层有什么作用"><a href="#数据链路层有什么作用" class="headerlink" title="数据链路层有什么作用"></a>数据链路层有什么作用</h3><ul><li>在不可靠的物理介质上提供可靠的传输，接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路。提供物理地址寻址功能。交换机工作在这一层。</li></ul><hr><hr><h3 id="网络层有什么作用"><a href="#网络层有什么作用" class="headerlink" title="网络层有什么作用"></a>网络层有什么作用</h3><ul><li>将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方，通过路由选择算法为分组通过通信子网选择最佳路径。路由器工作在这一层。</li></ul><hr><hr><h3 id="传输层有什么作用"><a href="#传输层有什么作用" class="headerlink" title="传输层有什么作用"></a>传输层有什么作用</h3><ul><li>传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</li></ul><hr><hr><h3 id="会话层有什么作用"><a href="#会话层有什么作用" class="headerlink" title="会话层有什么作用"></a>会话层有什么作用</h3><ul><li>建立会话：身份验证，权限鉴定等；保持会话：对该会话进行维护，在会话维持期间两者可以随时使用这条会话传输局；断开会话：当应用程序或应用层规定的超时时间到期后，OSI会话层才会释放这条会话。</li></ul><hr><hr><h3 id="表示层有什么作用"><a href="#表示层有什么作用" class="headerlink" title="表示层有什么作用"></a>表示层有什么作用</h3><ul><li>对数据格式进行编译，对收到或发出的数据根据应用层的特征进行处理，如处理为文字、图片、音频、视频、文档等，还可以对压缩文件进行解压缩、对加密文件进行解密等。</li></ul><hr><hr><h3 id="应用层有什么作用"><a href="#应用层有什么作用" class="headerlink" title="应用层有什么作用"></a>应用层有什么作用</h3><ul><li>提供应用层协议，如HTTP协议，FTP协议等等，方便应用程序之间进行通信。</li></ul><hr><hr><h3 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a>TCP与UDP区别</h3><ul><li>TCP作为面向流的协议，提供可靠的、面向连接的运输服务，并且提供点对点通信 </li><li></li><li>UDP作为面向报文的协议，不提供可靠交付，并且不需要连接，不仅仅对点对点，也支持多播和广播</li></ul><hr><hr><h3 id="为何TCP可靠"><a href="#为何TCP可靠" class="headerlink" title="为何TCP可靠"></a>为何TCP可靠</h3><ul><li>TCP有三次握手建立连接，四次挥手关闭连接的机制。除此之外还有滑动窗口和拥塞控制算法。最最关键的是还保留超时重传的机制。对于每份报文也存在校验，保证每份报文可靠性。</li></ul><hr><hr><h3 id="为何UDP不可靠"><a href="#为何UDP不可靠" class="headerlink" title="为何UDP不可靠"></a>为何UDP不可靠</h3><ul><li>UDP面向数据报无连接的，数据报发出去，就不保留数据备份了。仅仅在IP数据报头部加入校验和复用。UDP没有服务器和客户端的概念。UDP报文过长的话是交给IP切成小段，如果某段报废报文就废了。</li></ul><hr><hr><h3 id="简述TCP粘包现象"><a href="#简述TCP粘包现象" class="headerlink" title="简述TCP粘包现象"></a>简述TCP粘包现象</h3><ul><li>TCP是面向流协议，发送的单位是字节流，因此会将多个小尺寸数据被封装在一个tcp报文中发出去的可能性。可以简单的理解成客户端调用了两次send，服务器端一个recv就把信息都读出来了。</li></ul><h3 id="TCP粘包现象处理方法"><a href="#TCP粘包现象处理方法" class="headerlink" title="TCP粘包现象处理方法"></a>TCP粘包现象处理方法</h3><ul><li>固定发送信息长度，或在两个信息之间加入分隔符。</li></ul><hr><hr><h3 id="简述TCP协议的滑动窗口"><a href="#简述TCP协议的滑动窗口" class="headerlink" title="简述TCP协议的滑动窗口"></a>简述TCP协议的滑动窗口</h3><ul><li>滑动窗口是传输层进行流量控制的一种措施，接收方通过通告发 送方自己的窗口大小，从而控制发送方的发送速度，防止发送方发送速度过快而导致自己被淹没。</li></ul><h3 id="简述TCP协议的拥塞控制"><a href="#简述TCP协议的拥塞控制" class="headerlink" title="简述TCP协议的拥塞控制"></a>简述TCP协议的拥塞控制</h3><ul><li><p>拥塞是指一个或者多个交换点的数据报超载，TCP又会有重传机制，导致过载。为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量.</p></li><li><p>当cwnd &lt; ssthresh 时，使用慢开始算法。当cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。当cwnd &#x3D; ssthresh 时，即可使用慢开始算法，也可使用拥塞避免算法。</p></li><li><p>慢开始：由小到大逐渐增加拥塞窗口的大小，每接一次报文，cwnd指数增加。</p></li><li><p>拥塞避免：cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1。</p></li><li><p>快恢复之前的策略：发送方判断网络出现拥塞，就把ssthresh设置为出现拥塞时发送方窗口值的一半，继续执行慢开始，之后进行拥塞避免。</p></li><li><p>快恢复：发送方判断网络出现拥塞，就把ssthresh设置为出现拥塞时发送方窗口值的一半，并把cwnd设置为ssthresh的一半，之后进行拥塞避免。</p></li></ul><hr><hr><h3 id="简述快重传"><a href="#简述快重传" class="headerlink" title="简述快重传"></a>简述快重传</h3><ul><li>如果在超时重传定时器溢出之前，接收到连续的三个重复冗余ACK，发送端便知晓哪个报文段在传输过程中丢失了，于是重发该报文段，不需要等待超时重传定时器溢出再发送该报文。</li></ul><hr><hr><h3 id="TCP三次握手过程"><a href="#TCP三次握手过程" class="headerlink" title="TCP三次握手过程"></a>TCP三次握手过程</h3><ul><li>第一次握手:客户端将标志位SYN置为1，随机产生一个值序列号seq&#x3D;x，并将该数据包发送给服务端，客户端 进入syn_sent状态，等待服务端确认。</li><li>第二次握手:服务端收到数据包后由标志位SYN&#x3D;1知道客户端请求建立连接，服务端将标志位SYN和 ACK都置为1，ack&#x3D;x+1,随机产生一个值seq&#x3D;y，并将该数据包发送给客户端以确认连接请求，服务端进入syn_rcvd状态。</li><li>第三次握手:客户端收到确认后检查,如果正确则将标志位ACK为1，ack&#x3D;y+1，并将该数据包发送给服务端，服务端进行检查如果正确则连接建立成功，客户端和服务端进入established状态，完成三次握手，随后客户端和服务端之间可以开始传输 数据了</li></ul><hr><hr><h3 id="简述半连接队列"><a href="#简述半连接队列" class="headerlink" title="简述半连接队列"></a>简述半连接队列</h3><ul><li>TCP握手中，当服务器处于SYN_RCVD 状态，服务器会把此种状态下请求连接放在一个队列里，该队列称为半连接队列。</li></ul><hr><hr><h3 id="简述SYN攻击"><a href="#简述SYN攻击" class="headerlink" title="简述SYN攻击"></a>简述SYN攻击</h3><ul><li>SYN攻击即利用TCP协议缺陷，通过发送大量的半连接请求，占用半连接队列，耗费CPU和内存资源。</li></ul><h4 id="优化方式："><a href="#优化方式：" class="headerlink" title="优化方式："></a>优化方式：</h4><ul><li>缩短SYN Timeout时间<br>记录IP，若连续受到某个IP的重复SYN报文，从这个IP地址来的包会被一概丢弃。</li></ul><hr><hr><h3 id="TCP四次挥手过程"><a href="#TCP四次挥手过程" class="headerlink" title="TCP四次挥手过程"></a>TCP四次挥手过程</h3><ul><li>第一次挥手：客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入fin_wait_1状态。</li><li>第二次挥手：服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1，服务端进入Close_wait状态。此时TCP连接处于半关闭状态，即客户端已经没有要发送的数据了，但服务端若发送数据，则客户端仍要接收。</li><li>第三次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入Last_ack状态。</li><li>第四次挥手：客户端收到FIN后，客户端进入Time_wait状态，接着发送一个ACK给服务端，确认后，服务端进入Closed状态，完成四次挥手。</li></ul><hr><hr><h3 id="为什么TCP挥手需要4次"><a href="#为什么TCP挥手需要4次" class="headerlink" title="为什么TCP挥手需要4次"></a>为什么TCP挥手需要4次</h3><ul><li><p>主要原因是当服务端收到客户端的 FIN 数据包后，服务端可能还有数据没发完，不会立即close。</p></li><li><p>所以服务端会先将 ACK 发过去告诉客户端我收到你的断开请求了，但请再给我一点时间，这段时间用来发送剩下的数据报文，发完之后再将 FIN 包发给客户端表示现在可以断了。之后客户端需要收到 FIN 包后发送 ACK 确认断开信息给服务端。</p></li></ul><h3 id="为什么四次挥手释放连接时需要等待2MSL"><a href="#为什么四次挥手释放连接时需要等待2MSL" class="headerlink" title="为什么四次挥手释放连接时需要等待2MSL"></a>为什么四次挥手释放连接时需要等待2MSL</h3><ul><li>MSL即报文最大生存时间。设置2MSL可以保证上一次连接的报文已经在网络中消失，不会出现与新TCP连接报文冲突的情况。</li></ul><hr><hr><h3 id="简述DNS协议"><a href="#简述DNS协议" class="headerlink" title="简述DNS协议"></a>简述DNS协议</h3><ul><li>DNS协议是基于UDP的应用层协议，它的功能是根据用户输入的域名，解析出该域名对应的IP地址，从而给客户端进行访问。</li></ul><h3 id="简述DNS解析过程"><a href="#简述DNS解析过程" class="headerlink" title="简述DNS解析过程"></a>简述DNS解析过程</h3><ol><li><p>客户机发出查询请求，在本地计算机缓存查找，若没有找到，就会将请求发送给dns服务器</p></li><li><p>本地dns服务器会在自己的区域里面查找，找到即根据此记录进行解析，若没有找到，就会在本地的缓存里面查找</p></li><li><p>本地服务器没有找到客户机查询的信息，就会将此请求发送到根域名dns服务器</p></li><li><p>根域名服务器解析客户机请求的根域部分，它把包含的下一级的dns服务器的地址返回到客户机的dns服务器地址</p></li><li><p>客户机的dns服务器根据返回的信息接着访问下一级的dns服务器</p></li><li><p>这样递归的方法一级一级接近查询的目标，最后在有目标域名的服务器上面得到相应的IP信息</p></li><li><p>客户机的本地的dns服务器会将查询结果返回给我们的客户机</p></li><li><p>客户机根据得到的ip信息访问目标主机，完成解析过程</p></li></ol><hr><hr><h3 id="简述HTTP协议"><a href="#简述HTTP协议" class="headerlink" title="简述HTTP协议"></a>简述HTTP协议</h3><ul><li>http协议是超文本传输协议。它是基于TCP协议的应用层传输协议，即客户端和服务端进行数据传输的一种规则。该协议本身HTTP 是一种无状态的协议。</li></ul><hr><hr><h3 id="简述cookie"><a href="#简述cookie" class="headerlink" title="简述cookie"></a>简述cookie</h3><ul><li><p>HTTP 协议本身是无状态的，为了使其能处理更加复杂的逻辑，HTTP&#x2F;1.1 引入 Cookie 来保存状态信息。</p></li><li><p>Cookie是由服务端产生的，再发送给客户端保存，当客户端再次访问的时候，服务器可根据cookie辨识客户端是哪个，以此可以做个性化推送，免账号密码登录等等。</p></li></ul><hr><hr><h3 id="简述session"><a href="#简述session" class="headerlink" title="简述session"></a>简述session</h3><ul><li>session用于标记特定客户端信息，存在在服务器的一个文件里。一般客户端带Cookie对服务器进行访问，可通过cookie中的session id从整个session中查询到服务器记录的关于客户端的信息。</li></ul><h3 id="简述http状态码和对应的信息"><a href="#简述http状态码和对应的信息" class="headerlink" title="简述http状态码和对应的信息"></a>简述http状态码和对应的信息</h3><ul><li><p>1XX：接收的信息正在处理</p></li><li><p>2XX：请求正常处理完毕</p></li><li><p>3XX：重定向</p></li><li><p>4XX：客户端错误</p></li><li><p>5XX：服务端错误</p></li><li><p>常见错误码：301：永久重定向 302：临时重定向 304：资源没修改，用之前缓存就行 400：客户端请求的报文有错误 403：表示服务器禁止访问资源 404：表示请求的资源在服务器上不存在或未找到</p></li><li><p>转发和重定向的区别<br>转发是服务器行为。服务器直接向目标地址访问URL,将相应内容读取之后发给浏览器，用户浏览器地址栏URL不变，转发页面和转发到的页面可以共享request里面的数据。</p></li><li><p>重定向是利用服务器返回的状态码来实现的，如果服务器返回301或者302，浏览器收到新的消息后自动跳转到新的网址重新请求资源。用户的地址栏url会发生改变，而且不能共享数据。</p></li></ul><hr><hr><ul><li><p>简述http1.0<br>规定了请求头和请求尾，响应头和响应尾（get post）</p></li><li><p>每一个请求都是一个单独的连接，做不到连接的复用</p></li></ul><hr><hr><h3 id="简述http1-1的改进"><a href="#简述http1-1的改进" class="headerlink" title="简述http1.1的改进"></a>简述http1.1的改进</h3><ul><li><p>HTTP1.1默认开启长连接，在一个TCP连接上可以传送多个HTTP请求和响应。使用 TCP 长连接的方式改善了 HTTP&#x2F;1.0 短连接造成的性能开销。</p></li><li><p>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</p></li><li><p>服务端无法主动push</p></li></ul><hr><hr><h3 id="简述HTTP短连接与长连接区别"><a href="#简述HTTP短连接与长连接区别" class="headerlink" title="简述HTTP短连接与长连接区别"></a>简述HTTP短连接与长连接区别</h3><p>HTTP中的长连接短连接指HTTP底层TCP的连接。</p><ul><li><p>短连接：客户端与服务器进行一次HTTP连接操作，就进行一次TCP连接，连接结束TCP关闭连接。</p></li><li><p>长连接：如果HTTP头部带有参数keep-alive，即开启长连接网页完成打开后，底层用于传输数据的TCP连接不会直接关闭，会根据服务器设置的保持时间保持连接，保持时间过后连接关闭。</p></li></ul><hr><hr><h3 id="简述http2-0的改进"><a href="#简述http2-0的改进" class="headerlink" title="简述http2.0的改进"></a>简述http2.0的改进</h3><ul><li><p>提出多路复用。多路复用前，文件时串行传输的，请求a文件，b文件只能等待，并且连接数过多。引入多路复用，a文件b文件可以同时传输。</p></li><li><p>引入了二进制数据帧。其中帧对数据进行顺序标识，有了序列id，服务器就可以进行并行传输数据。</p></li></ul><h3 id="http与https的区别"><a href="#http与https的区别" class="headerlink" title="http与https的区别"></a>http与https的区别</h3><ul><li>http所有传输的内容都是明文，并且客户端和服务器端都无法验证对方的身份。https具有安全性的ssl加密传输协议，加密采用对称加密， https协议需要到ca申请证书，一般免费证书很少，需要交费。</li></ul><hr><hr><h3 id="简述TLS-x2F-SSL-HTTP-HTTPS的关系"><a href="#简述TLS-x2F-SSL-HTTP-HTTPS的关系" class="headerlink" title="简述TLS&#x2F;SSL, HTTP, HTTPS的关系"></a>简述TLS&#x2F;SSL, HTTP, HTTPS的关系</h3><ul><li><p>SSL全称为Secure Sockets Layer即安全套接层，其继任为TLSTransport Layer Security传输层安全协议，均用于在传输层为数据通讯提供安全支持。</p></li><li><p>可以将HTTPS协议简单理解为HTTP协议＋TLS&#x2F;SSL</p></li></ul><hr><hr><h3 id="https的连接过程"><a href="#https的连接过程" class="headerlink" title="https的连接过程"></a>https的连接过程</h3><ul><li><p>浏览器将支持的加密算法信息发给服务器<br>服务器选择一套浏览器支持的加密算法，以证书的形式回发给浏览器<br>客户端(SSL&#x2F;TLS)解析证书验证证书合法性，生成对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，用服务器的公钥对客户端密钥进行非对称加密。<br>客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端对称密钥发送给服务器<br>服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。<br>服务器将加密后的密文发送给客户端<br>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成<br>Get与Post区别<br>Get：指定资源请求数据，刷新无害，Get请求的数据会附加到URL中，传输数据的大小受到url的限制。</p></li><li><p>Post：向指定资源提交要被处理的数据。刷新会使数据会被重复提交。post在发送数据前会先将请求头发送给服务器进行确认，然后才真正发送数据。</p></li><li><p>Get方法参数有大小限制吗<br>一般HTTP协议里并不限制参数大小限制。但一般由于get请求是直接附加到地址栏里面的，由于浏览器地址栏有长度限制，因此使GET请求在浏览器实现层面上看会有长度限制。</p></li></ul><h3 id="了解REST-API吗"><a href="#了解REST-API吗" class="headerlink" title="了解REST API吗"></a>了解REST API吗</h3><ul><li><p>REST API全称为表述性状态转移（Representational State Transfer，REST）即利用HTTP中get、post、put、delete以及其他的HTTP方法构成REST中数据资源的增删改查操作：</p></li><li><p>Create ：POST<br>Read ：GET<br>Update ：PUT&#x2F;PATCH<br>Delete：DELETE<br>浏览器中输入一个网址后，具体发生了什么<br>进行DNS解析操作，根据DNS解析的结果查到服务器IP地址<br>通过ip寻址和arp，找到服务器，并利用三次握手建立TCP连接<br>浏览器生成HTTP报文，发送HTTP请求，等待服务器响应<br>服务器处理请求，并返回给浏览器<br>根据HTTP是否开启长连接，进行TCP的挥手过程<br>浏览器根据收到的静态资源进行页面渲染</p></li></ul><hr><hr><h3 id="HTTPS相关"><a href="#HTTPS相关" class="headerlink" title="HTTPS相关"></a>HTTPS相关</h3><p>1）HTTPS 结合使用了 非对称加密算法，对称加密算法，hash算法，分别利用他们的优势，避免他们的缺点。利用非对称加密算法获得对称加密算法的秘钥，保证他的安全性；然后实际的网页内容的加密使用的是对称加密算法，利用了对称加密算法速度快的优势，hash算法主要是防止篡改的发生，是一种校验机制，最后数字证书，保证了服务器在将非对称加密算法的公钥传给浏览器时的安全性(不会被中间人篡改)，同时也标志了服务器的身份。</p><p>2）HTTPS的四大金刚：</p><p>非对称加密算法(对称加密算法的秘钥) + 对称加密算法(加密内容) + 数字证书(防止篡改非对称加密算法的公钥) + HASH算法(防止篡改消息)&#x3D;&#x3D; HTTPS</p><p>3）HTTPS的本质是什么？</p><p>HTTPS的本质就是在HTTP连接发起之前，先使用SSL&#x2F;TLS协议，协调客户端和服务端，在两端各自生产一个对称加密算法的秘钥，</p><p>然后使用普通的HTTP协议传输 经过对称加密算法加密的网页内容。因为对称加密算法的秘钥是安全的，所以对称加密算法加密的网页内容也是安全的。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-同步方案（锁）</title>
    <link href="/2020/04/16/iOS%E4%B9%8B%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88%EF%BC%88%E9%94%81%EF%BC%89/"/>
    <url>/2020/04/16/iOS%E4%B9%8B%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88%EF%BC%88%E9%94%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>近期要写一个多线程工具，把之前学习的多线程，以及线程同步复习一下 </p><p>多线程的本质：有多条线程，但是只能执行一条，如果间隔时间设置的足够小，就给人的感觉是多条线程是同时进行的，时间片轮转调度算法</p><p>iOS中线程同步方案</p><ul><li>OSSpinLock</li><li>os_unfair_lock</li><li>pthread_mutex</li><li>dispatch_semaphore</li><li>Dispatch_queue(DISPATCH_QUEUE_SERIAL)</li><li>NSLock</li><li>NSRecursiveLock</li><li>NSCondition</li><li>NSConditionLock</li><li>@synchronized</li></ul><h4 id="OSSpinLock-自旋锁"><a href="#OSSpinLock-自旋锁" class="headerlink" title="OSSpinLock - 自旋锁"></a>OSSpinLock - 自旋锁</h4><p> 等待锁🔐的线程会处于忙等状态，一直占用CPU资源</p><p>会出现优先级翻转的问题，如果线程之间的优先级不同，如果低优先级的锁先进来，把锁锁住，那么高优先级的线程进来就会一直忙等，但是系统又会分配时间资源给线程高的，从而导致低优先级的线程无法执行完自己的代码，从而导致优先级低的锁无法释放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/// 初始化锁<br>self.lock = OS_SPINLOCK_INIT;<br>   <br>- (void)saleTicket&#123;<br>    /// 加锁<br>  OSSpinLockLock(&amp;_lock);<br>  //BOOL isLock =  OSSpinLockTry(&amp;_lock); <br>  int oldTicketsCount = self.ticketsCount;<br>  sleep(.2);<br>  oldTicketsCount--;<br>  self.ticketsCount = oldTicketsCount;<br>  NSLog(@&quot;还剩下%d张票 = %@&quot;,self.ticketsCount,[NSThread currentThread]);<br>  /// 解锁<br>  OSSpinLockUnlock(&amp;_lock);<br>&#125;<br>   <br></code></pre></td></tr></table></figure><hr><h4 id="os-unfair-lock-iOS10后支持-（本质是互斥锁）"><a href="#os-unfair-lock-iOS10后支持-（本质是互斥锁）" class="headerlink" title="os_unfair_lock - iOS10后支持 （本质是互斥锁）"></a>os_unfair_lock - iOS10后支持 （本质是互斥锁）</h4><p>用于替代<code>OSSpinLock</code> 的锁，使用的技术不再是忙等，而是休眠等待唤醒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/// 初始化锁<br>self.lock = OS_UNFAIR_LOCK_INIT;<br>- (void)saleTicket&#123;   <br>    /// 加锁<br>    os_unfair_lock_lock(&amp;_lock);<br>//  BOOL isLock = os_unfair_lock_trylock(&amp;lock);<br>    // 卖票<br>    [self sale];<br>    /// 解锁<br>    os_unfair_lock_unlock(&amp;_lock);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="pthread-mutex"><a href="#pthread-mutex" class="headerlink" title="pthread_mutex"></a>pthread_mutex</h4><p><code>mutex</code> 叫做”互斥锁”，等待锁的线程会处于休眠状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/// 初始化属性    <br>pthread_mutexattr_t attr;<br>pthread_mutexattr_init(&amp;attr);<br>pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_DEFAULT);<br>/// 初始化锁<br>pthread_mutex_init(&amp;_lock, &amp;attr);<br><br>//销毁属性 pthread_mutexattr_destroy(&amp;attr);<br>//销毁锁   pthread_mutex_destroy(&amp;_lock);<br><br>- (void)saleTicket&#123; <br>    /// 加锁<br>    pthread_mutex_lock(&amp;_lock);<br>    ///尝试 加锁<br>    //BOOL islock = pthread_mutex_trylock(&amp;_lock);<br>    // 卖票<br>    [self sale];<br>    /// 解锁<br>    pthread_mutex_unlock(&amp;_lock);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/*<br> * Mutex type attributes<br> */<br>#define PTHREAD_MUTEX_NORMAL0  //普通状态锁<br>#define PTHREAD_MUTEX_ERRORCHECK1<br>#define PTHREAD_MUTEX_RECURSIVE2  //用于处理递归锁<br>#define PTHREAD_MUTEX_DEFAULTPTHREAD_MUTEX_NORMAL<br><br></code></pre></td></tr></table></figure><h5 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h5><p>递归锁：允许同一个线程对一把锁重复加锁</p><p>线程一 : 调用<code>saleTicket</code> (+🔐)</p><ul><li>调用<code>saleTicket</code> (+🔐)</li><li>调用<code>saleTicket</code> (+🔐)</li></ul><p> 线程二：调用<code>saleTicket</code> (发现已经被加锁了，等待) </p><p>当锁中间的代码遇到递归调用，打印的结果永远只有一条<code>saleTicket</code>，因为没有人能够走到解锁的那一步。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss">- (void)saleTicket&#123;<br>    <span class="hljs-comment">/// 加锁</span><br>    <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;_lock);<br>    <span class="hljs-comment">///尝试 加锁</span><br>    <span class="hljs-comment">//BOOL islock = pthread_mutex_trylock(&amp;_lock);</span><br>    <span class="hljs-built_in">NSLog</span>(@&quot;%s&quot;,__func__);<br>    <span class="hljs-comment">// 卖票 递归调用</span><br>    <span class="hljs-selector-attr">[self saleTicket]</span>;<br>    <span class="hljs-comment">/// 解锁</span><br>    <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;_lock);<br> <br>&#125;<br></code></pre></td></tr></table></figure><p> <code>pthread</code>是支持递归锁的，只需要把初始化属性改为递归锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE);<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxupqijd8nj30c205igme.jpg"></p><h5 id="条件锁"><a href="#条件锁" class="headerlink" title="条件锁"></a>条件锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@property (nonatomic, assign) pthread_cond_t cond;<br><br>/// 初始化条件<br>pthread_mutex_init(&amp;_lock, &amp;attr);<br><br>// 销毁条件<br>pthread_cond_destroy(&amp;_cond);<br><br>[[[NSThread alloc]initWithTarget:self selector:@selector(__remove) object:nil]start];<br>[[[NSThread alloc]initWithTarget:self selector:@selector(__add) object:nil]start];<br><br>- (void)__remove&#123;<br>   <br>    pthread_mutex_lock(&amp;_lock);<br>    <br>    if (self.dataArray.count == 0) &#123;<br>        //一旦进入等待状态，就会放开这把锁，直到别人发送信号唤醒<br>        pthread_cond_wait(&amp;_cond, &amp;_lock);<br>    &#125;<br>    [self.dataArray removeLastObject];<br>    NSLog(@&quot;删除了元素&quot;);<br>    pthread_mutex_unlock(&amp;_lock);<br>&#125;<br><br>- (void)__add&#123;<br>    <br>    pthread_mutex_lock(&amp;_lock);<br>    <br>    [self.dataArray addObject:@&quot;123&quot;];<br>    NSLog(@&quot;添加了元素&quot;);<br>     <br>    pthread_cond_signal(&amp;_cond);<br>    pthread_mutex_unlock(&amp;_lock);<br>    // 这里需要保证pthread_cond_signal在pthread_mutex_unlock之前<br>    // 如果在之后的话，锁解开了，发送信号的这个过程中有可能被别的锁抢先进来了<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h4 id="NSLock-x2F-NSRecursiveLock-x2F-NSCondition"><a href="#NSLock-x2F-NSRecursiveLock-x2F-NSCondition" class="headerlink" title="NSLock&#x2F;NSRecursiveLock&#x2F;NSCondition"></a>NSLock&#x2F;NSRecursiveLock&#x2F;NSCondition</h4><ul><li><p><code>NSLock</code>是对<code>mutex</code>普通锁的封装</p></li><li><p><code>NSRecursiveLock</code> 是对<code>mutex</code>递归锁的封装</p></li><li><p><code>NSCondition</code> 是对<code>mutex</code>和<code>cont</code>的封装</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@protocol NSLocking<br><br>- (void)lock;<br>- (void)unlock;<br><br>@end<br><br>@interface NSLock : NSObject &lt;NSLocking&gt; &#123;<br>@private<br>    void *_priv;<br>&#125;<br><br>- (BOOL)tryLock; // 尝试加锁<br>- (BOOL)lockBeforeDate:(NSDate *)limit; //在这个时间之前等不到这个锁，都会睡眠<br><br>@property (nullable, copy) NSString *name API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));<br>@end<br></code></pre></td></tr></table></figure><p>可以查看GNUStep看到<code>NSLock</code>的实现</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxusubtzxlj30js0b8400.jpg"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@interface NSConditionLock : NSObject &lt;NSLocking&gt; &#123;<br>@private<br>    void *_priv;<br>&#125;<br><br>- (instancetype)initWithCondition:(NSInteger)condition NS_DESIGNATED_INITIALIZER;<br><br>@property (readonly) NSInteger condition;<br>- (void)lockWhenCondition:(NSInteger)condition;<br>- (BOOL)tryLock;<br>- (BOOL)tryLockWhenCondition:(NSInteger)condition;<br>- (void)unlockWithCondition:(NSInteger)condition;<br>- (BOOL)lockBeforeDate:(NSDate *)limit;<br>- (BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit;<br><br>@property (nullable, copy) NSString *name API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));<br><br>@end<br></code></pre></td></tr></table></figure><hr><h4 id="Dispatch-queue-DISPATCH-QUEUE-SERIAL-串行队列"><a href="#Dispatch-queue-DISPATCH-QUEUE-SERIAL-串行队列" class="headerlink" title="Dispatch_queue(DISPATCH_QUEUE_SERIAL) - 串行队列"></a>Dispatch_queue(DISPATCH_QUEUE_SERIAL) - 串行队列</h4><ul><li>串行队列，也可以实现线程同步，保证了每一条线程的操作都是按顺序的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">  @property (nonatomic, strong) dispatch_queue_t  queen;<br>  <br>  self.queen =  dispatch_queue_create(&quot;123&quot;, DISPATCH_QUEUE_SERIAL);<br>  <br>  - (void)test&#123;<br>    self.ticketsCount = 20;<br>    <br>    dispatch_async(self.queen, ^&#123;<br>        for (int i = 0; i&lt;5; i++) &#123;<br>            [self saleTicket];<br>        &#125;<br>    &#125;);<br>    <br>    dispatch_async(self.queen, ^&#123;<br>        for (int i = 0; i&lt;5; i++) &#123;<br>            [self saleTicket];<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="dispatch-semaphore-信号量"><a href="#dispatch-semaphore-信号量" class="headerlink" title="dispatch_semaphore - 信号量"></a>dispatch_semaphore - 信号量</h4><ul><li>信号量的初始值，可以用来控制线程的并发访问的最大数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@property (nonatomic, strong) dispatch_semaphore_t semaphore;<br>  // 设置最大并发数     <br> self.semaphore = dispatch_semaphore_create(1);<br>      <br>  for (int i = 0; i&lt;20; i++) &#123;<br>     [[[NSThread alloc]initWithTarget:self selector:@selector(test) object:nil]start];<br>  &#125;<br>  <br>- (void)test&#123;    <br>    // 如果信号量的值&gt;0,就让信号量减1，然后继续执行下面的代码<br>    // 直到信号量的值&lt;=0的时候，就会休眠等待<br>    // DISPATCH_TIME_FOREVER永远 或者 设置成 DISPATCH_TIME_NOW现在立即<br>    dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER);<br>    self.ticketsCount--;<br>    sleep(2);<br>    NSLog(@&quot;剩下的票为 %d&quot;,self.ticketsCount);<br>    //让信号量的值+1<br>    dispatch_semaphore_signal(self.semaphore);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h4><ul><li><code>@synchronized</code>是对<code>mutex</code>递归锁的封装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@synchronized (self) &#123; //objc_sync_enter<br>&#125; // objc_sync_exit<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">int objc_sync_enter(id obj)<br>&#123;<br>    int result = OBJC_SYNC_SUCCESS;<br><br>    if (obj) &#123;<br>        SyncData* data = id2data(obj, ACQUIRE);<br>        ASSERT(data);<br>        data-&gt;mutex.lock();<br>    &#125; else &#123;<br>        // @synchronized(nil) does nothing<br>        if (DebugNilSync) &#123;<br>            _objc_inform(&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;);<br>        &#125;<br>        objc_sync_nil();<br>    &#125;<br><br>    return result;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>id2data</code> 方法内部</p><p>![image-20211229175537934](&#x2F;Users&#x2F;karthrine&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211229175537934.png)</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxuusl6m2wj30cm01z74g.jpg"></p><p>内部是一个哈希表，把<code>obj</code>当做<code>key</code> ，<code>data-&gt;mutex.lock();</code> 拿到唯一的mutex锁，来加锁</p><hr><h4 id="自旋锁和互斥锁对比"><a href="#自旋锁和互斥锁对比" class="headerlink" title="自旋锁和互斥锁对比"></a>自旋锁和互斥锁对比</h4><p>什么情况下使用自旋锁比较划算？</p><ul><li>预计线程等待锁的时间很短</li><li>加锁的代码（临界区）经常被调用，但竞争情况很少发送</li><li>CPU资源不紧张</li><li>多核处理器</li></ul><p>什么情况下使用互斥锁比较划算？</p><ul><li>预计线程等待锁的时间较长</li><li>单核处理器</li><li>临界区有IO操作</li><li>临界区代码复杂或者循环量大</li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
